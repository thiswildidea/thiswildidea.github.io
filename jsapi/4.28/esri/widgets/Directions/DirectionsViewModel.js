// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("../../chunks/tslib.es6 ../../core/Collection ../../core/Error ../../core/Evented ../../core/promiseUtils ../../core/reactiveUtils ../../core/accessorSupport/decorators/property ../../core/accessorSupport/ensureType ../../core/arrayUtils ../../core/has ../../core/accessorSupport/decorators/subclass ../../intl/locale ../../rest/networkService ../../rest/support/RouteParameters ../../rest/support/Stop ../../rest/support/TravelMode ../support/GoTo".split(" "),function(d,w,m,c,u,r,e,D,E,F,x,y,
z,v,t,A,B){var g;(function(a){a[a.Active=0]="Active";a[a.Complete=1]="Complete";a[a.Failed=2]="Failed";a[a.Idle=3]="Idle";a[a.Suspended=4]="Suspended"})(g||(g={}));c=class extends B.GoToMixin(c.EventedAccessor){constructor(a){super(a);this._routeController=this._loadController=this._loadPromise=this._highlight=null;this._serviceDescriptionStatus=g.Idle;this.apiKey=void 0;this.defaultTravelMode=null;this.departureTime="now";this.layer=this.lastRoute=this.lastError=null;this.maxStops=50;this.routeParameters=
new v({directionsLengthUnits:"kilometers",findBestSequence:!1,returnZ:!0,startTime:null,startTimeIsUTC:!0,useTimeWindows:!1});this.view=this.serviceDescription=null}initialize(){this.addHandles([r.on(()=>this.layer?.stops,"change",()=>{this.clearResults()}),r.watch(()=>this.layer,a=>{if(null!=a){for(;2>a.stops.length;)a.stops.add(new t);this._set("defaultTravelMode",null);this.addHandles(r.when(()=>null!=this.serviceDescription?a.routeInfo?.analysisSettings?.travelMode:null,f=>{this.defaultTravelMode=
this._resolveDefaultTravelMode(f)},{once:!0}))}},r.syncAndInitial)])}get _directionsLanguage(){if(null!=this.serviceDescription){var a=this.serviceDescription.directionsSupportedLanguages;if(a){var f=(this.routeParameters.directionsLanguage??y.getLocale()).slice(0,2);return a.find(b=>b.toLowerCase().slice(0,2)===f)}}}get impedanceAttribute(){return this.getCostAttribute(this.routeParameters.travelMode?.impedanceAttributeName??this.routeParameters.impedanceAttribute??this.serviceDescription?.impedance??
null)}get selectedTravelMode(){return null==this.serviceDescription?null:this.defaultTravelMode??this.serviceDescription.defaultTravelMode??this.serviceDescription.supportedTravelModes?.[0]??null}set selectedTravelMode(a){this._override("selectedTravelMode",a)}get state(){if(null!=this._routeController)return"routing";if(null!=this.lastError)return"error";switch(this._serviceDescriptionStatus){case g.Suspended:return"unauthenticated";case g.Idle:return"disabled";case g.Active:return"initializing";
case g.Failed:return"error";default:return"ready"}}get timeAttribute(){return this.getCostAttribute(this.routeParameters.travelMode?.timeAttributeName??this.routeParameters.directionsTimeAttribute??this.serviceDescription?.directionsTimeAttribute??null)}get travelModes(){const a=this.serviceDescription?.supportedTravelModes?.slice()??[];null==this.defaultTravelMode||a.includes(this.defaultTravelMode)||a.unshift(this.defaultTravelMode);return a}async load(){if(null!=this._loadPromise)return this._loadPromise;
this._loadPromise=this._load();await this._loadPromise;this._loadPromise=null}async highlight(a){this.clearHighlights();this.view&&this.layer&&(this._highlight=(await this.view.whenLayerView(this.layer)).highlight(a))}clearHighlights(){null!=this._highlight&&(this._highlight.remove(),this._highlight=null)}centerAt(a){null!=this.view&&(a="esri.rest.support.Stop"===a?.declaredClass||"esri.Graphic"===a?.declaredClass?a.geometry:a,null!=a&&this.callGoTo({target:a}))}clearResults(){this._set("lastRoute",
null);this.layer?.removeResult()}async getDirections(){const {apiKey:a,departureTime:f,layer:b,state:k}=this;if(null==b)throw new m("directions-view-model:missing-route-layer","A route layer must be associated with the view model.");if("unauthenticated"===k||"initializing"===k||"disabled"===k||this._serviceDescriptionStatus===g.Failed)throw new m("directions-view-model:not-loaded","Cannot get directions until view model loads.");this._set("lastError",null);null!=this._routeController&&(this._routeController.abort(),
this._routeController=null);var l="now"===f,h="now"===f?new Date:f;if(h&&!l){var p=6E4*h.getTimezoneOffset();h.setTime(h.getTime()-p)}const C=null!=this.view?this.view.spatialReference:null;p=this.routeParameters.clone();p.set({startTime:h,startTimeIsUTC:l,directionsLanguage:this._directionsLanguage,apiKey:a,outSpatialReference:C});null!=this.selectedTravelMode&&(p.travelMode=this.selectedTravelMode);if(2>b.stops.filter(({geometry:n})=>null!=n).length){var q=new m("directions-view-model:not-enough-stops",
"Not enough stops for routing");this._set("lastError",q);throw q;}this._routeController=new AbortController;({signal:l}=this._routeController);h=null;try{h=await b.solve(p,{signal:l})}catch(n){if(!u.isAbortError(n))throw q=new m("directions-view-model:unable-to-route","Unable to route to these addresses",{error:n}),this._set("lastError",q),this._set("lastRoute",null),q;}finally{this._routeController=null}for(const n of h.stops)null==n.geometry&&(n.name=null);b.update(h);this._set("lastRoute",h);this.zoomToRoute();
return h}getCostAttribute(a){return(this.serviceDescription?.networkDataset?.networkAttributes??[]).find(({name:f,usageType:b})=>f===a&&"cost"===b)??null}reset(){this.clearHighlights();this.clearResults();null!=this.layer&&(this.layer.removeAll(),this.layer.stops=new w([new t,new t]))}save(){if(!this.layer)throw new m("directions-view-model:missing-layer","save() requires a layer");return this.layer.save()}saveAs(a,f={}){if(!this.layer)throw new m("directions-view-model:missing-layer","saveAs() requires a layer");
return this.layer.saveAs(a,f)}zoomToRoute(){const {view:a,layer:f}=this;if(null!=a&&null!=f?.routeInfo){var {geometry:b}=f.routeInfo;if(null!=b&&(b=b.extent)){var k=b.width>b.height;b=b.clone().expand(k?2:1);this.callGoTo({target:b})}}}async _load(){if(null==this.serviceDescription&&null!=this.layer){null!=this._loadController&&(this._loadController.abort(),this._loadController=null);this._loadController=new AbortController;var {signal:a}=this._loadController;try{this._serviceDescriptionStatus=g.Active;
const b=await z.fetchServiceDescription(this.layer.url,this.apiKey,{signal:a});this._set("serviceDescription",b);this._serviceDescriptionStatus=g.Complete}catch(b){if(u.isAbortError(b))this._serviceDescriptionStatus=g.Idle;else if("identity-manager:user-aborted"===b.name)this._serviceDescriptionStatus=g.Suspended;else{var f=new m("directions-view-model:service-metadata-unavailable","Cannot load route service metadata",{error:b});this._serviceDescriptionStatus=g.Failed;this._set("lastError",f);throw f;
}}finally{this._loadController=null}}}_resolveDefaultTravelMode(a){if(null==this.serviceDescription)return null;const {defaultTravelMode:f,supportedTravelModes:b}=this.serviceDescription,k=/^<(?<name>.*)>$/i.exec(a.name)?.groups?.name;if(k){const l=b?.find(({name:h})=>h.toLocaleLowerCase()===k.trim().toLocaleLowerCase());return A.fromJSON({...(l??f)?.toJSON(),...a.toJSON()})}return b?.find(({name:l})=>l.toLocaleLowerCase()===a.name.toLocaleLowerCase())??f}};d.__decorate([e.property()],c.prototype,
"_directionsLanguage",null);d.__decorate([e.property()],c.prototype,"_routeController",void 0);d.__decorate([e.property()],c.prototype,"_serviceDescriptionStatus",void 0);d.__decorate([e.property()],c.prototype,"apiKey",void 0);d.__decorate([e.property()],c.prototype,"defaultTravelMode",void 0);d.__decorate([e.property()],c.prototype,"departureTime",void 0);d.__decorate([e.property({readOnly:!0})],c.prototype,"impedanceAttribute",null);d.__decorate([e.property()],c.prototype,"lastError",void 0);d.__decorate([e.property({readOnly:!0})],
c.prototype,"lastRoute",void 0);d.__decorate([e.property()],c.prototype,"layer",void 0);d.__decorate([e.property({type:Number,range:{min:2,max:50},nonNullable:!0})],c.prototype,"maxStops",void 0);d.__decorate([e.property({type:v,nonNullable:!0})],c.prototype,"routeParameters",void 0);d.__decorate([e.property()],c.prototype,"selectedTravelMode",null);d.__decorate([e.property({readOnly:!0})],c.prototype,"serviceDescription",void 0);d.__decorate([e.property({readOnly:!0})],c.prototype,"state",null);
d.__decorate([e.property({readOnly:!0})],c.prototype,"timeAttribute",null);d.__decorate([e.property()],c.prototype,"travelModes",null);d.__decorate([e.property()],c.prototype,"view",void 0);d.__decorate([e.property()],c.prototype,"getDirections",null);d.__decorate([e.property()],c.prototype,"zoomToRoute",null);return c=d.__decorate([x.subclass("esri.widgets.Directions.DirectionsViewModel")],c)});