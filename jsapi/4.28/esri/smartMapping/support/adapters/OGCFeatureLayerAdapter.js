// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("../../../chunks/tslib.es6 ../../../core/arrayUtils ../../../core/Error ../../../core/reactiveUtils ../../../core/Logger ../../../core/accessorSupport/ensureType ../../../core/has ../../../core/accessorSupport/decorators/subclass ../../../layers/support/fieldUtils ../../statistics/support/predominanceUtils ../../statistics/support/utils ../../statistics/support/WorkerClient ../utils ./FeatureLayerAdapter ./support/utils ../../../statistics/utils".split(" "),function(r,t,g,m,n,B,C,u,v,w,x,y,
p,z,k,q){n=class extends z{constructor(a){super(a)}async _waitForLayerViewUpdate(a){if(!a)throw new g("ogc-feature-layer-adapter:insufficient-data","layerView is required to fetch the features");await m.whenOnce(()=>!a.updating)}async _summaryStatsFromClientQuery(a,b){const {signal:c,view:d}=a;if(!d)throw new g("ogc-feature-layer-adapter:insufficient-data","view is required to fetch the features from layerView");a=k.getSummaryStatsQuery(this,a,b);const e=await d.whenLayerView(this.layer);await m.whenOnce(()=>
!e.updating,c);a=await e.queryFeatures(a,{signal:c});b=k.getSummaryStatisticsFromFeatureSet(a,p.isAnyDateField(b)||v.isTimeOnlyField(b));return q.processSummaryStatisticsResult(b)}async _uvFromClientQuery(a,b){const {signal:c,view:d}=a;if(!d)throw new g("ogc-feature-layer-adapter:insufficient-data","view is required to fetch the features from layerView");var e=k.getUVQuery(this,a);const f=await d.whenLayerView(this.layer);await m.whenOnce(()=>!f.updating,c);e=await f.queryFeatures(e,{signal:c});e=
await k.getUniqueValuesFromFeatureSet(e,{layer:this,field:a.field,field2:a.field2,field3:a.field3,fieldDelimiter:p.fieldDelimiter,view:a.view,signal:a.signal});return q.createUVResult(e,b,a.returnAllCodedValues,p.fieldDelimiter)}summaryStatistics(a){const {field:b,valueExpression:c,sqlExpression:d,features:e,view:f}=a,l=b?this.getField(b):null,h=!!c,A="3d"===f?.type;if(!c&&d&&!this.supportsSQLExpression)throw new g("ogc-feature-layer-adapter:not-supported","Layer does not support standardized SQL expression for queries");
return h||e||A?this._summaryStatsFromMemory(a,l):this._summaryStatsFromClientQuery(a,l)}async uniqueValues(a){const {valueExpression:b,sqlExpression:c,features:d,view:e}=a,f=await k.getDomainsForFields(a,this),l=!!b,h="3d"===e?.type;if(!b&&c&&!this.supportsSQLExpression)throw new g("ogc-feature-layer-adapter:not-supported","Layer does not support standardized SQL expression for queries");return l||d||h?this._uvFromMemory(a,f):this._uvFromClientQuery(a,f)}histogram(a){const {features:b,valueExpression:c,
normalizationType:d,sqlExpression:e}=a,f=b||!!c;if(!c&&e&&!this.supportsSQLExpression)throw new g("ogc-feature-layer-adapter:not-supported","Layer does not support standardized SQL expression for queries");return f||d?this._histogramFromMemory(a):this._histogramForField(a)}classBreaks(a){return!1!==a.analyzeData?this._classBreaksFromMemory(a):this._classBreaksFromInterpolation(a)}async queryFeatureCount(a){const {whereClause:b,view:c,signal:d}=a;if(!c)throw new g("ogc-feature-layer-adapter:insufficient-data",
"view is required to fetch the features from layerView");a=this.layer.createQuery();a.where=x.mergeWhereClauses(a.where,b);const e=await c.whenLayerView(this.layer);await m.whenOnce(()=>!e.updating,d);return e.queryFeatureCount(a,{signal:d})}generateRenderer(a,b){throw new g("ogc-feature-layer-adapter:not-supported","OGCFeatureLayer does not support generateRenderer operation");}async predominantCategories(a){const {fields:b,view:c,signal:d}=a;a=w.getArcadeForPredominantCategory(b);a=await this._uvFromMemory({valueExpression:a,
view:c,signal:d});return k.getPredominantCategoriesFromUVInfos(a.uniqueValueInfos,b)}async getSampleFeatures(a,b){const {view:c,sampleSize:d,requiredFields:e,returnGeometry:f,signal:l}=a,h=this.layer.createQuery();h.outSpatialReference=a.spatialReference||c?.spatialReference;h.returnGeometry=!!f;h.outFields=e;if(!c)throw new g("ogc-feature-layer-adapter:not-supported","view is required to get sample features for OGCFeatureLayer");a=await c.whenLayerView(this.layer);if(k.getMissingFields(this,e,a).length)throw new g("ogc-feature-layer-adapter:not-supported",
"Required fields need to be passed in the outFields for OGCFeatureLayer");b=await this._fetchFeaturesFromMemory(a,h,l,b);return t.pickRandom(b,null!=d&&0<d&&d<=b.length?d:b.length,1)}load(a){const b=this.layer.load(a).then(async c=>{this.geometryType=c.geometryType;this.objectIdField=c.objectIdField;this.supportsSQLExpression=c.capabilities?.query?.supportsSqlExpression;this.minScale=c.minScale;this.maxScale=c.maxScale;this.fullExtent=c.fullExtent;this.workerClient=y.WorkerClient.getInstance();await this.workerClient.open(a.signal)});
this.addResolvingPromise(b);return Promise.resolve(this)}};return n=r.__decorate([u.subclass("esri.smartMapping.support.adapters.OGCFeatureLayerAdapter")],n)});