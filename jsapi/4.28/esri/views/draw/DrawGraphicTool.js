// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("exports ../../chunks/tslib.es6 ../../Graphic ../../core/Evented ../../core/handleUtils ../../core/maybe ../../core/memoize ../../core/quantityUtils ../../core/reactiveUtils ../../core/unitUtils ../../core/accessorSupport/decorators/property ../../core/accessorSupport/ensureType ../../core/arrayUtils ../../core/has ../../core/accessorSupport/decorators/subclass ../../layers/GraphicsLayer ../../support/elevationInfoUtils ./support/createUtils ./support/helpMessageUtils ./support/surfaceCoordinateSystems ../interactive/InteractiveToolBase ../interactive/keybindings ../interactive/sketch/SketchLabelOptions ../interactive/sketch/SketchTooltipOptions ../interactive/tooltip/constraintUtils ../interactive/tooltip/DrawTooltipInfos ../interactive/tooltip/Tooltip ../support/angularMeasurementUtils ../support/automaticAreaMeasurementUtils ../support/automaticLengthMeasurementUtils ../../core/accessorSupport/trackingUtils".split(" "),
function(d,g,H,I,B,u,v,n,y,J,k,S,T,U,K,L,M,p,A,C,N,O,D,E,z,t,P,Q,F,w,R){class G{constructor(){this.rectangle=this.circle=this.outline=this.full=this.activeVertex=this.regularVertices=null}}d.DrawGraphicTool=class extends I.EventedMixin(N.InteractiveToolBase){constructor(a){super(a);this._createOperationGeometry=this._graphic=null;this.defaultZ=0;this.geometryType=null;this.hasZ=!0;this.labelOptions=new D;this.snappingManager=this.mode=this.geometryToPlace=null;this.snapToScene=!1;this.tooltip=null;
this.tooltipOptions=new E;this._getPointConstraint=v.memoize(b=>b);this._getPolylineOrPolygonConstraint=v.memoize((b,c,f)=>z.intersectAll([b,c,f]));this._getDistanceConstraint=v.memoize(z.getDistanceConstraint);this._getOrientationConstraint=v.memoize(z.getOrientationConstraint);this._getElevationConstraint=v.memoize(z.getElevationConstraint)}initialize(){this.internalGraphicsLayer=new L({listMode:"hide",internal:!0});this.view.map.layers.add(this.internalGraphicsLayer);this.drawOperation=this.makeDrawOperation();
const a=this.tooltipOptions,b=this.view.type;this.tooltipInfos={point:new t.DrawPointTooltipInfo({tooltipOptions:a,viewType:b}),polyline:new t.DrawPolylineTooltipInfo({tooltipOptions:a,viewType:b}),polygon:new t.DrawPolygonTooltipInfo({tooltipOptions:a,viewType:b}),mesh:new t.DrawMeshTooltipInfo({tooltipOptions:a,viewType:b}),rectangle:new t.DrawRectangleTooltipInfo({tooltipOptions:a}),circle:new t.DrawCircleTooltipInfo({tooltipOptions:a})};this.addHandles([this.drawOperation.on("vertex-add",c=>this.onVertexAdd(c)),
this.drawOperation.on("vertex-remove",c=>this.onVertexRemove(c)),this.drawOperation.on("vertex-update",c=>this.onVertexUpdate(c)),this.drawOperation.on("cursor-update",c=>this.onCursorUpdate(c)),this.drawOperation.on("complete",c=>this.onComplete(c)),y.watch(()=>this.cursor,c=>{this.drawOperation.cursor=c},y.syncAndInitial),y.watch(()=>this.tooltipOptions.enabled,c=>{this.tooltip=c?new P.Tooltip({view:this.view,info:this._tooltipInfo}):u.destroyMaybe(this.tooltip)},y.syncAndInitial),R.autorun(()=>
this._updateTooltipInfo())]);this.finishToolCreation()}destroy(){this.drawOperation=u.destroyMaybe(this.drawOperation);this.tooltip=u.destroyMaybe(this.tooltip);this._destroyAllVisualisations();this.view.map.remove(this.internalGraphicsLayer);this.internalGraphicsLayer=u.destroyMaybe(this.internalGraphicsLayer);this._set("view",null)}get _defaultElevation(){return n.createLength(this.defaultZ,"meters")}get canRedo(){return this.drawOperation.canRedo}get canUndo(){return this.drawOperation.canUndo}set centered(a){this._set("centered",
a);this._updateGraphic()}get cursor(){return this._get("cursor")}set cursor(a){this._set("cursor",a)}set enabled(a){this.drawOperation.interactive=a;this._set("enabled",a)}set forceUniformSize(a){this._set("forceUniformSize",a);this._updateGraphic()}get graphic(){return this._graphic}set graphicSymbol(a){this._set("graphicSymbol",a);null!=this._graphic&&(this._graphic.symbol=a)}get updating(){return this.drawOperation?.updating??!1}completeCreateOperation(){this.drawOperation.complete()}onInputEvent(a){const b=
this._tooltipInfo;if("key-down"===a.type&&a.key===O.tooltipKeys.enterInputMode&&null!=b&&0<b.editableFields.length&&this.tooltipOptions.inputEnabled)b.enterInputMode(),a.stopPropagation();else this.drawOperation.onInputEvent(a)}redo(){this.drawOperation.redo()}reset(){}undo(){this.drawOperation.undo()}_destroyAllVisualisations(){this.removeHandles(r.outline);this.removeHandles(r.regularVertices);this.removeHandles(r.activeVertex);this.removeHandles("create-operation-graphic")}_createOrUpdateGraphic(a){if(null!=
this._graphic)return this.updateGraphicGeometry(this._graphic,a),this._graphic;const b=this._graphic=new H({...this.graphicProperties,symbol:this.graphicSymbol});this.updateGraphicGeometry(b,a);this.internalGraphicsLayer.add(b);this.addHandles(this.initializeGraphic(b));this.notifyChange("graphic");this.addHandles(B.makeHandle(()=>{this.internalGraphicsLayer.remove(b);u.destroyMaybe(b);this._graphic===b&&(this._graphic=null)}),"create-operation-graphic");return b}updateGraphicGeometry(a,b){a.geometry=
b}_getCreateOperationGeometry(a={operationComplete:!1}){var {drawOperation:b}=this;if(null==b||0===b.numVertices)return null;const {coordinateHelper:c,view:f}=b;var h=b.stagedVertex,l=b.committedVertices;b=l.slice();var m=null!=h;m&&b.push(c.pointToArray(h));var q=m?c.pointToArray(h):l.splice(-1)[0];h=b.length;m=f.spatialReference;const x="3d"===f.type&&"global"===f.viewingMode,e=new G;switch(this.geometryType){case "point":case "mesh":e.regularVertices=l;e.activeVertex=q;e.full=c.arrayToPoint(b[0]);
break;case "multipoint":e.regularVertices=l;e.activeVertex=q;0<h&&(e.full=p.createMultipoint(b,m));break;case "polyline":e.regularVertices=l;e.activeVertex=q;0<h&&(e.full=p.createPolyline([b],m,x));break;case "polygon":e.regularVertices=l;e.activeVertex=q;0<h&&(e.full=p.createPolygon([b],m,x,!0));break;case "circle":0<h&&(l=C.createViewAlignedCoordinateSystem(f,b[0]),1===h&&a.operationComplete?(a=b[0],q=l.makeMapPoint(a[0]+48*f.resolution,a[1]),e.circle=p.createCircle([a,q],l,!0),e.full=null!=e.circle?
e.circle.geometry:null):2===h&&(this.forceUniformSize?(e.circle=p.createCircle(b,l,this.centered),e.full=null!=e.circle?e.circle.geometry:null):(e.rectangle=p.createEllipse(b,l,this.centered),e.full=e.rectangle.geometry)));break;case "rectangle":0<h&&(l=C.createViewAlignedCoordinateSystem(f,b[0]),1===h&&a.operationComplete?(a=b[0],q=l.makeMapPoint(a[0]+48*f.resolution,a[1]),e.rectangle=p.createSquare([a,q],l,!0),e.full=e.rectangle.geometry):2===h&&(e.rectangle=this.forceUniformSize?p.createSquare(b,
l,this.centered):p.createRectangle(b,l,this.centered),e.full=e.rectangle.geometry));break;default:return null}switch(this.geometryType){case "polyline":e.outline=1<h?p.createPolyline([b],m,x):null;break;case "polygon":e.outline=1<h?p.createPolygon([b],m,x):null;break;case "circle":case "rectangle":e.outline="polygon"===e.full?.type?p.createPolygon(e.full.rings,m,x):null}return e}initializeGraphic(a){return B.makeHandle()}onComplete(a){this._updateGraphic();let b=null;if(this.drawOperation.isCompleted){const c=
this._getCreateOperationGeometry({operationComplete:!0});null!=c&&(b=this._createOrUpdateGraphic(c.full).clone())}this._createOperationGeometry=null;this.emit("complete",{graphic:b,...a})}onCursorUpdate(a){this._updateGraphic();this.emit("cursor-update",a)}onDeactivate(){this.drawOperation.isCompleted||this.drawOperation.cancel()}onVertexAdd(a){this._updateGraphic();this._clearConstraints();this.emit("vertex-add",a)}onVertexRemove(a){this._updateGraphic();this._clearConstraints();this.emit("vertex-remove",
a)}onVertexUpdate(a){this._updateGraphic();this.emit("vertex-update",a)}_updateGraphic(){const a=this._getCreateOperationGeometry();this._createOperationGeometry=a;null==a?this._destroyAllVisualisations():(null!=a.outline?this.addHandles(this.onOutlineChanged(a.outline),r.outline):this.removeHandles(r.outline),null!=a.regularVertices?this.addHandles(this.onRegularVerticesChanged(a.regularVertices),r.regularVertices):this.removeHandles(r.regularVertices),null!=a.activeVertex?this.addHandles(this.onActiveVertexChanged(a.activeVertex),
r.activeVertex):this.removeHandles(r.activeVertex),null!=a.full?this._createOrUpdateGraphic(a.full):this.removeHandles("create-operation-graphic"))}get _tooltipInfo(){const {drawOperation:a,graphic:b,view:c}=this;if(!a)return null;const f=this.tooltipInfos,h=b?.geometry?.type;switch(this.geometryType){case "point":return"2d"===c.type&&0===this.defaultZ?null:"point"===h?f.point:null;case "polyline":return"polyline"===h?f.polyline:null;case "polygon":return"polygon"===h?f.polygon:null;case "rectangle":return"polygon"===
h?f.rectangle:null;case "circle":return"polygon"===h?f.circle:null;case "mesh":return"mesh"===h?f.mesh:null;default:return null}}_updateTooltipInfo(){const {_tooltipInfo:a,tooltip:b}=this;if(a&&b){switch(a.type){case "draw-point":this._updateDrawPointTooltipInfo(a);break;case "draw-polyline":this._updateDrawPolylineTooltipInfo(a);break;case "draw-polygon":this._updateDrawPolygonTooltipInfo(a);break;case "draw-rectangle":this._updateDrawRectangleTooltipInfo(a);break;case "draw-circle":this._updateDrawCircleTooltipInfo(a);
break;case "draw-mesh":this.updateDrawMeshTooltipInfo(a)}b.info=a}}_updateDrawPointTooltipInfo(a){const {drawOperation:b,graphic:c,view:f,tooltipOptions:h}=this,{elevationInfo:l,stagedVertex:m}=b;a.tooltipOptions=h;a.viewType=f.type;a.helpMessage=A.getDrawHelpMessage("point",c?.geometry);this.updateElevation(a.elevation);b.constraint=m?this._getPointConstraint(this._getElevationConstraint(a.elevation.committed,b.coordinateHelper.spatialReference,f,l)):void 0}_updateDrawPolylineTooltipInfo(a){var b=
this._createOperationGeometry;b=null!=b?b.full:null;if("polyline"===b?.type){var {drawOperation:c,tooltipOptions:f,view:h}=this,{lastVertex:l,stagedVertex:m}=c;this._updatePolylineOrPolygonCommon(a,m);var q=w.autoLengthByElevationMode(b,this._elevationMode);a.totalLength.actual=q??n.zeroMeters;a.totalLength.hidden=null==length||!l;a.tooltipOptions=f;a.viewType=h.type;a.helpMessage=A.getDrawHelpMessage("polyline",b);this.updateElevation(a.elevation)}}_updateDrawPolygonTooltipInfo(a){var b=this._createOperationGeometry;
b=null!=b?b.full:null;if("polygon"===b?.type){var {drawOperation:c,tooltipOptions:f,view:h}=this,{lastVertex:l}=c,m=c.stagedVertex;"polygon"===b?.type&&l&&!m&&(m=b.getPoint(0,b.rings[0].length-1));this._updatePolylineOrPolygonCommon(a,m);m=F.autoAreaByElevationMode(b,this._elevationMode);a.area.actual=m??n.zeroSquareMeters;a.area.hidden=null==m&&!l;a.tooltipOptions=f;a.viewType=h.type;a.helpMessage=A.getDrawHelpMessage("polygon",b);this.updateElevation(a.elevation)}}_updatePolylineOrPolygonCommon(a,
b){const {view:c,drawOperation:f}=this,{elevationInfo:h,lastVertex:l}=f;if(l&&b){var m=w.autoDirectDistanceByElevationModeBetweenPoints(l,b,this._elevationMode);a.distance.actual=m??n.zeroMeters;a.distance.hidden=!1;b=Q.orientationBetweenPoints(l,b);a.orientation.actual=b??n.zeroDegrees;a.orientation.hidden=!1;b=f.coordinateHelper.spatialReference;f.constraint=this._getPolylineOrPolygonConstraint(this._getDistanceConstraint(l,a.distance.committed,c,h),this._getOrientationConstraint(l,a.orientation.committed,
c,h),this._getElevationConstraint(a.elevation.committed,b,c,h))}else a.distance.hidden=!0,a.orientation.hidden=!0,f.constraint=void 0}updateDrawMeshTooltipInfo(a){}_updateDrawRectangleTooltipInfo(a){a.tooltipOptions=this.tooltipOptions;a.xSize=this._xSize??n.zeroMeters;a.ySize=this._ySize??n.zeroMeters;a.area=this._fullGeometryArea??n.zeroSquareMeters}_updateDrawCircleTooltipInfo(a){const {forceUniformSize:b}=this;a.tooltipOptions=this.tooltipOptions;a.radius=b?this._circleRadius??n.zeroMeters:null;
a.xSize=b?null:this._xSize??n.zeroMeters;a.ySize=b?null:this._ySize??n.zeroMeters;a.area=this._fullGeometryArea??n.zeroSquareMeters}get _circleRadius(){const a=this._createOperationGeometry;return null!=a?.circle?.center&&null!=a.circle.edge?w.autoHorizontalDistanceByElevationModeBetweenPoints(a.circle.center,a.circle.edge,this._elevationMode):null}get _xSize(){const a=this._createOperationGeometry?.rectangle?.midpoints;return null!=a?w.autoHorizontalDistanceByElevationModeBetweenPoints(a.left,a.right,
this._elevationMode):null}get _ySize(){const a=this._createOperationGeometry?.rectangle?.midpoints;return null!=a?w.autoHorizontalDistanceByElevationModeBetweenPoints(a.top,a.bottom,this._elevationMode):null}get _fullGeometryArea(){const a=this._createOperationGeometry?.full;return"polygon"!==a?.type?null:F.autoAreaByElevationMode(a,this._elevationMode)}updateElevation(a){a.actual=this._vertexTooltipElevation}get _vertexTooltipElevation(){const {tooltipOptions:a,view:b,drawOperation:c}=this;if(null==
c)return this._defaultElevation;var f=c.stagedVertex??c.lastVertex;if(null==f||"2d"===b.type)return this._defaultElevation;f=(M.getConvertedElevation(b,f,c.elevationInfo,{mode:a.elevation.mode,offset:0})??0)*J.getMetersPerVerticalUnitForSR(f.spatialReference);return n.createLength(f,"meters")}get _elevationMode(){return this.drawOperation.isDraped?"on-the-ground":"absolute-height"}_clearConstraints(){for(const [,a]of Object.entries(this.tooltipInfos))a.unlockAllFields()}};g.__decorate([k.property()],
d.DrawGraphicTool.prototype,"_createOperationGeometry",void 0);g.__decorate([k.property()],d.DrawGraphicTool.prototype,"_defaultElevation",null);g.__decorate([k.property({value:!0})],d.DrawGraphicTool.prototype,"centered",null);g.__decorate([k.property()],d.DrawGraphicTool.prototype,"cursor",null);g.__decorate([k.property({nonNullable:!0})],d.DrawGraphicTool.prototype,"defaultZ",void 0);g.__decorate([k.property()],d.DrawGraphicTool.prototype,"drawOperation",void 0);g.__decorate([k.property({value:!0})],
d.DrawGraphicTool.prototype,"enabled",null);g.__decorate([k.property({value:!0})],d.DrawGraphicTool.prototype,"forceUniformSize",null);g.__decorate([k.property({constructOnly:!0})],d.DrawGraphicTool.prototype,"geometryType",void 0);g.__decorate([k.property()],d.DrawGraphicTool.prototype,"graphic",null);g.__decorate([k.property({constructOnly:!0})],d.DrawGraphicTool.prototype,"graphicProperties",void 0);g.__decorate([k.property()],d.DrawGraphicTool.prototype,"graphicSymbol",null);g.__decorate([k.property({constructOnly:!0})],
d.DrawGraphicTool.prototype,"hasZ",void 0);g.__decorate([k.property({constructOnly:!0,type:D})],d.DrawGraphicTool.prototype,"labelOptions",void 0);g.__decorate([k.property({constructOnly:!0})],d.DrawGraphicTool.prototype,"geometryToPlace",void 0);g.__decorate([k.property({constructOnly:!0})],d.DrawGraphicTool.prototype,"mode",void 0);g.__decorate([k.property()],d.DrawGraphicTool.prototype,"snappingManager",void 0);g.__decorate([k.property()],d.DrawGraphicTool.prototype,"snapToScene",void 0);g.__decorate([k.property()],
d.DrawGraphicTool.prototype,"tooltip",void 0);g.__decorate([k.property()],d.DrawGraphicTool.prototype,"tooltipInfos",void 0);g.__decorate([k.property({constructOnly:!0,type:E})],d.DrawGraphicTool.prototype,"tooltipOptions",void 0);g.__decorate([k.property({readOnly:!0})],d.DrawGraphicTool.prototype,"type",void 0);g.__decorate([k.property({readOnly:!0})],d.DrawGraphicTool.prototype,"updating",null);g.__decorate([k.property({constructOnly:!0,nonNullable:!0})],d.DrawGraphicTool.prototype,"view",void 0);
g.__decorate([k.property()],d.DrawGraphicTool.prototype,"_tooltipInfo",null);g.__decorate([k.property()],d.DrawGraphicTool.prototype,"_circleRadius",null);g.__decorate([k.property()],d.DrawGraphicTool.prototype,"_xSize",null);g.__decorate([k.property()],d.DrawGraphicTool.prototype,"_ySize",null);g.__decorate([k.property()],d.DrawGraphicTool.prototype,"_fullGeometryArea",null);g.__decorate([k.property()],d.DrawGraphicTool.prototype,"_vertexTooltipElevation",null);g.__decorate([k.property()],d.DrawGraphicTool.prototype,
"_elevationMode",null);d.DrawGraphicTool=g.__decorate([K.subclass("esri.views.draw.DrawGraphicTool")],d.DrawGraphicTool);const r={outline:"outline-visual",regularVertices:"regular-vertices-visual",activeVertex:"active-vertex-visual"};d.CreateOperationGeometry=G;d.geometryTypeToDrawOperationGeometryType=function(a){switch(a){case "point":case "polyline":case "polygon":case "multipoint":return a;case "circle":case "rectangle":return"segment";case "mesh":return"point"}};Object.defineProperty(d,Symbol.toStringTag,
{value:"Module"})});