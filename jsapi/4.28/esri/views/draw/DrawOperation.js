// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("exports ../../chunks/tslib.es6 ../../core/Accessor ../../core/Evented ../../core/lang ../../core/maybe ../../core/promiseUtils ../../core/reactiveUtils ../../core/screenUtils ../../core/accessorSupport/decorators/property ../../core/accessorSupport/ensureType ../../core/accessorSupport/decorators/subclass ../../core/accessorSupport/diffUtils ../../core/support/UpdatingHandles ../../layers/graphics/dehydratedFeatureComparison ../../support/elevationInfoUtils ../ViewingMode ./DrawingMode ./DrawManipulator ../interactive/coordinateHelper ../interactive/dragEventPipeline ../interactive/editGeometry/EditGeometry ../interactive/editGeometry/EditGeometryOperations ../interactive/sketch/normalizedPoint ../interactive/sketch/SketchLabelOptions ../interactive/sketch/SketchTooltipOptions ../interactive/snapping/SnappingContext ../interactive/snapping/SnappingDragPipelineStep ../interactive/snapping/SnappingOperation ../interactive/snapping/snappingUtils".split(" "),
function(d,g,D,E,F,q,v,p,G,h,S,H,I,J,w,K,L,x,M,N,r,y,O,z,A,B,C,P,Q,R){d.DrawOperation=class extends E.EventedMixin(D){constructor(a){super(a);this._hideDefaultCursor=this._createOperationCompleted=!1;this._pointerDownStates=new Set;this._stagedPointerId=this._stagedPointerType=this._stagedScreenPoint=null;this._updatingHandles=new J.UpdatingHandles;this.constraint=void 0;this.isDraped=!0;this.labelOptions=new A;this.tooltipOptions=new B;this.cursor=null;this.loading=!1;this.lastVertex=this.snapToSceneEnabled=
null;null==a.elevationInfo&&(this.elevationInfo=K.getEffectiveElevationInfo(!!a.hasZ))}initialize(){const {geometryType:a,view:b}=this,f=b.spatialReference,e="viewingMode"in b.state?b.state.viewingMode:L.ViewingMode.Local,l="segment"===a||"multipoint"===a?"polyline":a;this.coordinateHelper=N.createCoordinateHelper(this.hasZ,this.hasM,f);this._editGeometryOperations=new O.EditGeometryOperations(new y.EditGeometry(l,this.coordinateHelper));this._snappingOperation=new Q.SnappingOperation({view:b,constrainResult:c=>
c?this._getEffectiveDrawSurface()?.constrainZ(c):void 0});this.addHandles([p.watch(()=>this.stagedVertex,c=>{null!=c&&this.emit("cursor-update",{updated:null,vertices:[{componentIndex:0,vertexIndex:this._activeComponent.vertices.length,coordinates:this.coordinateHelper.pointToArray(c)}],operation:"apply",type:"vertex-update"})},{sync:!0,equals:(c,k)=>q.equalsMaybe(c,k,w.pointEquals)}),p.watch(()=>this.view.viewpoint,(c,k)=>{c&&k&&I.diff(c,k)&&this._onViewpointChange()})]);this._activeComponent=new y.Component(f,
e);this._editGeometryOperations.data.components.push(this._activeComponent);const m=this.segmentLabels;null!=m&&(m.context={view:b,editGeometryOperations:this._editGeometryOperations,elevationInfo:this.elevationInfo,labelOptions:this.labelOptions},this.addHandles([p.watch(()=>this.labelOptions.enabled,c=>{m.visible=c},p.syncAndInitial),this.on("cursor-update",()=>{const c=this.stagedVertex;m.stagedVertex=null!=c?this.coordinateHelper.pointToVector(c):null})]));this.addHandles(this._editGeometryOperations.on(["vertex-add",
"vertex-update","vertex-remove"],c=>{const k=c.vertices.map(t=>({componentIndex:0,vertexIndex:t.index,coordinates:this.coordinateHelper.vectorToArray(t.pos)})),u=k.map(t=>t.coordinates);switch(c.type){case "vertex-add":this.emit(c.type,{...c,added:u,vertices:k});break;case "vertex-update":this.emit(c.type,{...c,updated:u,vertices:k});break;case "vertex-remove":this.emit(c.type,{...c,removed:u,vertices:k})}c=this._activeComponent.getLastVertex();c=null!=c?this.coordinateHelper.vectorToDehydratedPoint(c.pos):
null;null!=c&&null!=this.lastVertex&&w.pointEquals(this.lastVertex,c)||(this.lastVertex=c)}));const n=this._manipulator=new M.DrawManipulator({grabbableForEvent:c=>"click"!==this.drawingMode?!0:"touch"===c.pointerType&&this._snappingEnabled&&1===this._pointerDownStates.size});this.manipulators.add(n);n.grabbable="point"!==a;this.addHandles([this._createManipulatorDragPipeline(n),n.events.on("immediate-click",c=>this._onImmediateClick(c)),n.events.on("immediate-double-click",c=>this._onImmediateDoubleClick(c)),
p.watch(()=>({effectiveCursor:this.effectiveCursor}),({effectiveCursor:c})=>{n.cursor=c},p.syncAndInitial)]);R.setupSnappingToggleHandles(this,()=>{const c=this._getSnappingContext(this.view.inputManager.latestPointerType??"mouse");null!=this.snappingManager&&this._updatingHandles.addPromise(v.ignoreAbortErrors(this._snappingOperation.resnap(this.snappingManager,c)))})}destroy(){q.destroyMaybe(this.segmentLabels);q.destroyMaybe(this._snappingOperation);this._editGeometryOperations=q.destroyMaybe(this._editGeometryOperations);
this._updatingHandles.destroy()}get _snappingEnabled(){return null!=this.snappingManager&&this.snappingManager.options.effectiveEnabled}get _requiresScenePoint(){const a=this._getEffectiveDrawSurface();return"3d"===this.view.type&&this.drawSurface!==a}get canRedo(){return this._editGeometryOperations.canRedo}get canUndo(){return this._editGeometryOperations.canUndo}get committedVertices(){return this._activeComponent.vertices.map(a=>this.coordinateHelper.vectorToArray(a.pos))}set drawingMode(a){this._set("drawingMode",
a??x.defaultDrawingMode)}get effectiveCursor(){return this.loading?"progress":this._hideDefaultCursor?null:this.cursor||"crosshair"}get interactive(){return this._manipulator.interactive}set interactive(a){this._manipulator.interactive=a}get isCompleted(){return this._createOperationCompleted}get numCommittedVertices(){return this._activeComponent.vertices.length}get numVertices(){return null!=this.stagedVertex?this._activeComponent.vertices.length+1:this._activeComponent.vertices.length}get snappingOptions(){return null!=
this.snappingManager?this.snappingManager.options:null}get stagedVertex(){const a=this._snappingOperation.stagedPoint,{constraint:b,elevationInfo:f,view:e}=this;if(!a||!b)return a;var l=z.fromPoint(a,e,f);return(l=l?b.closestTo(l):void 0)?z.toDehydratedPoint(l,a.spatialReference):a}set stagedVertex(a){this._snappingOperation.stagedPoint=F.clone(a)}get updating(){return this._updatingHandles.updating}get vertices(){const a=this.committedVertices;null!=this.stagedVertex&&a.push(this.coordinateHelper.pointToArray(this.stagedVertex));
return a}cancel(){this.complete({aborted:!0})}commitStagedVertex(){this._snappingOperation.abort();if(null!=this.stagedVertex){const {stagedVertex:a}=this;this.stagedVertex=null;this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(a))}}complete(a){a=a&&a.aborted||!1;this._snappingOperation.abort();null!=this.snappingManager&&this.snappingManager.doneSnapping();"segment"===this.geometryType||"point"===this.geometryType?this.commitStagedVertex():this.stagedVertex=null;this._createOperationCompleted=
!("multipoint"===this.geometryType&&0===this.numVertices||"polyline"===this.geometryType&&2>this.numVertices||"polygon"===this.geometryType&&3>this.numVertices);(this.isCompleted||a)&&this.emit("complete",{vertices:this.vertices.map((b,f)=>({componentIndex:0,vertexIndex:f,coordinates:b})),aborted:a,type:"complete"})}onInputEvent(a){switch(a.type){case "pointer-down":this._pointerDownStates.add(a.pointerId);break;case "pointer-up":this._pointerDownStates.delete(a.pointerId)}switch(a.type){case "pointer-move":return this._onPointerMove(a);
case "hold":return this._onHold(a)}}redo(){this._editGeometryOperations.redo()}undo(){null!=this.snappingManager&&this.snappingManager.doneSnapping();this._editGeometryOperations.undo()}_closeOnClickVertexIndex(a){const b=this._activeComponent;if("polygon"===this.geometryType&&2<b.vertices.length){if(this._vertexWithinPointerDistance(b.vertices[0].pos,a))return 0;if(this._vertexWithinPointerDistance(b.vertices[b.vertices.length-1].pos,a))return b.vertices.length-1}return null}_createManipulatorDragPipeline(a){switch(this.drawingMode){case "click":return this._createManipulatorDragPipelineClick(a);
case "freehand":return this._createManipulatorDragPipelineFreehand(a);case "hybrid":return this._createManipulatorDragPipelineHybrid(a)}}_createManipulatorDragPipelineClick(a){return r.createManipulatorDragEventPipeline(a,(b,f,e,l)=>{const m="touch"===l&&this._snappingEnabled;if(!this.isCompleted&&m){var {snappingStep:n,cancelSnapping:c}=P.createSnapDragEventPipelineStep({predicate:()=>m,snappingManager:this.snappingManager,snappingContext:new C.SnappingContext({editGeometryOperations:this._editGeometryOperations,
elevationInfo:this.elevationInfo,feature:this.graphic,pointer:l,visualizer:this.snappingVisualizer}),updatingHandles:this._updatingHandles,useZ:!this._requiresScenePoint});e=e.next(k=>{m&&null!=this.snappingManager&&this.snappingManager.doneSnapping();return k}).next(c);f.next(this._screenToMapDragEventStep()).next(k=>{"start"===k.action&&(this.stagedVertex=k.mapStart,("segment"===this.geometryType||m&&0===this.numVertices)&&this.commitStagedVertex());return k}).next(r.sceneSnappingAtLocation(this.view,
this.elevationInfo)).next(...n).next(k=>{m&&(this.stagedVertex=k.mapEnd,"end"===k.action&&this.commitStagedVertex());return k}).next(k=>{"end"!==k.action||"segment"!==this.geometryType&&"point"!==this.geometryType||this.complete();return k})}})}_createManipulatorDragPipelineFreehand(a){return r.createManipulatorDragEventPipeline(a,(b,f)=>{this.isCompleted||f.next(this._screenToMapDragEventStep()).next(e=>{"start"===e.action&&(null==this.stagedVertex&&(this.stagedVertex=e.mapStart),"segment"===this.geometryType&&
this.commitStagedVertex());return e}).next(e=>{switch(e.action){case "start":case "update":this.stagedVertex=e.mapEnd;"polygon"!==this.geometryType&&"polyline"!==this.geometryType||this.commitStagedVertex();break;case "end":this.complete()}return e})})}_createManipulatorDragPipelineHybrid(a){return r.createManipulatorDragEventPipeline(a,(b,f)=>{this.isCompleted||f.next(this._screenToMapDragEventStep()).next(e=>{"start"===e.action&&(null==this.stagedVertex&&(this.stagedVertex=e.mapStart),this.commitStagedVertex());
return e}).next(e=>{switch(e.action){case "start":case "update":this.stagedVertex=e.mapEnd;"polygon"!==this.geometryType&&"polyline"!==this.geometryType||this.commitStagedVertex();break;case "end":"segment"!==this.geometryType&&"point"!==this.geometryType||this.complete()}return e})})}get _drawAtFixedElevation(){return("segment"===this.geometryType||"polygon"===this.geometryType)&&0<this.numCommittedVertices}_getEffectiveDrawSurface(){if(null==this.elevationDrawSurface)return this.drawSurface;if(!this.coordinateHelper.hasZ())return this.elevationDrawSurface.defaultZ=
null,this.elevationDrawSurface;let a=this.defaultZ,b=!1;null!=this.elevationInfo&&"absolute-height"===this.elevationInfo.mode&&(b=!0);null!=this.snapToSceneEnabled&&(b=this.snapToSceneEnabled);null!=this.elevationInfo&&"on-the-ground"===this.elevationInfo.mode&&(b=!1);this._drawAtFixedElevation&&(a=this.coordinateHelper.getZ(this._activeComponent.vertices[0].pos),b=!1);if(b)return this.drawSurface;this.elevationDrawSurface.defaultZ=a;return this.elevationDrawSurface}_mapToScreen(a){return this._getEffectiveDrawSurface()?.mapToScreen(a)}_onHold(a){this._snappingOperation.abort();
"click"===this.drawingMode&&"touch"===a.pointerType&&this._snappingEnabled&&(this.stagedVertex=a.mapPoint);a.stopPropagation()}_onImmediateClick(a){if(!("mouse"===a.pointerType&&2===a.button||this._manipulator.dragging)){var b=this._activeComponent;if(null!=this._closeOnClickVertexIndex(a.screenPoint))a.stopPropagation(),this.complete();else{var f=this._screenToMap(a.screenPoint);if(null!=f)switch(this.drawingMode){case "freehand":"point"===this.geometryType&&(null!=this.stagedVertex?this.commitStagedVertex():
this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(f)),this.complete());break;case "click":case "hybrid":this._snappingOperation.abort(),null!=this.stagedVertex?this.commitStagedVertex():this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(f)),("point"===this.geometryType||"segment"===this.geometryType&&2===b.vertices.length||"segment"===this.geometryType&&"hybrid"===this.drawingMode&&1===b.vertices.length)&&this.complete()}a.stopPropagation()}}}_onImmediateDoubleClick(a){this._manipulator.dragging||
"point"===this.geometryType||(this.complete(),a.stopPropagation())}_onPointerMove(a){const b=G.createScreenPoint(a.x,a.y);this._stagedScreenPoint=b;this._stagedPointerType=a.pointerType;this._stagedPointerId=a.pointerId;const f=this._snappingOperation,e=this._manipulator;this._pointerDownStates.has(a.pointerId)||e.grabbing||!e.interactive?f.abort():(a.stopPropagation(),this._updateStagedVertexOnPointerMove(b,a.pointerType))}_onViewpointChange(){const a=this._manipulator;"mouse"!==this._stagedPointerType||
!this._stagedScreenPoint||null==this._stagedPointerId||this._pointerDownStates.has(this._stagedPointerId)||a.grabbing||!a.interactive?this._snappingOperation.abort():this._updateStagedVertexOnPointerMove(this._stagedScreenPoint,this._stagedPointerType??"mouse")}_updateStagedVertexOnPointerMove(a,b){const f=this._snappingOperation;var e=this._closeOnClickVertexIndex(a);if(null!=e)this._closeOnVertex(e),f.abort();else if(e=this._screenToMap(a),a=this._requiresScenePoint?this.drawSurface?.screenToMap(a):
null,null==e)this._hideDefaultCursor=!0,f.abort();else{this._hideDefaultCursor=!1;var l=this.snappingManager;null==l?(this.stagedVertex=e,f.abort()):(b=this._getSnappingContext(b),this._updatingHandles.addPromise(v.ignoreAbortErrors(f.snap({point:e,scenePoint:a},l,b))))}}_closeOnVertex(a){this.stagedVertex=null;a={componentIndex:0,vertexIndex:a,coordinates:this.coordinateHelper.vectorToArray(this._activeComponent.vertices[a].pos)};this.emit("cursor-update",{updated:null,vertices:[a],operation:"apply",
type:"vertex-update"})}_screenToMap(a){return this._getEffectiveDrawSurface()?.screenToMap(a)}_screenToMapDragEventStep(){let a=null;return b=>{"start"===b.action&&(a=this._screenToMap(b.screenStart));if(null==a)return null;const f=this._screenToMap(b.screenEnd);return null!=f?{...b,mapStart:a,mapEnd:f}:null}}_vertexWithinPointerDistance(a,b){const f=this._mapToScreen(this.coordinateHelper.vectorToDehydratedPoint(a));null!=f?(a=f.x-b.x,b=f.y-b.y,b=25>=a*a+b*b):b=!1;return b}_getSnappingContext(a){const b=
this._drawAtFixedElevation?this.elevationDrawSurface?.defaultZ:null;return new C.SnappingContext({editGeometryOperations:this._editGeometryOperations,elevationInfo:this.elevationInfo,pointer:a,feature:this.graphic,visualizer:this.snappingVisualizer,selfSnappingZ:null!=b?{value:b,elevationInfo:this.elevationInfo}:null})}};g.__decorate([h.property()],d.DrawOperation.prototype,"_hideDefaultCursor",void 0);g.__decorate([h.property()],d.DrawOperation.prototype,"_snappingOperation",void 0);g.__decorate([h.property()],
d.DrawOperation.prototype,"_snappingEnabled",null);g.__decorate([h.property({constructOnly:!0})],d.DrawOperation.prototype,"graphic",void 0);g.__decorate([h.property()],d.DrawOperation.prototype,"constraint",void 0);g.__decorate([h.property()],d.DrawOperation.prototype,"defaultZ",void 0);g.__decorate([h.property()],d.DrawOperation.prototype,"isDraped",void 0);g.__decorate([h.property({value:x.defaultDrawingMode})],d.DrawOperation.prototype,"drawingMode",null);g.__decorate([h.property({constructOnly:!0})],
d.DrawOperation.prototype,"elevationDrawSurface",void 0);g.__decorate([h.property({constructOnly:!0})],d.DrawOperation.prototype,"elevationInfo",void 0);g.__decorate([h.property({constructOnly:!0,type:A})],d.DrawOperation.prototype,"labelOptions",void 0);g.__decorate([h.property({constructOnly:!0,type:B})],d.DrawOperation.prototype,"tooltipOptions",void 0);g.__decorate([h.property({constructOnly:!0})],d.DrawOperation.prototype,"geometryType",void 0);g.__decorate([h.property({constructOnly:!0})],d.DrawOperation.prototype,
"hasM",void 0);g.__decorate([h.property({constructOnly:!0})],d.DrawOperation.prototype,"hasZ",void 0);g.__decorate([h.property()],d.DrawOperation.prototype,"cursor",void 0);g.__decorate([h.property()],d.DrawOperation.prototype,"effectiveCursor",null);g.__decorate([h.property()],d.DrawOperation.prototype,"loading",void 0);g.__decorate([h.property({constructOnly:!0})],d.DrawOperation.prototype,"manipulators",void 0);g.__decorate([h.property({constructOnly:!0})],d.DrawOperation.prototype,"drawSurface",
void 0);g.__decorate([h.property({constructOnly:!0})],d.DrawOperation.prototype,"segmentLabels",void 0);g.__decorate([h.property({constructOnly:!0})],d.DrawOperation.prototype,"snappingManager",void 0);g.__decorate([h.property({constructOnly:!0})],d.DrawOperation.prototype,"snappingVisualizer",void 0);g.__decorate([h.property()],d.DrawOperation.prototype,"snapToSceneEnabled",void 0);g.__decorate([h.property()],d.DrawOperation.prototype,"stagedVertex",null);g.__decorate([h.property()],d.DrawOperation.prototype,
"lastVertex",void 0);g.__decorate([h.property()],d.DrawOperation.prototype,"updating",null);g.__decorate([h.property({constructOnly:!0})],d.DrawOperation.prototype,"view",void 0);d.DrawOperation=g.__decorate([H.subclass("esri.views.draw.DrawOperation")],d.DrawOperation);d.defaultCursor="crosshair";d.defaultLoadingCursor="progress";Object.defineProperty(d,Symbol.toStringTag,{value:"Module"})});