// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("exports ../../../chunks/vec2 ../../../chunks/vec2f64 ../../../chunks/vec3 ../../../chunks/vec3f64 ../../../support/elevationInfoUtils ../sketch/constraints ../sketch/normalizedPoint ./SnappingAlgorithm ./snappingUtils ./candidates/RightAngleSnappingCandidate ../support/viewUtils".split(" "),function(t,l,x,u,p,q,y,h,z,A,v,r){class B extends z.SnappingAlgorithm{snapNewVertex(k,a){var c=a.editGeometryOperations.data.components[0],b=c.vertices.length;const d=[];if(2>b)return d;var {view:e}=this;
const f=r.vectorToScreenPoint(k,a.spatialReference,q.absoluteHeightElevationInfo,e);var g=c.vertices[b-1];this.edgeExceedsShortLineThreshold(g.leftEdge,a)&&(b=h.fromAnyMapPoint(g.pos,e,a),g=h.fromAnyMapPoint(g.leftEdge.leftVertex.pos,e,a),this._checkForSnappingCandidate(d,g,b,k,f,a));b=c.vertices[0];this.edgeExceedsShortLineThreshold(b.rightEdge,a)&&(c=h.fromAnyMapPoint(b.pos,e,a),e=h.fromAnyMapPoint(b.rightEdge.rightVertex.pos,e,a),this._checkForSnappingCandidate(d,e,c,k,f,a));return d}snapExistingVertex(k,
a){const c=[];var b=a.vertexHandle;if(3>b.component.vertices.length)return c;var {view:d}=this;const e=r.vectorToScreenPoint(k,a.spatialReference,q.absoluteHeightElevationInfo,d);var f=b.leftEdge;b=b.rightEdge;if(f?.leftVertex.leftEdge){var g=f.leftVertex.leftEdge;this.edgeExceedsShortLineThreshold(g,a)&&(f=h.fromAnyMapPoint(g.rightVertex.pos,d,a),g=h.fromAnyMapPoint(g.leftVertex.pos,d,a),this._checkForSnappingCandidate(c,g,f,k,e,a))}b?.rightVertex.rightEdge&&(f=b.rightVertex.rightEdge,this.edgeExceedsShortLineThreshold(f,
a)&&(b=h.fromAnyMapPoint(f.leftVertex.pos,d,a),d=h.fromAnyMapPoint(f.rightVertex.pos,d,a),this._checkForSnappingCandidate(c,d,b,k,e,a)));return c}_checkForSnappingCandidate(k,a,c,b,d,e){const {spatialReference:f,pointer:g}=e;l.subtract(m,c,a);const n=u.set(C,m[1],-m[0],0),w=l.dot(n,l.subtract(m,b,c))/l.squaredLength(n);b=h.fromVec3(l.scaleAndAdd(p.clone(b),c,n,w));A.squaredScreenDistance(d,r.vectorToScreenPoint(b,f,q.absoluteHeightElevationInfo,this.view))<this.squaredProximityThreshold(g)&&!this.isVertical(b,
c)&&!this.isVertical(c,a)&&(d=u.scaleAndAdd(p.create(),c,n,Math.sign(w)),k.push(new v.RightAngleSnappingCandidate({targetPoint:b,constraint:new y.VerticalHalfPlaneConstraint(c,h.fromVec3(d)),previousVertex:a,otherVertex:c,otherVertexType:v.OtherVertexType.CENTER,isDraped:"on-the-ground"===e.elevationInfo?.mode})))}}const m=x.create(),C=p.create();t.RightAngleSnapper=B;Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})});