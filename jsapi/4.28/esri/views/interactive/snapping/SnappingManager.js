// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("exports ../../../chunks/tslib.es6 ../../../core/Accessor ../../../core/Evented ../../../core/promiseUtils ../../../core/reactiveUtils ../../../core/accessorSupport/decorators/property ../../../core/accessorSupport/ensureType ../../../core/arrayUtils ../../../core/has ../../../core/accessorSupport/decorators/subclass ../../../geometry/projection ../../../support/elevationInfoUtils ../sketch/normalizedPoint ./Settings ./SnappingDomain ./snappingFactory ./SnappingOptions ./snappingPointUtils ./snappingUtils ./candidates/IntersectionSnappingCandidate ../support/viewUtils".split(" "),
function(m,n,D,E,F,r,q,L,M,N,G,x,y,u,z,v,H,I,A,B,w,J){function K({coordinateHelper:a,elevationInfo:b}){return a.hasZ()?y.absoluteHeightElevationInfo:b}m.SnappingManager=class extends E.EventedMixin(D){constructor(a){super(a);this.options=new I;this.snappingEnginesFactory=H.defaultSnappingEnginesFactory;this._engines=[];this._currentMainCandidate=null;this._currentOtherActiveCandidates=[];this._currentSnappedType=p.MAIN}initialize(){this.addHandles([r.watch(()=>{const {effectiveFeatureEnabled:a,effectiveSelfEnabled:b,
touchSensitivityMultiplier:c,distance:d}=this.options;return{effectiveFeatureEnabled:a,effectiveSelfEnabled:b,touchSensitivityMultiplier:c,distance:d}},()=>{this.doneSnapping();this.emit("changed")},r.sync),r.watch(()=>this.options,a=>{for(const b of this._engines)b.options=a},r.sync),r.watch(()=>({viewReady:this.view.ready,viewSpatialReference:this.view.spatialReference,snappingEnginesFactory:this.snappingEnginesFactory}),({viewReady:a,snappingEnginesFactory:b})=>this._recreateEngines(a,b),r.syncAndInitial)])}destroy(){this._destroyEngines()}get updating(){return this._engines.some(a=>
a.updating)}_recreateEngines(a,b){this._destroyEngines();if(a){var {view:c,options:d}=this;this._engines=b(c,d)}}_destroyEngines(){for(const a of this._engines)a.destroy();this._engines=[]}get _squaredMouseProximityTreshold(){return this.options.distance*this.options.distance}get _squaredTouchProximityThreshold(){const {distance:a,touchSensitivityMultiplier:b}=this.options,c=a*b;return c*c}get _squaredSatisfiesConstraintThreshold(){return z.defaults.satisfiesConstraintScreenThreshold*z.defaults.satisfiesConstraintScreenThreshold}snap(a){return null!=
a.scenePoint?this._snapMultiPoint(a):this._snapSinglePoint(a)}update(a){const {point:b,context:c}=a;this._removeVisualization();const d=this._currentMainCandidate;if(null==d)return b;var e=this._selectUpdateInput(a);if(null==e)return b;({spatialReference:a}=c);var f=x.project(e,a);if(null==f)return b;({view:e}=this);const {elevationInfo:h,visualizer:l}=c,g=[];f=u.fromPoint(f,e,h);const k=d.constraint.closestTo(f);if(!this._arePointsWithinScreenThreshold(f,k,c))return this._resetSnappingState(),b;
d.targetPoint=k;g.push(...d.hints);for(const t of this._currentOtherActiveCandidates)t.targetPoint=k,g.push(...t.hints);null!=l&&this.addHandles(l.draw(g,{spatialReference:a,elevationInfo:K(c),view:e,selfSnappingZ:c.selfSnappingZ}),"visualization-handle");return A.snappingPointToSnappingOutput(k,e,{z:b.z,m:b.m,spatialReference:b.spatialReference,elevationInfo:h})}doneSnapping(){this._removeVisualization();this._resetSnappingState()}_selectUpdateInput({point:a,scenePoint:b}){switch(this._currentSnappedType){case p.MAIN:return a;
case p.SCENE:return b}}_resetSnappingState(){this._currentMainCandidate=null;this._currentOtherActiveCandidates=[];this._currentSnappedType=p.MAIN}_removeVisualization(){this.removeHandles("visualization-handle")}async _snapSinglePoint({point:a,context:b,signal:c}){const {view:d}=this,{elevationInfo:e}=b,f=u.fromPoint(a,d,e),h=await this._fetchCandidates(f,v.SnappingDomain.ALL,b,c);return this._createSnapResult(f,p.MAIN,h,d,b,{z:a.z,m:a.m,spatialReference:a.spatialReference,elevationInfo:e},c)}async _snapMultiPoint({point:a,
scenePoint:b,context:c,signal:d}){const {view:e}=this,{coordinateHelper:f,elevationInfo:h,spatialReference:l}=c;await x.initializeProjection(b.spatialReference,l);b=x.project(b,l);var g=u.fromPoint(b,e,h);const k=await this._fetchCandidates(g,v.SnappingDomain.FEATURE,c,d);if(0<k.length)return a=await this._fetchCandidates(g,v.SnappingDomain.SELF,c,d),this._createSnapResult(g,p.SCENE,[...k,...a],e,c,{z:b.z,m:b.m,spatialReference:b.spatialReference,elevationInfo:h},d);b=u.fromPoint(a,e,h);g=await this._fetchCandidates(b,
v.SnappingDomain.SELF,c,d);return this._createSnapResult(b,p.MAIN,g,e,c,{z:f.hasZ()&&a.hasZ?a.z??0:void 0,m:f.hasM()&&a.hasM?a.m??0:void 0,spatialReference:a.spatialReference,elevationInfo:h},d)}async _fetchCandidates(a,b,c,d){return(await Promise.all(this._engines.map(e=>e.fetchCandidates(a,b,c,d)))).flat()}_createSnapResult(a,b,c,d,e,f,h){return{get valid(){return!F.isAborted(h)},apply:()=>{const {spatialReference:l}=e,{snappedPoint:g,hints:k}=this._processCandidates(a,b,c,e);this._removeVisualization();
null!=e.visualizer&&this.addHandles(e.visualizer.draw(k,{spatialReference:l,elevationInfo:y.absoluteHeightElevationInfo,view:d,selfSnappingZ:e.selfSnappingZ}),"visualization-handle");return A.snappingPointToSnappingOutput(g,d,f)}}}_processCandidates(a,b,c,d){if(1>c.length)return this.doneSnapping(),{snappedPoint:a,hints:[]};this._currentSnappedType!==b&&this._resetSnappingState();B.sortCandidatesInPlace(a,c);const e=this._currentMainCandidate;if(null!=e){const f=this._findOldConstraintInNewCandidates(e,
c);if(0<=f)if(c[f]instanceof w.IntersectionSnappingCandidate){if(this._arePointsWithinScreenThreshold(a,e.targetPoint,d))return this._updateSnappingCandidate(e,b,c,d)}else return this._intersectWithOtherCandidates(f,c,a,b,d)}return this._intersectWithOtherCandidates(0,c,a,b,d)}_findOldConstraintInNewCandidates(a,b){return a instanceof w.IntersectionSnappingCandidate?0<=this._findOldCandidateIndex(b,a.first)&&0<=this._findOldCandidateIndex(b,a.second)?0:-1:this._findOldCandidateIndex(b,a)}_intersectWithOtherCandidates(a,
b,c,d,e){const {coordinateHelper:f}=e,h=b[a],l=[];for(let g=0;g<b.length;++g){if(g===a)continue;const k=b[g],t=h.constraint.intersect(k.constraint);if(t)for(const C of t.closestPoints(h.targetPoint))l.push([new w.IntersectionSnappingCandidate(C,h,k,k.isDraped),this._squaredScreenDistance(c,C,f)])}return 0<l.length&&(l.sort((g,k)=>g[1]-k[1]),l[0][1]<this._squaredPointProximityThreshold(e.pointer))?this._updateSnappingCandidate(l[0][0],d,b,e):this._updateSnappingCandidate(h,d,b,e)}_updateSnappingCandidate(a,
b,c,d){this.doneSnapping();this._currentMainCandidate=a;this._currentSnappedType=b;b=this._currentMainCandidate.targetPoint;const e=[];e.push(...a.hints);for(const f of c){if(a instanceof w.IntersectionSnappingCandidate){if(f.constraint.equals(a.first.constraint)||f.constraint.equals(a.second.constraint))continue}else if(f.constraint.equals(a.constraint))continue;c=f.constraint.closestTo(b);this._squaredScreenDistance(c,b,d.coordinateHelper)<this._squaredSatisfiesConstraintThreshold&&(f.targetPoint=
b,this._currentOtherActiveCandidates.push(f),e.push(...f.hints))}return{snappedPoint:b,hints:e}}_squaredPointProximityThreshold(a){return"touch"===a?this._squaredTouchProximityThreshold:this._squaredMouseProximityTreshold}_arePointsWithinScreenThreshold(a,b,c){return this._squaredScreenDistance(a,b,c.coordinateHelper)<this._squaredPointProximityThreshold(c.pointer)}_squaredScreenDistance(a,b,c){return B.squaredScreenDistance(this._toScreen(a,c),this._toScreen(b,c))}_toScreen(a,b){return J.vectorToScreenPoint(a,
b.spatialReference,y.absoluteHeightElevationInfo,this.view)}_findOldCandidateIndex(a,b){let c=-1;for(let d=0;d<a.length;++d)if(b.constraint.equals(a[d].constraint)){c=d;break}return c}get test(){return{visualizationsActive:this.hasHandles("visualization-handle"),engines:this._engines}}};n.__decorate([q.property({constructOnly:!0})],m.SnappingManager.prototype,"view",void 0);n.__decorate([q.property()],m.SnappingManager.prototype,"options",void 0);n.__decorate([q.property({readOnly:!0})],m.SnappingManager.prototype,
"updating",null);n.__decorate([q.property()],m.SnappingManager.prototype,"snappingEnginesFactory",void 0);n.__decorate([q.property()],m.SnappingManager.prototype,"_engines",void 0);n.__decorate([q.property()],m.SnappingManager.prototype,"_squaredMouseProximityTreshold",null);n.__decorate([q.property()],m.SnappingManager.prototype,"_squaredTouchProximityThreshold",null);n.__decorate([q.property()],m.SnappingManager.prototype,"_squaredSatisfiesConstraintThreshold",null);m.SnappingManager=n.__decorate([G.subclass("esri.views.interactive.snapping.SnappingManager")],
m.SnappingManager);var p;(function(a){a[a.MAIN=0]="MAIN";a[a.SCENE=1]="SCENE"})(p||(p={}));Object.defineProperty(m,Symbol.toStringTag,{value:"Module"})});