// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("exports ../../core/mathUtils ../../chunks/vec2 ../../chunks/vec2f64 ../../chunks/vec3 ../../chunks/vec3f64 ../../geometry/support/plane ../3d/support/mathUtils ./geometry2dUtils".split(" "),function(h,G,n,u,e,k,z,Q,q){function I(b,{start:a,end:f,type:c}){b=e.sub(v,b,a);f=e.sub(x,f,a);b=e.dot(b,f)/e.dot(f,f);return e.scaleAndAdd(k.create(),a,f,c===q.LineType.RAY?Math.max(b,0):b)}function J({start:b,end:a,type:f},c){const d=e.sub(v,c,b);a=e.sub(x,a,b);if(f===q.LineType.RAY&&-1E-6>e.dot(a,d))return e.distance(b,
c);b=e.cross(C,a,d);return e.len(b)/e.len(a)}function K(b,a){const f=b.start,c=a.start;var d=a.end;const l=e.sub(v,b.end,f);d=e.sub(x,d,c);var m=e.sub(C,c,f),g=e.cross(L,l,d),p=e.dot(m,g);if(!G.floatEqualAbsolute(p,0,1E-6))return[];p=e.sqrLen(g);if(G.floatEqualAbsolute(p,0,1E-6))return[];m=e.cross(M,m,d);g=e.dot(m,g)/p;g=e.scaleAndAdd(N,f,l,g);return b.type===q.LineType.RAY&&(b=e.sub(D,g,f),-1E-6>e.dot(l,b))||a.type===q.LineType.RAY&&(a=e.sub(D,g,c),-1E-6>e.dot(d,a))?[]:[k.clone(g)]}function O({start:b,
end:a,type:f},c){const d=e.sub(v,c,b);b=e.sub(x,a,b);a=e.cross(C,b,d);if(1E-6>e.sqrLen(a)/e.sqrLen(b))switch(f){case q.LineType.LINE:return[k.clone(c)];case q.LineType.RAY:return-1E-6>e.dot(b,d)?[]:[k.clone(c)]}return[]}function B(b,a,{start:f,end:c,type:d}){e.set(b.start,f[0],f[1],a);e.set(b.end,c[0],c[1],a);b.type=R[d];return b}function w(b,a){return 1E-6>Math.abs(b-a)}function E(b,a){return z.isPointInside(b,a)}const U=(()=>{const b=k.create(),a=k.create(),f=k.create();return({start:c,end:d},{center:l,
radius:m,normal:g,slicePlane:p})=>{const r=k.create(),A=z.fromPositionAndNormal(l,g,S);if(w(z.distance(A,c),0)&&w(z.distance(A,d),0)){Q.tangentFrame(g,b,a);g=(t,y)=>{e.subtract(f,y,l);n.set(t,e.dot(f,b),e.dot(f,a));return t};d=q.intersectLineLikeAndCircle({start:g(P,c),end:g(T,d),type:q.LineType.LINE},u.ZEROS,m);c=[];for(const [t,y]of d)d=e.copy(k.create(),l),e.scaleAndAdd(d,d,b,t),e.scaleAndAdd(d,d,a,y),p&&!E(p,d)||c.push(d);return c}return z.intersectLine(A,c,d,r)?!w(e.distance(r,l),m)||p&&!E(p,
r)?[]:[r]:[]}})();h.VerticalPlaneType=void 0;(function(b){b[b.PLANE=0]="PLANE";b[b.HALF_PLANE=1]="HALF_PLANE"})(h.VerticalPlaneType||(h.VerticalPlaneType={}));const R={[h.VerticalPlaneType.PLANE]:q.LineType.LINE,[h.VerticalPlaneType.HALF_PLANE]:q.LineType.RAY},P=u.create(),T=u.create(),v=k.create(),x=k.create(),C=k.create(),L=k.create(),M=k.create(),N=k.create(),D=k.create(),S=z.create(),F={start:k.create(),end:k.create(),type:q.LineType.LINE},V={start:k.create(),end:k.create(),type:q.LineType.LINE};
Object.defineProperty(h,"LineType",{enumerable:!0,get:()=>q.LineType});h.epsilon=1E-6;h.intersectLineAndPoint=O;h.intersectLineLikeAndCircle=U;h.intersectLineLikeAndVerticalCylinder=function({start:b,end:a,type:f},c,d){const l=[];a=e.subtract(v,a,b);var m=n.subtract(x,b,c);c=n.squaredLength(a);const g=2*n.dot(a,m);d=n.squaredLength(m)-d*d;d=g*g-4*c*d;0===d?(c=-g/(2*c),(f===q.LineType.LINE||0<=c)&&l.push(e.scaleAndAdd(k.create(),b,a,c))):0<d&&(d=Math.sqrt(d),m=(-g+d)/(2*c),(f===q.LineType.LINE||0<=
m)&&l.push(e.scaleAndAdd(k.create(),b,a,m)),c=(-g-d)/(2*c),(f===q.LineType.LINE||0<=c)&&l.push(e.scaleAndAdd(k.create(),b,a,c)));return l};h.intersectLineLikes=K;h.intersectVerticalCylinderAndPoint=function(b,a,f){return G.floatEqualAbsolute(n.squaredDistance(f,b),a*a,1E-6)?[k.clone(f)]:[]};h.intersectVerticalCylinders=function(b,a,f,c){const [d,l]=b,[m,g]=f;var p=m-d,r=g-l;const A=p*p+r*r,t=Math.sqrt(A);if(t>a+c||t<Math.abs(a-c)||w(t,0)&&w(a,c))return[];c=(a*a-c*c+A)/(2*t);a=Math.sqrt(a*a-c*c);r=
a*r/t;p=a*p/t;const [y,H]=n.lerp(P,b,f,c/t);return w(r,p)?[u.fromValues(y,H)]:[u.fromValues(y+r,H-p),u.fromValues(y-r,H+p)]};h.intersectVerticalPlaneAndLineLike=function(b,a){const f=b.start,c=n.subtract(v,b.end,f);var d=e.set(x,-c[1],c[0],0);const l=a.start,m=e.sub(C,a.end,l);var g=e.dot(m,d),p=e.set(L,f[0],f[1],0);p=e.sub(M,p,l);d=e.dot(p,d);if(1E-6>Math.abs(g))return[];g=e.scaleAndAdd(N,l,m,d/g);return a.type===q.LineType.RAY&&(a=e.sub(D,g,l),-1E-6>e.dot(a,m))||b.type===h.VerticalPlaneType.HALF_PLANE&&
(b=n.sub(D,g,f),-1E-6>n.dot(b,c))?[]:[k.clone(g)]};h.intersectVerticalPlaneAndPoint=function(b,a){return O(B(F,a[2],b),a)};h.intersectVerticalPlaneAndVerticalCylinder=function({start:b,end:a,type:f},c,d){const l=[];a=n.subtract(v,a,b);var m=n.subtract(x,b,c);c=n.squaredLength(a);const g=2*n.dot(a,m);d=n.squaredLength(m)-d*d;d=g*g-4*c*d;0===d?(c=-g/(2*c),(f===h.VerticalPlaneType.PLANE||0<=c)&&l.push(n.scaleAndAdd(u.create(),b,a,c))):0<d&&(d=Math.sqrt(d),m=(-g+d)/(2*c),(f===h.VerticalPlaneType.PLANE||
0<=m)&&l.push(n.scaleAndAdd(u.create(),b,a,m)),c=(-g-d)/(2*c),(f===h.VerticalPlaneType.PLANE||0<=c)&&l.push(n.scaleAndAdd(u.create(),b,a,c)));return l};h.intersectVerticalPlanes=function(b,a){b=B(F,0,b);a=B(V,0,a);a=K(b,a);b=[];for(const f of a)b.push(u.clone(f));return b};h.isClose=w;h.isPointInsidePlane=E;h.pointToLineLikeDistance=J;h.pointToVerticalCylinderDistance=function(b,a,f){return n.distance(b,a)-f};h.pointToVerticalPlaneDistance=function(b,a){return J(B(F,b[2],a),b)};h.pointsInsidePlane=
function(b,a){return a.filter(f=>E(b,f))};h.projectPointToLineLike=I;h.projectPointToVerticalCylinder=function(b,a,f){const c=n.subtract(v,b,a);f/=n.length(c);a=n.scaleAndAdd(k.create(),a,c,f);a[2]=b[2];return a};h.projectPointToVerticalPlane=function(b,a){return I(b,B(F,b[2],a))};h.vectorsHaveCloseZ=function(b,a){return w(b[2],a[2])};Object.defineProperty(h,Symbol.toStringTag,{value:"Module"})});