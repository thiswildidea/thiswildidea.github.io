// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("exports ../../../../chunks/vec3 ../../../../chunks/vec3f64 ../../../../chunks/vec4f64 ../../../../geometry/support/aaBoundingBox ../../../../geometry/support/buffer/BufferView ../../support/buffer/InterleavedLayout ../core/shaderLibrary/ShaderOutput ../lib/basicInterfaces ../lib/GLMaterial ../lib/Material ../lib/RenderSlot ../lib/Util ../lib/VertexAttribute ./internal/bufferWriterUtils ./internal/MaterialUtil ../shaders/ShadedColorMaterialTechnique".split(" "),function(n,h,p,u,v,C,D,m,E,F,
w,k,G,c,x,y,q){class H extends w.Material{constructor(a){super(a,new z);this.supportsEdges=!0;this._configuration=new q.ShadedColorMaterialTechniqueConfiguration;this._vertexAttributeLocations=q.vertexAttributeLocations}getConfiguration(a,b){this._configuration.output=a;this._configuration.cullFace=this.parameters.cullFace;this._configuration.hasSlicePlane=this.parameters.hasSlicePlane;this._configuration.transparent=this._isTransparent;this._configuration.writeDepth=this.parameters.writeDepth;this._configuration.screenSizeEnabled=
this.parameters.screenSizeEnabled;this._configuration.shadingEnabled=this.parameters.shadingEnabled;this._configuration.transparencyPassType=b.transparencyPassType;this._configuration.multipassEnabled=b.multipassEnabled;this._configuration.cullAboveGround=b.multipassTerrain.cullAboveGround;return this._configuration}intersect(a,b,e,g,l,A){if(this.parameters.screenSizeEnabled){const r=a.attributes.get(c.VertexAttribute.OFFSET);y.intersectTriangleGeometry(a,e,g,l,{applyToVertex:(d,t,I,f)=>{f=h.set(B,
r.data[3*f],r.data[3*f+1],r.data[3*f+2]);d=h.set(J,d,t,I);h.scale(f,f,this.parameters.screenSizeScale*e.camera.computeScreenPixelSizeAt(f));h.add(d,d,f);return[d[0],d[1],d[2]]},applyToAabb:d=>{const t=v.center(d,B);return v.scale(d,this.parameters.screenSizeScale*e.camera.computeScreenPixelSizeAt(t))}},A)}else y.intersectTriangleGeometry(a,e,g,l,void 0,A)}produces(a,b){return b===m.ShaderOutput.Highlight?a===k.RenderSlot.OPAQUE_MATERIAL:b===m.ShaderOutput.Color||b===m.ShaderOutput.Alpha||b===m.ShaderOutput.ObjectAndLayerIdColor?
(b=k.RenderSlot.OPAQUE_MATERIAL,this._isTransparent&&(b=this.parameters.writeDepth?k.RenderSlot.TRANSPARENT_MATERIAL:k.RenderSlot.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL),a===b||a===k.RenderSlot.DRAPED_MATERIAL):!1}createGLMaterial(a){return new K(a)}createBufferWriter(){return new L(this.parameters.screenSizeEnabled)}get _isTransparent(){return 1>this.parameters.color[3]||this.parameters.forceTransparentMode}}class K extends F{beginSlot(a){return this.ensureTechnique(q.ShadedColorMaterialTechnique,
a)}}class z extends w.MaterialParameters{constructor(){super(...arguments);this.color=u.fromValues(1,1,1,1);this.shadingTint=u.fromValues(0,0,0,.25);this.shadingDirection=h.normalize(p.create(),[.5,-.5,-.5]);this.screenSizeScale=14;this.forceTransparentMode=!1;this.writeDepth=!0;this.hasSlicePlane=!1;this.cullFace=E.CullFaceOptions.None;this.screenSizeEnabled=!1;this.shadingEnabled=!0}}class L{constructor(a){this.screenSizeEnabled=a;a=D.newLayout().vec3f(c.VertexAttribute.POSITION).vec3f(c.VertexAttribute.NORMAL);
this.screenSizeEnabled&&a.vec3f(c.VertexAttribute.OFFSET);this.vertexBufferLayout=a}elementCount(a){return a.attributes.get(c.VertexAttribute.POSITION).indices.length}write(a,b,e,g,l){x.writeDefaultAttributes(e,this.vertexBufferLayout,a,b,g,l);if(this.screenSizeEnabled)if(e.attributes.has(c.VertexAttribute.OFFSET))if(a=e.attributes.get(c.VertexAttribute.OFFSET),G.assert(3===a.size),g=g.getField(c.VertexAttribute.OFFSET,C.BufferViewVec3f))x.writePosition(a,b,g,l);else throw Error("unable to acquire view for "+
c.VertexAttribute.OFFSET);else throw Error(`${c.VertexAttribute.OFFSET} vertex attribute required for screenSizeEnabled ShadedColorMaterial`);}}const B=p.create(),J=p.create();n.ShadedColorMaterial=H;n.ShadedColorMaterialParameters=z;Object.defineProperty(n,Symbol.toStringTag,{value:"Module"})});