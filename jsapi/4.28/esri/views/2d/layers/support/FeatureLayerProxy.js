// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("../../../../chunks/tslib.es6 ../../../../core/Promise ../../../../core/promiseUtils ../../../../core/workers/workers ../../../../core/accessorSupport/decorators/property ../../../../core/accessorSupport/ensureType ../../../../core/arrayUtils ../../../../core/has ../../../../core/accessorSupport/decorators/subclass".split(" "),function(f,e,d,k,g,n,p,q,l){e=class extends e.EsriPromise{constructor(a){super(a);this._startupResolver=d.createResolver();this.isReady=!1}initialize(){this._controller=
new AbortController;this.addResolvingPromise(this._startWorker(this._controller.signal))}destroy(){this._controller.abort();this._connection&&this._connection.close()}set tileRenderer(a){this.client.tileRenderer=a}get closed(){return this._connection.closed}async startup(a,b,c,m){await this.when();var h=this._controller.signal;h=Array.isArray(c.source)?{transferList:c.source,signal:h}:void 0;a=a.tileInfo.toJSON();await this._connection.invoke("startup",{service:c,config:b,tileInfo:a,tiles:m},h);this._startupResolver.resolve();
this._set("isReady",!0)}async updateTiles(a){await this._startupResolver.promise;return d.ignoreAbortErrors(this._connection.invoke("updateTiles",a))}async update(a){a={config:a};await this._startupResolver.promise;return this._connection.invoke("update",a)}async applyUpdate(a){await this._startupResolver.promise;return this._connection.invoke("applyUpdate",a)}async setHighlight(a){await this._startupResolver.promise;return d.ignoreAbortErrors(this._connection.invoke("controller.setHighlight",a))}async stop(){await this._startupResolver.promise;
if(!this.closed)return d.ignoreAbortErrors(this._connection.invoke("stop"))}async refresh(a){await this._startupResolver.promise;return d.ignoreAbortErrors(this._connection.invoke("controller.refresh",a))}async querySummaryStatistics(a,b,c){await this._startupResolver.promise;return this._connection.invoke("controller.querySummaryStatistics",{query:a.toJSON(),params:b},c)}async queryAggregateSummaryStatistics(a,b,c){await this._startupResolver.promise;return this._connection.invoke("controller.queryAggregateSummaryStatistics",
{query:a.toJSON(),params:b},c)}async queryUniqueValues(a,b,c){await this._startupResolver.promise;return this._connection.invoke("controller.queryUniqueValues",{query:a.toJSON(),params:b},c)}async queryAggregateUniqueValues(a,b,c){await this._startupResolver.promise;return this._connection.invoke("controller.queryAggregateUniqueValues",{query:a.toJSON(),params:b},c)}async queryClassBreaks(a,b,c){await this._startupResolver.promise;return this._connection.invoke("controller.queryClassBreaks",{query:a.toJSON(),
params:b},c)}async queryAggregateClassBreaks(a,b,c){await this._startupResolver.promise;return this._connection.invoke("controller.queryAggregateClassBreaks",{query:a.toJSON(),params:b},c)}async queryHistogram(a,b,c){await this._startupResolver.promise;return this._connection.invoke("controller.queryHistogram",{query:a.toJSON(),params:b},c)}async queryAggregateHistogram(a,b,c){await this._startupResolver.promise;return this._connection.invoke("controller.queryAggregateHistogram",{query:a.toJSON(),
params:b},c)}async queryFeatures(a,b){await this._startupResolver.promise;return this._connection.invoke("controller.queryFeatures",a?.toJSON(),b)}async queryVisibleFeatures(a,b){await this._startupResolver.promise;return this._connection.invoke("controller.queryVisibleFeatures",a?.toJSON(),b)}async queryObjectIds(a,b){await this._startupResolver.promise;return this._connection.invoke("controller.queryObjectIds",a?.toJSON(),b)}async queryFeatureCount(a,b){await this._startupResolver.promise;return this._connection.invoke("controller.queryFeatureCount",
a?.toJSON(),b)}async queryExtent(a,b){return this._connection.invoke("controller.queryExtent",a.toJSON(),b)}async queryLatestObservations(a,b){await this._startupResolver.promise;return this._connection.invoke("controller.queryLatestObservations",a.toJSON(),b)}async queryStatistics(a){await this._startupResolver.promise;return this._connection.invoke("controller.queryStatistics",a)}async queryAggregates(a,b){await this._startupResolver.promise;return this._connection.invoke("controller.queryAggregates",
a?.toJSON(),b)}async queryAggregateCount(a,b){await this._startupResolver.promise;return this._connection.invoke("controller.queryAggregateCount",a?.toJSON(),b)}async queryAggregateIds(a,b){await this._startupResolver.promise;return this._connection.invoke("controller.queryAggregateIds",a?.toJSON(),b)}async getObjectId(a){await this._startupResolver.promise;return this._connection.invoke("controller.getObjectId",a)}async getDisplayId(a){await this._startupResolver.promise;return this._connection.invoke("controller.getDisplayId",
a)}async getFeatures(a){await this._startupResolver.promise;return this._connection.invoke("controller.getFeatures",a)}async getAggregates(){await this._startupResolver.promise;return this._connection.invoke("controller.getAggregates")}async getAggregateValueRanges(){await this._startupResolver.promise;return this._connection.invoke("controller.getAggregateValueRanges")}async mapValidDisplayIds(a){await this._startupResolver.promise;return this._connection.invoke("controller.mapValidDisplayIds",a)}async onEdits(a){await this._startupResolver.promise;
return d.ignoreAbortErrors(this._connection.invoke("controller.onEdits",a))}async enableEvent(a,b){await this._startupResolver.promise;return d.ignoreAbortErrors(this._connection.invoke("controller.enableEvent",{name:a,value:b}))}async pauseStream(){await this._startupResolver.promise;return d.ignoreAbortErrors(this._connection.invoke("controller.pauseStream"))}async resumeStream(){await this._startupResolver.promise;return d.ignoreAbortErrors(this._connection.invoke("controller.resumeStream"))}async sendMessageToSocket(a){await this._startupResolver.promise;
return d.ignoreAbortErrors(this._connection.invoke("controller.sendMessageToSocket",a))}async sendMessageToClient(a){await this._startupResolver.promise;return d.ignoreAbortErrors(this._connection.invoke("controller.sendMessageToClient",a))}async updateCustomParameters(a){await this._startupResolver.promise;return d.ignoreAbortErrors(this._connection.invoke("controller.updateCustomParameters",a))}async _startWorker(a){try{this._connection=await k.open("Pipeline",{client:this.client,strategy:"dedicated",
signal:a})}catch(b){d.throwIfNotAbortError(b)}}};f.__decorate([g.property()],e.prototype,"isReady",void 0);f.__decorate([g.property({constructOnly:!0})],e.prototype,"client",void 0);f.__decorate([g.property()],e.prototype,"tileRenderer",null);return e=f.__decorate([l.subclass("esri.views.2d.layers.support.FeatureLayerProxy")],e)});