// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("../../../../geometry/support/aaBoundingRect ../../../../geometry/support/centroid ../../../../geometry/support/jsonUtils ../../../../geometry/support/quantizationUtils ../../../../geometry/support/spatialReferenceUtils ../../../../layers/graphics/featureConversionUtils ../../../../layers/graphics/OptimizedGeometry".split(" "),function(p,z,v,g,A,q,w){function x(a){a.coords.length=0;a.lengths.length=0}const m=new w,u=new w;class h{constructor(){this.bounds=p.create();this.graphic=null}static acquire(a=
null,e,c,d,b){let f;0===h._pool.length?f=new h:(f=h._pool.pop(),this._set.delete(f));f.acquire(a,e,c,d,b);return f}static release(a){a&&!this._set.has(a)&&(a.release(),this._pool.push(a),this._set.add(a))}static getCentroidQuantized(a,e){if(v.isPolygon(a.geometry)){const c=a.symbol;if(null==c)return null;if(0<c?.layers.length&&c.layers.some(d=>"text"===d.type||"marker"===d.type))return a=z.polygonCentroid(a.geometry),null!==a?g.quantizePoint(e,{},{x:a[0],y:a[1]},!1,!1):null}return null}acquire(a=
null,e,c,d,b){a&&this.set(a,e,c,d,b)}release(){this.geometry=this.symbolResource=this.graphic=null}get symbol(){return this.symbolResource.symbol}set(a,e,c,d,b){this.graphic=a;this.geometry=c;this.symbolResource=e;this.bounds=d;b&&(this.size=b)}getGeometryQuantized(a,e,c,d){var b=this.geometry;const f=v.getJsonType(b);if(null==f)return null;switch(f){case "esriGeometryPolygon":({rings:b}=b);if(!b||0===b.length)return null;c=1===b.length&&2===b[0].length?g.quantizeGeometry(a,{paths:[[b[0][0],b[0][1]]]}):
g.quantizeGeometry(a,this.geometry);if(!c&&(c=g.quantizeGeometry(a,{x:b[0][0][0],y:b[0][0][1]}))){const {x:r,y:n}=c;return{rings:[[[r-1,n],[1,-1],[1,1],[-1,1],[-1,-1]]]}}return c;case "esriGeometryPolyline":return x(m),x(u),c=b.hasZ??!1,d=b.hasM??!1,q.convertFromPolyline(m,b),q.generalizeOptimizedGeometry(u,m,c,d,"esriGeometryPolyline",a.scale[0]),q.quantizeOptimizedGeometry(m,u,c,d,"esriGeometryPolyline",a),q.convertToPolyline(m,b.hasZ??!1,b.hasM??!1);case "esriGeometryMultipoint":const k=.5*d*Math.max(Math.abs(this.size[0])+
this.size[2]-this.size[0],Math.abs(this.size[1])+this.size[3]-this.size[1]);c=A.getInfo(c);b=b.points;if(c){const [r,n]=c.valid,y=n-r;b=b.filter(l=>{if(l[0]+k>n||l[0]-k<r){const t=[...l];t[0]=l[0]+k>n?t[0]-y:t[0]+y;return p.containsPointWithMargin(e,l,k)||p.containsPointWithMargin(e,t,k)}return p.containsPointWithMargin(e,l,k)})}return 0===b.length?{points:b}:g.quantizeGeometry(a,{points:b})}return g.quantizeGeometry(a,this.geometry)}}h._pool=[];h._set=new Set;return h});