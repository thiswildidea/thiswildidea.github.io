// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("require exports ../../../../core/has ../../../../core/accessorSupport/diffUtils ../../../../support/arcadeOnDemand ../../arcade/callExpressionWithCursor".split(" "),function(l,h,m,k,n,p){class q{constructor(b,a){this._canCacheExpressionValue=!1;this._sourceInfo=b;this._storage=a;this._bitsets={computed:a.getBitset(a.createBitset())}}get storage(){return this._storage}invalidate(){this._bitsets.computed.clear()}async updateSchema(b,a){var c=k.diff(this._schema,a);if((this._schema=a)&&null!=
c&&k.hasDiff(c,"attributes")){m("esri-2d-update-debug")&&console.debug("Applying Update - Store:",c);this._bitsets.computed.clear();b.targets[a.name]=!0;b=a.attributes;a=[];c=[];for(const d in b){const e=b[d];switch(e.type){case "expression":a.push(this._createArcadeComputedField(e));break;case "label-expression":a.push(this._createLabelArcadeComputedField(e));break;case "statistic":c.push(e)}}this._computedFields=await Promise.all(a);this._canCacheExpressionValue=!this._computedFields.some(d=>"expression"===
d.type&&null!=d.expression&&d.expression.referencesScale());this._statisticFields=c}}setComputedAttributes(b,a,c,d,e){var f=this._bitsets.computed;if(!this._canCacheExpressionValue||!f.has(c)){f.set(c);for(const g of this._computedFields)switch(f=this._evaluateField(a,g,d,e),g.resultType){case "numeric":b.setComputedNumericAtIndex(c,g.fieldIndex,f);break;case "string":b.setComputedStringAtIndex(c,g.fieldIndex,f)}}}async _createArcadeComputedField(b){return{...b,expression:await n.createRendererExpression(b.valueExpression,
this._sourceInfo.spatialReference,this._sourceInfo.fieldsIndex)}}async _createLabelArcadeComputedField(b){var a=this._sourceInfo.spatialReference;const c=this._sourceInfo.fieldsIndex,{createLabelFunction:d}=await new Promise((e,f)=>l(["../../../../layers/support/labelFormatUtils"],e,f));a=await d(b.label,c,a);return{...b,builder:a}}_evaluateField(b,a,c,d){switch(a.type){case "label-expression":return b=b.readArcadeFeature(),a.builder.evaluate(b,d)||"";case "expression":return{expression:a}=a,p(a,
b,{$view:{scale:c,timeZone:d}})}}}h.Store2D=q;Object.defineProperty(h,Symbol.toStringTag,{value:"Module"})});