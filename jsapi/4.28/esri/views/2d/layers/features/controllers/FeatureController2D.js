// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("../../../../../chunks/tslib.es6 ../../../../../core/Accessor ../../../../../core/arrayUtils ../../../../../core/has ../../../../../core/promiseUtils ../../../../../core/reactiveUtils ../../../../../core/accessorSupport/decorators/property ../../../../../core/accessorSupport/ensureType ../../../../../core/accessorSupport/decorators/subclass ../../../../../core/support/UpdatingHandles ../../../../../layers/graphics/featureConversionUtils ../../../../../layers/graphics/data/QueryEngine ../../../../../layers/support/FieldsIndex ../../../../../time/timeZoneUtils ../FeatureStore2D ../sources/createSource ../support/AttributeStore ../support/BinStore ../support/ClusterStore ../support/ComputedAttributeStorage ../support/FeatureSetReaderJSON ../support/UpdateToken ../../../../support/QueueProcessor".split(" "),
function(g,e,w,f,h,n,k,J,x,y,z,t,r,A,B,C,D,E,F,G,H,u,I){function m(a){if(!h.isAbortError(a)&&"worker:port-closed"!==a.name)throw a;}function v(a){return"feature"===a.type&&"snapshot"===a.mode}e=class extends e{constructor(){super(...arguments);this._storage=new G.ComputedAttributeStorage;this._markedIdsBufId=this._storage.createBitset();this._lastCleanup=performance.now();this._invalidated=this._cleanupNeeded=!1;this._tileToResolver=new Map;this._didEdit=!1;this._updateVersion=1;this._updatingHandles=
new y.UpdatingHandles;this.service=this.remoteClient=this.processor=this.config=this.tileStore=null}initialize(){this._initStores();this._initSource();this._updateQueue=new I.QueueProcessor({concurrency:"stream"===this._source.type?1:4,process:(a,b)=>this._onTileMessage(a,{signal:b})});this.addHandles([this.tileStore.on("update",this.onTileUpdate.bind(this)),n.when(()=>!this.updating,()=>this.onIdle())])}_initSource(){this._source=C.createSource(this.service,{...this.service,fieldsIndex:this.fieldsIndex},
this.spatialReference,this.tileStore.tileScheme,(a,b)=>{this._invalidated=!0;return this._patchTile(a,b)},()=>this._updateQueue&&50>this._updateQueue.length,this.featureStore);this._proxyEvents()}_setStreamClientProperty(a,b){this.remoteClient.invoke("setProperty",{propertyName:a,value:b}).catch(m)}_proxyEvents(){if("stream"===this._source.type){const a=this._source.events,b=this._source;this.addHandles([n.watch(()=>b.connectionStatus,c=>this._setStreamClientProperty("pipelineConnectionStatus",c),
{initial:!0}),n.watch(()=>b.errorString,c=>this._setStreamClientProperty("pipelineErrorString",c),{initial:!0}),a.on("data-received",c=>this.remoteClient.invoke("emitEvent",{name:"data-received",event:{attributes:c.attributes,centroid:c.centroid,geometry:c.geometry}}).catch(m)),a.on("message-received",c=>this.remoteClient.invoke("emitEvent",{name:"message-received",event:c}).catch(m)),a.on("updateRate",c=>this.remoteClient.invoke("emitEvent",{name:"update-rate",event:{...c}}).catch(m))])}}_initAttributeStore(a){this.attributeStore||
(this.attributeStore=new D({type:"remote",initialize:(b,c)=>h.ignoreAbortErrors(this.remoteClient.invoke("tileRenderer.featuresView.attributeView.initialize",b,{signal:c}).catch(m)),update:(b,c)=>h.ignoreAbortErrors(this.remoteClient.invoke("tileRenderer.featuresView.attributeView.requestUpdate",b,{signal:c}).catch(m)),render:b=>h.ignoreAbortErrors(this.remoteClient.invoke("tileRenderer.featuresView.requestRender",void 0,{signal:b}).catch(m))},a))}_initStores(){this.featureStore=new B.FeatureStore2D({geometryInfo:{geometryType:this.service.geometryType,
hasM:!1,hasZ:!1},spatialReference:this.spatialReference,fieldsIndex:this.fieldsIndex},this._storage,"snapshot"===this.service.type?"snapshot":"on-demand")}_initQueryEngine(a){const b=this;this.featureQueryEngine?.destroy();this.featureQueryEngine=new t.QueryEngine({availableFields:a.availableFields,definitionExpression:a.schema.source.definitionExpression??void 0,fieldsIndex:r.fromJSON(this.service.fieldsIndex),geometryType:this.service.geometryType,objectIdField:this.service.objectIdField,hasM:!1,
hasZ:!1,spatialReference:this.spatialReference.toJSON(),cacheSpatialQueries:!0,featureStore:this.featureStore,aggregateAdapter:{getFeatureObjectIds(c){return null==b.aggregateStore?[]:b.aggregateStore.getFeatureDisplayIdsForAggregate(c).map(d=>b.getObjectId(d))}},timeInfo:this.service.timeInfo})}_initAggregateQueryEngine(a,b){this.aggregateQueryEngine?.destroy();null!=a&&(b=b.targets.aggregate.params.fields.slice(),this.aggregateQueryEngine=new t.QueryEngine({definitionExpression:void 0,fieldsIndex:r.fromLayerJSON({fields:b,
dateFieldsTimeReference:{timeZoneIANA:A.utc}}),geometryType:a.geometryInfo.geometryType,objectIdField:a.objectIdField,hasM:a.geometryInfo.hasM,hasZ:a.geometryInfo.hasZ,spatialReference:this.spatialReference.toJSON(),cacheSpatialQueries:!1,featureStore:a,aggregateAdapter:{getFeatureObjectIds(c){return[]}}}))}destroy(){this._updateQueue.destroy();this._source.destroy();this.featureQueryEngine?.destroy();this.aggregateQueryEngine?.destroy();this.attributeStore?.destroy();for(const a of this.tileStore.tiles)this._source.unsubscribe(a);
clearInterval(this._checkUpdating);this._updatingHandles.destroy()}get fieldsIndex(){return r.fromJSON(this.service.fieldsIndex)}get spatialReference(){return this.tileStore.tileScheme.spatialReference}get dataUpdating(){return this._source.updatingHandles.updating}get updating(){return this.isUpdating()}isUpdating(){var a=this._source.updatingHandles.updating;const b=!this.attributeStore||this.attributeStore.updatingHandles.updating,c=a||b||this._updatingHandles.updating;if(f("esri-2d-log-updating")){a=
`Updating FeatureController2D: ${c}\n`+`  -> updatingSource ${a}\n`;for(const d of this._source.subscriptions)a+=`     ${d.tile.id} ${d.isDone}\n`;a=a+`  -> updatingAttributeStore ${b}\n`+`  -> updatingHandles ${this._updatingHandles.updating} (queue: ${this._updateQueue.length})\n`;console.log(a)}return c}updateCustomParameters(a){"stream"===this._source.type&&this._source.updateCustomParameters(a)}enableEvent(a){this._source.enableEvent(a.name,a.value)}pause(){this._updateQueue.pause();this._updateQueue.clear()}resume(){this._updateQueue.resume()}pauseStream(){"stream"===
this._source.type&&this._source.pauseStream()}resumeStream(){"stream"===this._source.type&&this._source.resumeStream()}sendMessageToSocket(a){"stream"===this._source.type&&this._source.sendMessageToSocket(a)}sendMessageToClient(a){"stream"===this._source.type&&this._source.sendMessageToClient(a)}_initAggregateStore(a){a=a.schema.targets?.aggregate?.type??null;if((this.config?.schema.targets?.aggregate?.type??null)!==a&&(null!=this.aggregateStore&&(this.removeHandles("valueRangesChanged"),this.aggregateStore.destroy(),
this.aggregateStore=null),a)){switch(a){case "cluster":this.aggregateStore=new F.ClusterStore({geometryInfo:{geometryType:"esriGeometryPoint",hasM:!1,hasZ:!1},spatialReference:this.spatialReference,fieldsIndex:this.fieldsIndex,fields:this.service.fields},this.spatialReference,this._storage,{...this.service,fieldsIndex:this.fieldsIndex});this.addHandles(this.aggregateStore.events.on("valueRangesChanged",b=>{this.remoteClient.invoke("emitEvent",{name:"valueRangesChanged",event:{valueRanges:b.valueRanges}}).catch(m)}),
"valueRangesChanged");break;case "bin":this.aggregateStore=new E.BinStore({geometryInfo:{geometryType:"esriGeometryPolygon",hasM:!1,hasZ:!1},spatialReference:this.spatialReference,fieldsIndex:this.fieldsIndex,fields:this.service.fields},this.spatialReference,this._storage,{...this.service,fieldsIndex:this.fieldsIndex})}this.aggregateStore.onTileUpdate({added:this.tileStore.tiles,removed:[]})}}async update(a,b){this._updateVersion++;f("esri-2d-update-debug")&&console.debug(`FeatureController2D::update: Token version ${this._updateVersion}`);
this._initQueryEngine(b);this._initAttributeStore(b);this.pause();this.config?.timeZone!==b.timeZone&&(a.mesh=!0,a.storage.data=!0,a.storage.filters=!0,a.targets.aggregate=!0,a.targets.feature=!0,this.featureStore.invalidate());await Promise.all([this._source.update(a,b.schema.source),this.featureStore.updateSchema(a,b.schema.targets.feature),this.attributeStore.update(a,b),this.attributeStore.updateFilters(a,b,this)]);this._initAggregateStore(b);null!=this.aggregateStore&&await this.aggregateStore.updateSchema(a,
b.schema.targets.aggregate);this._initAggregateQueryEngine(this.aggregateStore,b.schema);f("esri-2d-update-debug")&&a.describe();this._set("config",b)}async applyUpdate(a){a.version=this._updateVersion;f("esri-2d-update-debug")&&console.debug(`FeatureController2D::applyUpdate: Token version ${a.version}`);a.mesh&&this.clearTiles();this._updateQueue.resume();await this._source.applyUpdate(a);f("esri-2d-update-debug")&&console.debug("FeatureController2D::applyUpdate Waiting for source update to finish");
this.notifyChange("updating");await n.whenOnce(()=>!this.updating);f("esri-2d-update-debug")&&console.debug("FeatureController2D::applyUpdate Source update finsihed");null!=this.aggregateStore&&(await h.after(10),f("esri-2d-update-debug")&&console.debug("FeatureController2D::applyUpdate Waiting for aggregate idle call"),await n.whenOnce(()=>!this.updating),f("esri-2d-update-debug")&&console.debug("FeatureController2D::applyUpdate Aggregate idle called"));f("esri-2d-update-debug")&&console.debug("FeatureController2D::applyUpdate Update finished")}async onEdits({edits:a}){f("esri-2d-update-debug")&&
console.debug("Applying Edit:",a);this._didEdit=!0;try{const b=a.removed.map(d=>d.objectId&&-1!==d.objectId?d.objectId:this._lookupObjectIdByGlobalId(d.globalId)),c=a.addOrModified.map(({objectId:d})=>d);this.featureStore.invalidate();await this._source.edit(c,b);this.clearTiles();this.notifyChange("updating");null!=this.aggregateStore&&this.aggregateStore.clear();await this._source.resend();await n.whenOnce(()=>!this.updating)}catch(b){}}async refresh(a){if(!a.dataChanged)return a=u.UpdateToken.empty(),
a.storage.filters=!0,this.applyUpdate(a);this.featureStore.invalidate();this.clearTiles();this._source.refresh(this._updateVersion,a);this._cleanupNeeded=!0;this.notifyChange("updating");await n.whenOnce(()=>!this.updating)}clearTiles(){for(const a of this.tileStore.tiles)this.processor.onTileClear(a,!1)}onTileUpdate(a){if(null!=this.aggregateStore)this.aggregateStore.onTileUpdate(a);for(const b of a.added){const c=this._source.subscribe(b,this._updateVersion);"stream"!==this._source.type&&this._updatingHandles.addPromise(c.done);
this._level=b.level}for(const b of a.removed)this._source.unsubscribe(b),this._cleanupNeeded=!0,this._tileToResolver.has(b.id)&&(this._tileToResolver.get(b.id).resolve(),this._tileToResolver.delete(b.id));this.notifyChange("updating")}async onIdle(){this._invalidated&&(this._invalidated=!1,null==this.aggregateStore&&"heatmap"!==this.processor.type||await this._repushCurrentLevelTiles());this._markAndSweep()}async querySummaryStatistics({query:a,params:b}){return this.featureQueryEngine.executeQueryForSummaryStatistics(a,
b)}async queryAggregateSummaryStatistics({query:a,params:b}){return this.aggregateQueryEngine.executeQueryForSummaryStatistics(this._normalizeAggregateQuery(a),b)}async queryUniqueValues({query:a,params:b}){return this.featureQueryEngine.executeQueryForUniqueValues(a,b)}async queryAggregateUniqueValues({query:a,params:b}){return this.aggregateQueryEngine.executeQueryForUniqueValues(this._normalizeAggregateQuery(a),b)}async queryClassBreaks({query:a,params:b}){return this.featureQueryEngine.executeQueryForClassBreaks(a,
b)}async queryAggregateClassBreaks({query:a,params:b}){return this.aggregateQueryEngine.executeQueryForClassBreaks(this._normalizeAggregateQuery(a),b)}async queryHistogram({query:a,params:b}){return this.featureQueryEngine.executeQueryForHistogram(a,b)}async queryAggregateHistogram({query:a,params:b}){return this.aggregateQueryEngine.executeQueryForHistogram(this._normalizeAggregateQuery(a),b)}queryExtent(a){return this.featureQueryEngine.executeQueryForExtent(a)}queryAggregates(a){return this.aggregateQueryEngine.executeQuery(this._normalizeAggregateQuery(a))}queryAggregateCount(a){return this.aggregateQueryEngine.executeQueryForCount(this._normalizeAggregateQuery(a))}queryAggregateIds(a){return this.aggregateQueryEngine.executeQueryForIds(this._normalizeAggregateQuery(a))}queryFeatures(a){return this.featureQueryEngine.executeQuery(a)}async queryVisibleFeatures(a){a=
await this.featureQueryEngine.executeQuery(a);const b=a.objectIdFieldName;a.features=a.features.filter(c=>{c=this.getDisplayId(c.attributes[b]);return null!=c&&this.attributeStore.isVisible(c)});return a}queryFeatureCount(a){return this.featureQueryEngine.executeQueryForCount(a)}queryLatestObservations(a){return this.featureQueryEngine.executeQueryForLatestObservations(a)}queryObjectIds(a){return this.featureQueryEngine.executeQueryForIds(a)}async queryStatistics(){return this.featureStore.storeStatistics}getObjectId(a){return this.featureStore.lookupObjectId(a,
this._storage)}getDisplayId(a){if(null!=this.aggregateStore){const b=this.aggregateStore.getDisplayId(a);return null==b?(a=this.featureStore.lookupDisplayId(a),this.aggregateStore.getDisplayIdForReferenceId(a)):b}return this.featureStore.lookupDisplayId(a)}getFeatures(a){const b=[],c=[];for(const d of a)a=null!=this.aggregateStore?this.getAggregate(d):null,null!=a?null!=a.attributes.referenceId?(a=this.getFeature(a.attributes.referenceId),null!=a&&b.push(a)):c.push(a):(a=this.getFeature(d),null!=
a&&b.push(a));return{features:b,aggregates:c}}getFeature(a){a=this.featureStore.lookupFeatureByDisplayId(a,this._storage);if(null==a)return null;var b=a.readHydratedGeometry();b=z.convertToGeometry(b,a.geometryType,a.hasZ,a.hasM);return{attributes:a.readAttributes(),geometry:b}}getAggregate(a){return null==this.aggregateStore?null:this.aggregateStore.getAggregate(a)}getAggregates(){return null==this.aggregateStore?[]:this.aggregateStore.getAggregates()}async setHighlight(a){const b=a.map(c=>this.getDisplayId(c)).filter(w.isSome);
return this.attributeStore.setHighlight(a,b)}_normalizeAggregateQuery(a){const b=a.objectIds??[];for(const c of a.aggregateIds??[])b.push(c);a.objectIds=b;a.aggregateIds=[];return a}_lookupObjectIdByGlobalId(a){const b=this.service.globalIdField;if(null==b)throw Error("Expected globalIdField to be defined");let c=null;this.featureStore.forEach(d=>{a===d.readAttribute(b)&&(c=d.getObjectId())});if(null==c)throw Error(`Expected to find a feature with globalId ${a}`);return c}async _repushCurrentLevelTiles(){var a=
this.tileStore.tiles.filter(b=>b.level===this._level);a.map(async b=>this._patchTile({type:"append",id:b.key.id,clear:!0,addOrUpdate:null,end:!1}));a=a.map(async b=>this._patchTile({type:"append",id:b.key.id,addOrUpdate:H.FeatureSetReaderJSON.fromOptimizedFeatures([],{...this.service,fieldsIndex:this.fieldsIndex}),remove:[],end:!0,isRepush:!0,status:u.UpdateToken.empty()}));await Promise.all(a)}_maybeForceCleanup(){5E3<performance.now()-this._lastCleanup&&this._markAndSweep()}_patchTile(a,b){a=this._updateQueue.push(a,
b).catch(c=>{});return this._updatingHandles.addPromise(a)}async _onTileMessage(a,b){h.throwIfAborted(b);f("esri-2d-update-debug")&&console.debug(a.id,`FeatureController:onTileMessage: [clear:${a.clear}, end:${a.end}, features: ${a.addOrUpdate?.hasFeatures}]`);const c=this.tileStore.get(a.id);if(c){if(a.clear)return this.processor.onTileClear(c,a.end);var d=a.status;this._cleanupNeeded=!0;var p=[];for(const l of a.remove??[]){const q=this.featureStore.lookupDisplayId(l);q&&p.push(q)}a.remove=p;try{if(null==
a.addOrUpdate)this.processor.onTileMessage(c,{...a,addOrUpdate:null},null!=this.aggregateStore,b).catch(h.throwIfNotAbortError);else{a.addOrUpdate.setArcadeSpatialReference(this.spatialReference);this.featureStore.hasInstance(a.addOrUpdate.instance)&&d.targets.feature||(d.targets.feature=!0,this.featureStore.onTileData(c,a,this.config?.timeZone));d.storage.data&&d.storage.filters||(d.storage.data=!0,d.storage.filters=!0,this.attributeStore.onTileData(c,a),"stream"===this._source.type||this._didEdit?
(await this.attributeStore.sendUpdates(),h.throwIfAborted(b)):this.attributeStore.sendUpdates());if(null!=this.aggregateStore&&!d.targets.aggregate){d.targets.aggregate=!0;const l=v(this._source)&&this._source.loading,q=!v(this._source)||l||a.end;this.aggregateStore.onTileData(c,a,this._storage,this.attributeStore,this.config?.timeZone,q);if(!q)return;d.mesh||(this.attributeStore.onTileData(c,a),await this.attributeStore.sendUpdates())}d.mesh||(d.mesh=!0,await this.processor.onTileMessage(c,a,null!=
this.aggregateStore&&"cluster"===this.aggregateStore.type,b),h.throwIfAborted(b));this._maybeForceCleanup()}}catch(l){h.throwIfNotAbortError(l)}}}_mark(a,b,c){const d=this._storage.getInstanceId(a);a&&(b.add((4294901760&d)>>>16),c.set(a))}_markAndSweep(){this._lastCleanup=performance.now();if(!("feature"===this._source.type&&"snapshot"===this._source.mode||"stream"!==this._source.type&&!this._cleanupNeeded)){this._cleanupNeeded=!1;var a=this._storage.getBitset(this._markedIdsBufId),b=new Set;a.clear();
for(const d of this.tileStore.tiles)for(const p of this._source.readers(d.id)){const l=p.getCursor();for(;l.next();){var c=l.getDisplayId();c||(c=l.getObjectId(),c=this.featureStore.lookupDisplayId(c));this._mark(c,b,a)}}"symbol"===this.processor.type&&this.processor.forEachBufferId(d=>{this._mark(d,b,a)});this._updateQueue.forEach(d=>{for(const p of d.remove??[])d=this.featureStore.lookupDisplayId(p),this._mark(d,b,a)});null!=this.aggregateStore&&(this.aggregateStore.sweepFeatures(a,this.featureStore),
"sweepAggregates"in this.aggregateStore&&this.aggregateStore.sweepAggregates(this._storage,this.attributeStore,this._level));this.featureStore.sweepFeatures(a,this._storage,this.attributeStore);this.featureStore.sweepFeatureSets(b)}}};g.__decorate([k.property({constructOnly:!0})],e.prototype,"tileStore",void 0);g.__decorate([k.property()],e.prototype,"config",void 0);g.__decorate([k.property({readOnly:!0})],e.prototype,"fieldsIndex",null);g.__decorate([k.property()],e.prototype,"processor",void 0);
g.__decorate([k.property({constructOnly:!0})],e.prototype,"remoteClient",void 0);g.__decorate([k.property({constructOnly:!0})],e.prototype,"service",void 0);g.__decorate([k.property()],e.prototype,"spatialReference",null);g.__decorate([k.property()],e.prototype,"dataUpdating",null);g.__decorate([k.property()],e.prototype,"updating",null);return e=g.__decorate([x.subclass("esri.views.2d.layers.features.controllers.FeatureController2D")],e)});