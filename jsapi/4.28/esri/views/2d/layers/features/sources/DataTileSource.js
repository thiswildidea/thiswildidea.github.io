// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("exports ../../../../../TimeExtent ../../../../../core/Evented ../../../../../core/has ../../../../../core/promiseUtils ../../../../../core/accessorSupport/diffUtils ../../../../../core/support/UpdatingHandles ../../../../../layers/support/arcgisLayerUrl ../../../../../rest/support/Query ./DataTileSubscription ../support/UpdateToken".split(" "),function(k,m,n,l,h,g,p,q,r,t,u){function v(a,b){const c=new Set;a&&a.forEach(e=>c.add(e));b&&b.forEach(e=>c.add(e));return c.has("*")?["*"]:Array.from(c)}
class w{constructor(a){this.updatingHandles=new p.UpdatingHandles;this.events=new n;this._resolver=h.createResolver();this._didEdit=!1;this._subscriptions=new Map;this._outSR=a.outSR;this._serviceInfo=a.serviceInfo;this._onTileUpdateMessage=a.onMessage;this._arcadeLayerSchema=a.arcadeLayerSchema}destroy(){for(const a of this._subscriptions.values())a.abort();this.updatingHandles.destroy()}get subscriptions(){return this._subscriptions.values()}async _onMessage(a){const b=this._subscriptions.get(a.id);
if(b)return a={...a,remove:a.remove??[],status:a.status??u.UpdateToken.empty()},h.ignoreAbortErrors(this._onTileUpdateMessage(a,b.options))}update(a,b){var c=b.fields.length;b.outFields=v(this._schema?.outFields,b.outFields);b.outFields=b.outFields.length>=.75*c?["*"]:b.outFields;b.outFields.sort();if(c=g.diff(this._schema,b)){l("esri-2d-update-debug")&&console.debug("Applying Update - Source:",c);var e="orderByFields"in this._serviceInfo&&this._serviceInfo.orderByFields?this._serviceInfo.orderByFields:
this._serviceInfo.objectIdField+" ASC",d=this._serviceInfo.source;e={returnCentroid:!(null!==d&&"object"===typeof d&&"path"in d&&q.isHostedAgolService(d.path))&&"esriGeometryPolygon"===this._serviceInfo.geometryType,returnGeometry:!0,timeReferenceUnknownClient:"stream"!==this._serviceInfo.type&&this._serviceInfo.timeReferenceUnknownClient,outFields:b.outFields,outSpatialReference:this._outSR,orderByFields:[e],where:b.definitionExpression||"1\x3d1",gdbVersion:b.gdbVersion,historicMoment:b.historicMoment,
timeExtent:b.timeExtent?m.fromJSON(b.timeExtent):null};d=this._schema&&g.hasDiff(c,"outFields");this._schema&&g.hasDiffAny(c,["timeExtent","definitionExpression","gdbVersion","historicMoment","customParameters"])&&(a.why.mesh.push("Layer filter and/or custom parameters changed"),a.why.source.push("Layer filter and/or custom parameters changed"),a.mesh=!0,a.source=!0,a.queryFilter=!0);d&&(a.why.source.push("Layer required fields changed"),a.source=!0);g.diff(e,this._queryInfo)&&(this._queryInfo=e);
this._schema=b;this._resolver.resolve()}}whenInitialized(){return this._resolver.promise}async applyUpdate(a){a.queryFilter||a.source&&this._didEdit?(this.refresh(a.version),this._didEdit=!1):(this._subscriptions.forEach(b=>b.applyUpdate(a)),await this.resend())}refresh(a,b){for(const c of this._tiles())this.unsubscribe(c),this.subscribe(c,a)}subscribe(a,b){b=new t.DataTileSubscription(a,b);this._subscriptions.set(a.id,b);return b}unsubscribe(a){const b=this.getSubscription(a.id);null!=b&&b.abort();
this._subscriptions.delete(a.id)}createQuery(a={}){return new r({...this._queryInfo,historicMoment:this._queryInfo.historicMoment?new Date(this._queryInfo.historicMoment):null,...a})}getSubscription(a){return this._subscriptions.has(a)?this._subscriptions.get(a):null}async queryLastEditDate(){throw Error("Service does not support query type");}async query(a,b){throw Error("Service does not support query");}*_tiles(){const a=Array.from(this._subscriptions.values());for(const b of a)yield b.tile}async edit(a,
b){return this.updatingHandles.addPromise(this._edit(a,b))}async _edit(a,b){var c=Array.from(this._subscriptions.values());const e=c.map(({tile:d})=>d);for(const d of c)d.removeIds(b);a.length&&(c=e.map(d=>{const f=this.createTileQuery(d);f.objectIds=a;return{tile:d,query:f}}).map(async({tile:d,query:f})=>({tile:d,result:await this.query(f,{query:{tile:l("esri-tiles-debug")?d.id.replaceAll("/","."):void 0}}),query:f})),c=(await h.eachAlwaysValues(c)).map(async({tile:d,result:f})=>{(f.hasFeatures||
b.length||a.length)&&(d=this._subscriptions.get(d.key.id))&&d.edit(f,a)}),await Promise.allSettled(c));this._didEdit=!0}}k.DataTileSource=w;Object.defineProperty(k,Symbol.toStringTag,{value:"Module"})});