// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("require ../../../../../core/Error ../../../../../core/has ../../../../../core/Logger ../../../../../core/mathUtils ../../../../../core/promiseUtils ../../../../../core/accessorSupport/diffUtils ../../../../../core/support/UpdatingHandles ../../../../../layers/support/FieldsIndex ../../../engine/webgl/definitions ../../../engine/webgl/DisplayId ../../../engine/webgl/Utils ../../../engine/webgl/util/debug ../tileRenderers/support/visualVariablesUtils ../../../../webgl/enums".split(" "),function(B,
u,k,C,D,v,E,F,G,n,l,H,y,I,p){function w(a,b){return c=>b(a(c))}const q=C.getLogger("esri.views.layers.2d.features.support.AttributeStore"),r=y.createDebugLogger(y.debugAttrUpdates,q);var x=k("esri-shared-array-buffer"),z=k("esri-atomics");class J{constructor(a,b,c,d){this.size=0;this.texelSize=4;this.dirtyEnd=this.dirtyStart=0;const {pixelType:e,layout:f,textureOnly:h}=d;this.textureOnly=h||!1;this.pixelType=e;this._ctype=b;this.layout=f;this._resetRange();this._shared=a;this.size=c;h||(this.data=
this._initData(e,c,a,b))}get buffer(){return this.data?.buffer}unsetComponentAllTexels(a,b){const c=this.data;for(let d=0;d<this.size*this.size;d++)c[d*this.texelSize+a]&=~b;this.dirtyStart=0;this.dirtyEnd=this.size*this.size-1}setComponentAllTexels(a,b){const c=this.data;for(let d=0;d<this.size*this.size;d++)c[d*this.texelSize+a]|=255&b;this.dirtyStart=0;this.dirtyEnd=this.size*this.size-1}setComponent(a,b,c){const d=this.data;for(const e of c)d[e*this.texelSize+a]|=b,this.dirtyStart=Math.min(this.dirtyStart,
e),this.dirtyEnd=Math.max(this.dirtyEnd,e)}setComponentTexel(a,b,c){this.data[c*this.texelSize+a]|=b;this.dirtyStart=Math.min(this.dirtyStart,c);this.dirtyEnd=Math.max(this.dirtyEnd,c)}unsetComponentTexel(a,b,c){this.data[c*this.texelSize+a]&=~b;this.dirtyStart=Math.min(this.dirtyStart,c);this.dirtyEnd=Math.max(this.dirtyEnd,c)}getData(a,b){a=l.getDisplayIdTexel(a);return this.data[a*this.texelSize+b]}setData(a,b,c){a=l.getDisplayIdTexel(a);0===(this.layout&1<<b)?q.error("mapview-attributes-store",
"Tried to set a value for a texel's readonly component"):null!=this.data&&(this.data[a*this.texelSize+b]=c,this.dirtyStart=Math.min(this.dirtyStart,a),this.dirtyEnd=Math.max(this.dirtyEnd,a))}lock(){this.pixelType===p.PixelType.UNSIGNED_BYTE&&this._shared&&z&&"local"!==this._ctype&&Atomics.store(this.data,0,1)}unlock(){this.pixelType===p.PixelType.UNSIGNED_BYTE&&this._shared&&z&&"local"!==this._ctype&&Atomics.store(this.data,0,0)}expand(a){this.size=a;this.textureOnly||(a=this._initData(this.pixelType,
a,this._shared,this._ctype),a.set(this.data),this.data=a)}toMessage(){const a=this.dirtyStart,b=this.dirtyEnd;var c=this.texelSize;if(a>b)return null;this._resetRange();const d=this.pixelType,e=this.layout,f=this.data;c=!this._shared&&"local"!==this._ctype&&f.slice(a*c,(b+1)*c)||null;return{start:a,end:b,data:c,pixelType:d,layout:e}}_initData(a,b,c,d){c=c&&"local"!==d?SharedArrayBuffer:ArrayBuffer;a=H.getPixelArrayCtor(a);b=new a(new c(b*b*4*a.BYTES_PER_ELEMENT));for(a=0;a<b.length;a+=4)b[a+1]=255;
return b}_resetRange(){this.dirtyStart=2147483647;this.dirtyEnd=0}}class K{constructor(a,b){this._client=a;this.config=b;this.updatingHandles=new F.UpdatingHandles;this._blocks=[];this._filters=Array(n.maxFilters);this._attributeComputeInfo=null;this._targetType=0;this._abortController=new AbortController;this._hasScaleExpr=!1;this._size=32;this._currUpdate=this._nextUpdate=null;this._idsToHighlight=new Set;a=b.supportsTextureFloat?p.PixelType.FLOAT:p.PixelType.UNSIGNED_BYTE;r(`Creating AttributeStore ${x?
"with":"without"} shared memory`);this._blockDescriptors=[{pixelType:p.PixelType.UNSIGNED_BYTE,layout:1},{pixelType:p.PixelType.UNSIGNED_BYTE,layout:15,textureOnly:!0},{pixelType:p.PixelType.UNSIGNED_BYTE,layout:15,textureOnly:!0},{pixelType:a,layout:15},{pixelType:a,layout:15},{pixelType:a,layout:15},{pixelType:a,layout:15}];this._blocks=this._blockDescriptors.map(()=>null)}destroy(){this._abortController.abort();this.updatingHandles.destroy()}get hasScaleExpr(){return this._hasScaleExpr}get _signal(){return this._abortController.signal}get hasHighlight(){return 0<
this._idsToHighlight.size}isUpdating(){const a=this.updatingHandles.updating||!!this._nextUpdate;k("esri-2d-log-updating")&&console.log(`Updating AttributeStore: ${a}\n  -> updatingHandles ${this.updatingHandles.updating} (currUpdate: ${!!this._currUpdate})\n  -> nextUpdate: ${!!this._nextUpdate}\n`);return a}update(a,b){this.config=b;b=b.schema.processors[0].storage;const c=E.diff(this._schema,b);if(a.targets.feature||a.targets.aggregate)a.storage.data=!0;if(c&&(k("esri-2d-update-debug")&&console.debug("Applying Update - AttributeStore:",
c),a.storage.data=!0,this._schema=b,this._attributeComputeInfo=null,null!=b)){switch(b.target){case "feature":this._targetType=l.displayIdTypeFeature;break;case "aggregate":this._targetType=l.displayIdTypeAggregate}if("subtype"===b.type){this._attributeComputeInfo={isSubtype:!0,subtypeField:b.subtypeField,map:new Map};for(const d in b.mapping)if(a=b.mapping[d],null!=a?.vvMapping)for(const e of a.vvMapping)this._bindAttribute(e,parseInt(d,10))}else{this._attributeComputeInfo={isSubtype:!1,map:new Map};
if(null!=b.vvMapping)for(const d of b.vvMapping)this._bindAttribute(d);if(null!=b.attributeMapping)for(const d of b.attributeMapping)this._bindAttribute(d)}}}onTileData(a,b){if(null!=b.addOrUpdate)for(a=b.addOrUpdate.getCursor();a.next();)b=a.getDisplayId(),this.setAttributeData(b,a)}async setHighlight(a,b){const c=this._getBlock(0);b=b.map(d=>l.getDisplayIdTexel(d));c.lock();c.unsetComponentAllTexels(0,1);c.setComponent(0,1,b);c.unlock();this._idsToHighlight.clear();for(const d of a)this._idsToHighlight.add(d);
await this.sendUpdates()}async updateFilters(a,b,c){k("esri-2d-update-debug")&&console.debug("AttributeStore::updateFilters");const {service:d,spatialReference:e}=c;({filters:b}=b);b=b.map((f,h)=>this._updateFilter(f,h,d,e));b=(await Promise.all(b)).some(f=>f);k("esri-2d-update-debug")&&console.debug("AttributeStore::updateFilters - finsihed");b&&(a.storage.filters=!0,k("esri-2d-update-debug")&&console.debug("Applying Update - AttributeStore:","Filters changed"))}setData(a,b,c,d){const e=l.getDisplayIdTexel(a);
this._ensureSizeForTexel(e);this._getBlock(b).setData(a,c,d)}getData(a,b,c){return this._getBlock(b).getData(a,c)}getHighlightFlag(a){return this._idsToHighlight.has(a)?n.highlightFlag:0}unsetAttributeData(a){a=l.getDisplayIdTexel(a);this._getBlock(0).setData(a,0,0)}setAttributeData(a,b){const c=l.getDisplayIdTexel(a);this._ensureSizeForTexel(c);this._getBlock(0).setData(c,0,this.getFilterFlags(b));if(this._targetType===l.getDisplayIdType(a)){a=this._attributeComputeInfo;var d=this.config.supportsTextureFloat?
1:2,e=null;a&&(e=a.isSubtype?a.map.get(b.readAttribute(a.subtypeField)):a.map,e?.size&&e.forEach((f,h)=>{const m=h*d%4;h=this._getBlock(Math.floor(h*d/4)+n.attributeDataVv);f=f(b);if(this.config.supportsTextureFloat)h.setData(c,m,f);else if(f===n.nanMagicNumber)h.setData(c,m,255),h.setData(c,m+1,255);else{f=D.clamp(Math.round(f),-32767,32766)+32768;const g=(f&65280)>>8;h.setData(c,m,f&255);h.setData(c,m+1,g)}}))}}sendUpdates(){k("esri-2d-update-debug")&&console.debug("AttributeStore::sendUpdate");
if(this._nextUpdate)return this._nextUpdate.promise;if(this._currUpdate)return this._nextUpdate=v.createResolver(),this.updatingHandles.addPromise(this._nextUpdate.promise),this._nextUpdate.promise;const a={blocks:this._blocks.map(b=>null!=b?b.toMessage():null)};return this._currUpdate=this._createResources().then(()=>{var b=()=>{this._currUpdate=null;if(this._nextUpdate){const c=this._nextUpdate;this._nextUpdate=null;this.sendUpdates().then(()=>c.resolve())}else k("esri-2d-update-debug")&&console.debug("AttributeStore::sendUpdate::No additional updates queued")};
k("esri-2d-update-debug")&&console.debug("AttributeStore::sendUpdate::client.update");b=this.updatingHandles.addPromise(this._client.update(a,this._signal).then(b).catch(b));this._client.render(this._signal);return b}).catch(b=>{if(v.isAbortError(b))return this._createResourcesPromise=null,this._createResources();q.error(new u("mapview-attribute-store","Encountered an error during client update",b))})}_ensureSizeForTexel(a){for(;a>=this._size*this._size&&!this._expand(););}_bindAttribute(a,b){function c(){const {normalizationField:g}=
a;return g?t=>{const A=t.readAttribute(g);return A?t.readAttribute(a.field)/A:null}:t=>t.readAttribute(a.field)}function d(){a.normalizationField&&q.warn("mapview-arcade","Ignoring normalizationField specified with an arcade expression which is not supported.");return g=>g.getComputedNumericAtIndex(a.fieldIndex)}let e;if(null!=a.fieldIndex)e=d();else if(a.field)e=c();else return;const {valueRepresentation:f}=a;f&&(e=w(e,g=>I.getVisualVariableSizeValueRepresentationRatio(g,f)));const h=g=>null===g||
isNaN(g)||Infinity===g||-Infinity===g?n.nanMagicNumber:g,m=this._attributeComputeInfo;if(m.isSubtype){const g=m.map.get(b)??new Map;g.set(a.binding,w(e,h));m.map.set(b,g)}else m.map.set(a.binding,w(e,h))}_createResources(){if(null!=this._createResourcesPromise)return this._createResourcesPromise;this._getBlock(n.attributeDataAnimation);this._getBlock(n.attributeDataGpgpu);r("Initializing AttributeStore");var a={shared:x&&"local"!==this._client.type,size:this._size,blocks:this._blocks.map(b=>null!=
b?{textureOnly:b.textureOnly,buffer:b.buffer,pixelType:b.pixelType}:null)};this._createResourcesPromise=a=this._client.initialize(a,this._signal).catch(b=>{v.isAbortError(b)?this._createResourcesPromise=null:q.error(new u("mapview-attribute-store","Encountered an error during client initialization",b))});a.then(()=>null==this._createResourcesPromise?this._createResources():void 0);return a}_getBlock(a){var b=this._blocks[a];if(null!=b)return b;r(`Initializing AttributeBlock at index ${a}`);b=new J(x,
this._client.type,this._size,this._blockDescriptors[a]);this._blocks[a]=b;this._createResourcesPromise=null;return b}_expand(){if(this._size<this.config.maxTextureSize){const a=this._size<<=1;r("Expanding block size to",a,this._blocks);for(const b of this._blocks)b?.expand(a);this._createResourcesPromise=null;this._size=a;return 0}q.error(new u("mapview-limitations","Maximum number of onscreen features exceeded."));return-1}async _updateFilter(a,b,c,d){const e=this._filters[b];if(!e&&!a||(null!=e&&
e.hash)===JSON.stringify(a))return!1;if(null==a){if(!e)return!1;a=1<<b+1;c=this._getBlock(0);this._filters[b]=null;c.setComponentAllTexels(0,a);this.sendUpdates();return!0}await (await this._getFilter(b,c)).update(a,d);return!0}async _getFilter(a,b){var c=this._filters[a];if(null!=c)return c;({default:c}=await new Promise((d,e)=>B(["./FeatureFilter"],f=>d(Object.freeze(Object.defineProperty({__proto__:null,default:f},Symbol.toStringTag,{value:"Module"}))),e)));b=new c({geometryType:b.geometryType,
hasM:!1,hasZ:!1,timeInfo:b.timeInfo,fieldsIndex:G.fromJSON(b.fieldsIndex)});return this._filters[a]=b}isVisible(a){return!!(this._getBlock(0).getData(a,0)&2)}getFilterFlags(a){let b=0;var c=l.getDisplayIdFilterMask(a.getDisplayId());for(let e=0;e<this._filters.length;e++){var d=this._filters[e];d=!(c&1<<e)||null==d||d.check(a);b|=(d?1:0)<<e}c=0;this._idsToHighlight.size&&(a=a.getObjectId(),c=this.getHighlightFlag(a));return b<<1|c}}return K});