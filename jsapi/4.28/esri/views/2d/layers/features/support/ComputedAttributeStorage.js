// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define(["exports","../../../engine/webgl/DisplayId","./DisplayIdGenerator","./StaticBitSet"],function(k,c,n,p){function e(a,b,d){if(!(a.length>b))for(;a.length<=b;)a.push(d)}class q{constructor(){this._numerics=[];this._strings=[];this._idGenerator=new n.DisplayIdGenerator;this._allocatedSize=256;this._bitsets=[];this._instanceIds=[];this._bounds=[]}createBitset(){const a=this._bitsets.length;this._bitsets.push(p.StaticBitSet.create(this._allocatedSize,c.displayIdTexelMask));return a+1}getBitset(a){return this._bitsets[a-
1]}_expand(){this._allocatedSize<<=1;for(const a of this._bitsets)a.resize(this._allocatedSize)}_ensureNumeric(a,b){this._numerics[a]||(this._numerics[a]=[]);e(this._numerics[a],b,0)}_ensureInstanceId(a){e(this._instanceIds,a,0)}_ensureString(a,b){this._strings[a]||(this._strings[a]=[]);e(this._strings[a],b,null)}createDisplayId(a=!1){const b=this._idGenerator.createId();b>this._allocatedSize&&this._expand();return c.createDisplayId(b,a)}releaseDisplayId(a){for(const b of this._bitsets)b.unset(a);
return this._idGenerator.releaseId(a&c.displayIdTexelMask)}getComputedNumeric(a,b){return this.getComputedNumericAtIndex(a&c.displayIdTexelMask,0)}setComputedNumeric(a,b,d){return this.setComputedNumericAtIndex(a&c.displayIdTexelMask,d,0)}getComputedString(a,b){return this.getComputedStringAtIndex(a&c.displayIdTexelMask,0)}setComputedString(a,b,d){return this.setComputedStringAtIndex(a&c.displayIdTexelMask,0,d)}getComputedNumericAtIndex(a,b){a&=c.displayIdTexelMask;this._ensureNumeric(b,a);return this._numerics[b][a]}setComputedNumericAtIndex(a,
b,d){a&=c.displayIdTexelMask;this._ensureNumeric(b,a);this._numerics[b][a]=d}getInstanceId(a){a&=c.displayIdTexelMask;this._ensureInstanceId(a);return this._instanceIds[a]}setInstanceId(a,b){a&=c.displayIdTexelMask;this._ensureInstanceId(a);this._instanceIds[a]=b}getComputedStringAtIndex(a,b){a&=c.displayIdTexelMask;this._ensureString(b,a);return this._strings[b][a]}setComputedStringAtIndex(a,b,d){a&=c.displayIdTexelMask;this._ensureString(b,a);this._strings[b][a]=d}getXMin(a){return this._bounds[4*
(a&c.displayIdTexelMask)]}getYMin(a){return this._bounds[4*(a&c.displayIdTexelMask)+1]}getXMax(a){return this._bounds[4*(a&c.displayIdTexelMask)+2]}getYMax(a){return this._bounds[4*(a&c.displayIdTexelMask)+3]}setBounds(a,b){b=b.readHydratedGeometry();if(!b?.coords.length)return!1;let d=Infinity,f=Infinity,g=-Infinity,h=-Infinity;b.forEachVertex((l,m)=>{d=Math.min(d,l);f=Math.min(f,m);g=Math.max(g,l);h=Math.max(h,m)});a&=c.displayIdTexelMask;e(this._bounds,4*a+4,0);this._bounds[4*a]=d;this._bounds[4*
a+1]=f;this._bounds[4*a+2]=g;this._bounds[4*a+3]=h;return!0}}k.ComputedAttributeStorage=q;Object.defineProperty(k,Symbol.toStringTag,{value:"Module"})});