// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("exports ../../../../../geometry ../../../../../core/Evented ../../../../../core/has ../../../../../core/accessorSupport/diffUtils ../../../../../geohash/GeohashTree ../../../../../geohash/geohashUtils ../../../../../geometry/support/aaBoundingBox ../../../../../geometry/support/Ellipsoid ../../../../../geometry/support/spatialReferenceUtils ../../../../../layers/graphics/featureConversionUtils ../../../../../layers/graphics/OptimizedFeature ../../../../../layers/graphics/OptimizedGeometry ../../../../../layers/graphics/data/projectionSupport ../../../../../layers/support/FieldsIndex ../../../engine/webgl/definitions ../../../engine/webgl/DisplayId ../FeatureStore2D ../Store2D ./FeatureSetReaderJSON ../../../../../geometry/SpatialReference ../../../../../geometry/Polygon ../../../../../geometry/Extent".split(" "),
function(z,V,K,E,F,L,w,M,t,N,x,G,H,A,O,p,I,P,Q,J,B,R,S){const T=M.create();class C extends G.OptimizedFeatureWithGeometry{constructor(a,b,c,d,e){super(new H([],[b,c]),d,null,a);this.geohashBoundsInfo=e}get count(){return this.attributes.cluster_count}static create(a,b,c,d,e,f,g,h){b=new C(b,c,d,f,g);b.displayId=a.createDisplayId(!0);b.referenceId=h;b.tileLevel=e;return b}update(a,b,c,d,e,f){this.geometry.coords[0]=a;this.geometry.coords[1]=b;this.tileLevel=c;this.attributes=d;this.geohashBoundsInfo=
e;this.referenceId=null;this.referenceId=f;return this}toJSON(){return{attributes:{...this.attributes,aggregateId:this.objectId,referenceId:1===this.attributes.cluster_count?this.referenceId:null},geometry:{x:this.geometry.coords[0],y:this.geometry.coords[1]}}}}class U extends Q.Store2D{constructor(a,b,c,d){super(a,c);this.type="cluster";this.events=new K;this.objectIdField="aggregateId";this.featureAdapter=P.featureAdapter;this._tileLevel=this._geohashLevel=0;this._aggregateValueRanges={};this._aggregateValueRangesChanged=
!1;this._geohashBuf=[];this._clusters=new Map;this._tiles=new Map;this._serviceInfo=d;this.geometryInfo=a.geometryInfo;this._spatialReference=b;this._projectionSupportCheck=A.checkProjectionSupport(b,B.WGS84);this._bitsets.geohash=c.getBitset(c.createBitset());this._bitsets.inserted=c.getBitset(c.createBitset())}destroy(){this._tree.destroy()}get featureSpatialReference(){return this._spatialReference}get fields(){return this._fields}async updateSchema(a,b){const c=this._schema;try{await super.updateSchema(a,
b),await this._projectionSupportCheck}catch(e){}this._fields=[...this._schema.params.fields,{name:"referenceId",alias:"referenceId",type:"esriFieldTypeInteger"}];this._fields.some(e=>"cluster_count"===e.name)||this._fields.push({name:"cluster_count",alias:"cluster_count",type:"esriFieldTypeInteger"});this._fieldsIndex=new O(this._fields);const d=F.diff(c,b);if(b&&(null!=d||a.source||a.storage.filters)){if(F.hasDiff(d,"params.fields")||!this._tree||a.source)this._tree&&this._tree.destroy(),this._tree=
new L.GeohashTree(this._statisticFields,this._serviceInfo),this._rebuildTree(),E("esri-2d-update-debug")&&console.debug("Aggregate mesh needs update due to tree changing");E("esri-2d-update-debug")&&console.debug("Applying Update - ClusterStore:",d);a.targets[b.name]=!0;a.mesh=!1;this._aggregateValueRanges={}}else c&&(a.mesh=!0)}clear(){this._rebuildTree()}sweepFeatures(a,b){this._bitsets.inserted.forEachSet(c=>{a.has(c)||(c=b.lookupByDisplayIdUnsafe(c),this._remove(c))})}sweepAggregates(a,b,c){this._clusters.forEach((d,
e)=>{d&&d.tileLevel!==c&&(a.releaseDisplayId(d.displayId),b.unsetAttributeData(d.displayId),this._clusters.delete(e))})}onTileData(a,b,c,d,e,f=!0){if(!this._schema||null==b.addOrUpdate)return b;this.events.emit("changed");var g=this._getTransforms(a,this._spatialReference);const h=b.addOrUpdate.getCursor();for(;h.next();)this._update(h,d);if(b.status.mesh||!f)return b;d=[];this._getClustersForTile(d,a,this._schema.params.clusterRadius,c,g);b.addOrUpdate=J.FeatureSetReaderJSON.fromOptimizedFeatures(d,
{fields:this.fields,fieldsIndex:this._fieldsIndex,geometryType:"esriGeometryPoint",objectIdField:this.objectIdField});b.addOrUpdate.attachStorage(c);b.clear=!0;b.end=!0;for(g=b.addOrUpdate.getCursor();g.next();)d=g.getDisplayId(),this._bitsets.computed.unset(d),this.setComputedAttributes(c,g,d,a.scale,e);this._aggregateValueRangesChanged&&b.end&&(this.events.emit("valueRangesChanged",{valueRanges:this._aggregateValueRanges}),this._aggregateValueRangesChanged=!1);return b}onTileUpdate({added:a,removed:b}){a.length&&
(this._tileLevel=a=a[0].level,this._setGeohashLevel(a));if(this._schema){var c=this._schema.params.clusterRadius;b.forEach(d=>{this._tiles.delete(d.key.id);this._markTileClustersForDeletion(d,c)})}}getAggregate(a){for(const b of this._clusters.values())if((b?.displayId&I.displayIdTexelMask)===(a&I.displayIdTexelMask))return b.toJSON();return null}getAggregates(){const a=[];for(const b of this._clusters.values())b?.tileLevel===this._tileLevel&&a.push(b.toJSON());return a}getDisplayId(a){return(a=this._clusters.get(a))?
a.displayId:null}getFeatureDisplayIdsForAggregate(a){return(a=this._clusters.get(a))?this._tree.getRegionDisplayIds(a.geohashBoundsInfo):[]}getDisplayIdForReferenceId(a){for(const b of this._clusters.values())if(b?.referenceId===a)return b.displayId;return null}getAggregateValueRanges(){return this._aggregateValueRanges}forEach(a){this._clusters.forEach(b=>{b&&(b=b.toJSON(),b=J.FeatureSetReaderJSON.fromFeatures([b],{objectIdField:this.objectIdField,globalIdField:null,geometryType:this.geometryInfo.geometryType,
fields:this.fields,fieldsIndex:this._fieldsIndex}).getCursor(),b.next(),a(b))})}forEachInBounds(a,b){}forEachBounds(a,b){const {hasM:c,hasZ:d}=this.geometryInfo;for(const e of a)a=x.getBoundsOptimizedGeometry(T,e.readGeometry(),d,c),null!=a&&b(a)}size(){let a=0;this.forEach(b=>a++);return a}_rebuildTree(){this._bitsets.computed.clear();this._bitsets.inserted.clear();this._tree&&this._tree.clear()}_remove(a){const b=a.getDisplayId(),c=a.getXHydrated(),d=a.getYHydrated(),e=this._geohashBuf[2*b],f=this._geohashBuf[2*
b+1];this._bitsets.inserted.has(b)&&(this._bitsets.inserted.unset(b),this._tree.removeCursor(a,c,d,e,f,this._geohashLevel))}_update(a,b){const c=a.getDisplayId(),d=this._bitsets.inserted;b=b.isVisible(c);var e=d.has(c);b!==e&&(b?(b=a.getXHydrated(),e=a.getYHydrated(),this._setGeohash(c,b,e)&&(this._tree.insertCursor(a,c,b,e,this._geohashBuf[2*c],this._geohashBuf[2*c+1],this._geohashLevel),d.set(c))):this._remove(a))}_setGeohash(a,b,c){if(this._bitsets.geohash.has(a))return!0;const d=this._geohashBuf;
if(this._spatialReference.isWebMercator)b=b/t.earth.radius*57.29577951308232,w.setGeohashBuf(d,a,57.29577951308232*(Math.PI/2-2*Math.atan(Math.exp(-c/t.earth.radius))),b-360*Math.floor((b+180)/360),12);else{c=A.project({x:b,y:c},this._spatialReference,B.WGS84);if(!c)return!1;w.setGeohashBuf(d,a,c.y,c.x,12)}this._bitsets.geohash.set(a);return!0}_getClustersForTile(a,b,c,d,e,f=!0){var g=2*c;c=Math.ceil(2**b.key.level*p.tileSize/g)+1;var h=Math.ceil(this._schema.params.clusterPixelBuffer/g)+0,k=Math.ceil(p.tileSize/
g);const {row:l,col:u}=b.key;var m=Math.floor(u*p.tileSize/g)-h;g=Math.floor(l*p.tileSize/g)-h;const y=m+k+2*h;h=g+k+2*h;for(k=b.tileInfoView.getLODInfoAt(b.key.level);m<=y;m++)for(let D=g;D<=h;D++){var n=m;k.wrap&&(n=0>m?m+c:m%c);var r=k.wrap&&0>m,v=k.wrap&&m%c!==m;n=this._lookupCluster(d,k,b.key.level,n,D,b);if(null!=n){var q=null;e&&(q=r?e.left:v?e.right:e.tile);f&&null==q||!n.count||null==q||!f||(r=n.geometry.clone(),v=n.attributes,r.coords[0]=x.quantizeX(q,r.coords[0]),r.coords[1]=x.quantizeY(q,
r.coords[1]),1===n.count&&null!=n.referenceId&&(v={...n.attributes,referenceId:n.referenceId}),q=new G.OptimizedFeature(r,v),q.displayId=n.displayId,a.push(q))}}}_getGeohashLevel(a){return Math.min(Math.ceil(a/2+2),12)}_setGeohashLevel(a){a=this._getGeohashLevel(a);a=1*(Math.floor(a/1)+1)-1;this._geohashLevel!==a&&(this._geohashLevel=a,this._rebuildTree(),this._bitsets.geohash.clear())}_getTransforms(a,b){const c={originPosition:"upperLeft",scale:[a.resolution,a.resolution],translate:[a.bounds[0],
a.bounds[3]]};b=N.getInfo(b);if(!b)return{tile:c,left:null,right:null};const [d,e]=b.valid;return{tile:c,left:{...c,translate:[e,a.bounds[3]]},right:{...c,translate:[d-e+a.bounds[0],a.bounds[3]]}}}_getClusterId(a,b,c){return(a&15)<<28|(b&16383)<<14|c&16383}_markForDeletion(a,b,c){a=this._getClusterId(a,b,c);this._clusters.delete(a)}_getClusterBounds(a,b,c){var d=this._schema.params.clusterRadius,e=2*d;b=c%2?b*e:b*e-d;const f=c*e;d=b+e;c=2**a.level*p.tileSize;a.wrap&&0>b&&(b=0);a.wrap&&d>c&&(d=c);
c=f/p.tileSize;d/=p.tileSize;e=(f-e)/p.tileSize;b=a.getXForColumn(b/p.tileSize);c=a.getYForRow(c);d=a.getXForColumn(d);a=a.getYForRow(e);return[b,c,d,a]}_getGeohash(a,b,c){const d={geohashX:0,geohashY:0};w.setGeohashXY(d,b,a,c);return d}_getGeohashBounds(a,b){const c=this._getGeohashLevel(a.key.level);if(this._spatialReference.isWebMercator){const [k,l,u,m]=b;var d=l,e=u,f=m,g=a=b=0,h=0;b=k/t.earth.radius*57.29577951308232;b-=360*Math.floor((b+180)/360);a=57.29577951308232*(Math.PI/2-2*Math.atan(Math.exp(-d/
t.earth.radius)));g=e/t.earth.radius*57.29577951308232;g-=360*Math.floor((g+180)/360);h=57.29577951308232*(Math.PI/2-2*Math.atan(Math.exp(-f/t.earth.radius)));f={geohashX:0,geohashY:0};d={geohashX:0,geohashY:0};w.setGeohashXY(f,a,b,c);w.setGeohashXY(d,h,g,c);return{bounds:[k,l,u,m],geohashBounds:{xLL:f.geohashX,yLL:f.geohashY,xTR:d.geohashX,yTR:d.geohashY},level:c}}f=R.fromExtent(S.fromBounds(b,this._spatialReference));a=A.project(f,this._spatialReference,B.WGS84,{densificationStep:64*a.resolution});
if(!a)return null;a=x.convertFromPolygon(new H,a,!1,!1);g=a.coords.filter((k,l)=>!(l%2));h=a.coords.filter((k,l)=>l%2);a=Math.min(...g);f=Math.min(...h);g=Math.max(...g);h=Math.max(...h);a=this._getGeohash(a,f,c);f=this._getGeohash(g,h,c);return{bounds:b,geohashBounds:{xLL:a.geohashX,yLL:a.geohashY,xTR:f.geohashX,yTR:f.geohashY},level:c}}_lookupCluster(a,b,c,d,e,f){const g=this._getClusterId(c,d,e),h=this._clusters.get(g);b=this._getClusterBounds(b,d,e);f=this._getGeohashBounds(f,b);if(null==f)return null;
var k=this._tree.getRegionStatistics(f);const {count:l,xTotal:u,yTotal:m,referenceId:y}=k;d=l?u/l:0;e=l?m/l:0;if(0===l)return this._clusters.set(g,null),null;k={cluster_count:l,...k.attributes};a=null!=h?h.update(d,e,c,k,f,y):C.create(a,g,d,e,c,k,f,y);if(0===l){const [n,r,v,q]=b;a.geometry.coords[0]=(n+v)/2;a.geometry.coords[1]=(r+q)/2}this._clusters.set(g,a);this._updateAggregateValueRangeForCluster(a,a.tileLevel);return a}_updateAggregateValueRangeForCluster(a,b){const c=this._aggregateValueRanges[b]||
{minValue:Infinity,maxValue:0},d=c.minValue,e=c.maxValue;c.minValue=Math.min(d,a.count);c.maxValue=Math.max(e,a.count);this._aggregateValueRanges[b]=c;if(d!==c.minValue||e!==c.maxValue)this._aggregateValueRangesChanged=!0}_markTileClustersForDeletion(a,b){var c=2*b;b=Math.ceil(p.tileSize/c);const {row:d,col:e}=a.key,f=Math.floor(e*p.tileSize/c);c=Math.floor(d*p.tileSize/c);for(let g=f;g<f+b;g++)for(let h=c;h<c+b;h++)this._markForDeletion(a.key.level,g,h)}}z.ClusterInfo=C;z.ClusterStore=U;Object.defineProperty(z,
Symbol.toStringTag,{value:"Module"})});