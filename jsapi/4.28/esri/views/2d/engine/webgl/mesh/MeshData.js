// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("exports ../../../tiling/TileInfoView ../../../tiling/TileKey ../../../tiling/TileQueue ../../../tiling/TileStrategy ../definitions ../DisplayId ../enums ../Utils ./VertexDataWriter ../../../layers/features/support/tileUtils".split(" "),function(l,y,r,z,A,k,t,f,m,n,u){function p(a){switch(a){case 1:case 8:case 32:return-1;case 2:case 64:return 0;case 4:case 16:case 128:return 1}}function q(a){switch(a){case 1:case 2:case 4:return-1;case 8:case 16:return 0;case 32:case 64:case 128:return 1}}
class v{constructor(a,d,b,c,e,h=0){this.hasRecords=this._hasAggregate=!1;this._data={self:new Map,neighbors:[]};this._version=0;this._current={geometryType:0,writer:null,overlaps:0,start:0,insertAfter:0,sortKey:0,id:0,materialKey:0,indexStart:0,vertStart:0,isDotDensity:!1,bufferingEnabled:!1,metricBoxLenPointer:0};this.hint=d;this.tileKey=a;this._hasAggregate=c;this._pixelBufferEnabled=e;this._version=h;this._symbologyType=b}get hasAggregates(){return this._hasAggregate}get hasPixelBufferEnabled(){return this._pixelBufferEnabled}serialize(a){const d=
[];d.push(this._serializeTileVertexData(this.tileKey,this.tileKey,this._data.self));this._data.neighbors.forEach((b,c)=>{var e=1<<c;c=p(e);e=q(e);c=u.getPow2NeighborKey(new r(this.tileKey),c,e,a);c=this._serializeTileVertexData(this.tileKey,c.id,b.vertexData);c.message.bufferIds=b.displayIds;d.push(c)});return d}_serializeTileVertexData(a,d,b){const c=[];b={[f.WGLGeometryType.MARKER]:b.get(f.WGLGeometryType.MARKER)?.serialize(c),[f.WGLGeometryType.FILL]:b.get(f.WGLGeometryType.FILL)?.serialize(c),
[f.WGLGeometryType.LINE]:b.get(f.WGLGeometryType.LINE)?.serialize(c),[f.WGLGeometryType.TEXT]:b.get(f.WGLGeometryType.TEXT)?.serialize(c),[f.WGLGeometryType.LABEL]:b.get(f.WGLGeometryType.LABEL)?.serialize(c)};return{message:{tileKeyOrigin:a,tileKey:d,data:b,version:this._version},transferList:c}}featureStart(a,d){this._current.insertAfter=a;this._current.sortKey=d}featureEnd(){}recordStart(a,d,b,c){this._current.writer=this._getVertexWriter(b);this._current.overlaps=0;this._current.indexStart=this._current.writer.indexCount;
this._current.vertStart=this._current.writer.vertexCount;this._current.bufferingEnabled=c;this._current.id=a;this._current.materialKey=d;this._current.geometryType=b;this._current.isDotDensity=!1;this._current.writer.recordStart()}recordCount(){return this._current.writer.recordCount}vertexCount(){return this._current.writer.vertexCount}indexCount(){return this._current.writer.indexCount}vertexEnsureSize(a){this._current.writer.vertexEnsureSize(a)}indexEnsureSize(a){this._current.writer.indexEnsureSize(a)}vertexBounds(a,
d,b,c){this._current.bufferingEnabled&&this._addOverlap(a,d,b,c)}vertexWrite(a){this._current.writer.writeVertex(a)}vertexWriteF32(a){this._current.writer.writeVertexF32(a)}vertexEnd(){}vertexWriter(){return this._current.writer.vertexWriter}indexWrite(a){this._current.writer.writeIndex(a)}indexWriter(){return this._current.writer.indexWriter}metricWriter(){return this._current.writer.metricWriter}metricStart(a,d,b,c,e,h,w,x){this._current.writer=this._getVertexWriter(f.WGLGeometryType.LABEL);const g=
this._current.writer.metricWriter;g.push(t.getDisplayIdTexel(a));g.push(d);g.push(b);g.push(c);g.push(e);g.push(h);g.push(w);g.push(x);g.push(255);this._current.metricBoxLenPointer=g.push(0)}metricEnd(){const a=this._current.writer.metricWriter;0===a.getValue(this._current.metricBoxLenPointer)&&a.seek(a.length-10)}metricBoxWrite(a,d,b,c){const e=this._current.writer.metricWriter;e.incr(this._current.metricBoxLenPointer);e.push(0);e.push(0);e.push(a);e.push(d);e.push(b);e.push(c)}recordEnd(){var a=
this._current.vertStart,d=this._current.writer.vertexCount-a;if(!d)return!1;this.hasRecords=!0;var b=this._current.indexStart;this._current.writer.recordEnd(this._current.id,this._current.materialKey,this._current.insertAfter,b,this._current.writer.indexCount-b,a,d,this._current.sortKey);if(!this._pixelBufferEnabled||this._hasAggregate||0===this._current.overlaps||this._current.geometryType===f.WGLGeometryType.LABEL)return!0;a=this._current.writer;for(d=0;8>d;d++){var c=1<<d;if(this._current.overlaps&
c){this._data.neighbors[d]||(this._data.neighbors[d]={vertexData:new Map,displayIds:new Set});b=this._data.neighbors[d];var e=this._current.geometryType;if(!b.vertexData.has(e)){var h=m.getStrides(e,this._symbologyType).geometry;h=new n.VertexDataWriter(e,h,k.patchPixelBufferAllocSize);b.vertexData.set(e,h)}e=b.vertexData.get(this._current.geometryType);h=4096*-p(c);c=4096*-q(c);e?.copyLastFrom(a,h,c);b.displayIds.add(this._current.id)}}return!0}_addOverlap(a,d,b,c){this._current.overlaps|=255^((a<
0+b?148:a>=k.tileSize-b?41:189)|(d<0+c?224:d>=k.tileSize-c?7:231))}_getVertexWriter(a){if(!this._data.self.has(a)){const d=this._data.self,b=m.getStrides(a,this._symbologyType).geometry;d.set(a,new n.VertexDataWriter(a,b,this.hint.records))}return this._data.self.get(a)}}l.MeshData=v;Object.defineProperty(l,Symbol.toStringTag,{value:"Module"})});