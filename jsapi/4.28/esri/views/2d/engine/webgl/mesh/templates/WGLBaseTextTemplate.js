// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("../../../../../../core/screenUtils ../../../../../../geometry/GeometryCursor ../../../../../../symbols/cim/placements/CIMMarkerPlacementHelper ../../definitions ../../enums ../../number ../../materialKey/MaterialKey ./shapingUtils".split(" "),function(z,A,B,C,D,k,w,E){const m=k.i1616to32(4,4),p=k.i1616to32(16,4),q=k.i1616to32(4,2),l=k.i1616to32(4,6),x=[q,q,l,l],y=[q,l,q,l],F=[l,l,m,m],G=[m,m,l,l],H=[l,m,l,m],I=[m,l,m,l];return J=>class extends J{constructor(...a){super(...a);this._isCIM=!1;
this._vertexBoundsScale=1;this.geometryType=D.WGLGeometryType.TEXT;this._aux=k.i8888to32(0,0,this._referenceSize,this._bitset)}bindTextInfo(a,b){this._shapingInfo=a?.length?E.shapeGlyphs(a,b,{scale:this._scale,angle:this._angle,xOffset:this._xOffset,yOffset:this._yOffset,hAlign:this._xAlignD,vAlign:this._yAlignD,maxLineWidth:Math.max(32,Math.min(this._lineWidth,512)),lineHeight:C.magicLabelLineHeight*Math.max(.25,Math.min(this._lineHeight,4)),decoration:this._decoration,isCIM:this._isCIM,hasBackground:!!this._backgroundColor,
borderLineSize:this._borderLineSize}):null}_write(a,b,e,d){const c=b.getDisplayId();this._writeGeometry(a,b,c,e,d)}_writeGeometry(a,b,e,d,c){const f=this._shapingInfo;if(null!=f){if(this._textPlacement)return this._writePlacedText(a,e,f,d,b,c);b=c?c.asOptimized():"esriGeometryPolygon"===b.geometryType?b.readCentroid():b.readGeometryForDisplay();if(null!=b){if(b.isPoint){const [g,h]=b.coords;return!a.hasAggregates&&a.hasPixelBufferEnabled&&(0>g||512<=g||0>h||512<=h)?void 0:this._writeGlyphs(a,e,{x:g,
y:h},f)}b.forEachVertex((g,h)=>this._writeGlyphs(a,e,{x:g,y:h},f))}}}_writePlacedText(a,b,e,d,c,f){var g=this._textPlacement;if(c=f||A.GeometryCursor.fromFeatureSetReaderCIM(c))if(d=B.CIMMarkerPlacementHelper.getPlacement(c,-1,g,z.pt2px(1),a.tileKey,d.geometryEngine)){g=e.bounds;g=Math.sqrt(g.height*g.height+g.width*g.width);for(var h;h=d.next();)c=h.tx,f=-h.ty,0<=c+g&&512>c-g&&0<=f+g&&512>f-g&&(h=-h.getAngle(),e.setRotation(h),this._writeGlyphs(a,b,{x:c,y:f},e),e.setRotation(-h))}}_writeGlyphs(a,
b,e,d){const c=w.MaterialKeyBase.load(this._materialKey),f=k.i1616to32(Math.round(8*e.x),Math.round(8*e.y)),g=this._vertexBoundsScale,{bounds:h,background:n,glyphs:r}=d;0<r.length&&(this._borderLineColor||this._backgroundColor)&&(c.textureBinding=r[0].textureBinding,a.recordStart(b,c.data,this.geometryType,!0),this._writeBackgroundGeometry(a,b,e,h,n),a.recordEnd());const t=2*Math.max(h.width,h.height);for(const u of d.glyphs)c.textureBinding=u.textureBinding,a.recordStart(b,c.data,this.geometryType,
!0),a.vertexBounds(e.x+h.x+this._xOffset,e.y+h.y-this._yOffset,t*g,t*g),this._writeVertices(a,b,f,u),a.recordEnd()}_writeGlyph(a,b,e,d,c){var f=w.MaterialKeyBase.load(this._materialKey);const g=k.i1616to32(Math.round(8*e),Math.round(8*d));f.textureBinding=c.textureBinding;a.recordStart(b,f.data,this.geometryType,!0);f=c.bounds;const h=this._vertexBoundsScale;a.vertexBounds(e+f.x*h,d+f.y*h,f.width*h,f.height*h);this._writeVertices(a,b,g,c);a.recordEnd()}_writeVertices(a,b,e,d){const c=a.vertexCount();
this._writeVertexCommon(a,b,e,d);a.vertexWrite(d.offsets.upperLeft);a.vertexWrite(d.texcoords.upperLeft);a.vertexEnd();this._writeVertexCommon(a,b,e,d);a.vertexWrite(d.offsets.upperRight);a.vertexWrite(d.texcoords.upperRight);a.vertexEnd();this._writeVertexCommon(a,b,e,d);a.vertexWrite(d.offsets.lowerLeft);a.vertexWrite(d.texcoords.lowerLeft);a.vertexEnd();this._writeVertexCommon(a,b,e,d);a.vertexWrite(d.offsets.lowerRight);a.vertexWrite(d.texcoords.lowerRight);a.vertexEnd();a.indexWrite(c+0);a.indexWrite(c+
1);a.indexWrite(c+2);a.indexWrite(c+1);a.indexWrite(c+3);a.indexWrite(c+2)}_writeVertexCommon(a,b,e,d){d=this._color;const c=this._haloColor,f=k.i8888to32(0,0,this._referenceSize,this._bitset),g=k.i8888to32(0,0,this._size,this._haloSize);a.vertexWrite(e);a.vertexWrite(b);a.vertexWrite(d);a.vertexWrite(c);a.vertexWrite(g);a.vertexWrite(f);a.vertexWrite(this._minMaxZoom)}_writeBackgroundVertex(a,b,e,d,c,f){const g=k.i8888to32(0,1,this._referenceSize,this._bitset),h=k.i8888to32(0,0,this._size,this._haloSize),
n=k.i8888to32(0,0,0,0);a.vertexWrite(e);a.vertexWrite(b);a.vertexWrite(d);a.vertexWrite(n);a.vertexWrite(h);a.vertexWrite(g);a.vertexWrite(this._minMaxZoom);a.vertexWrite(c);a.vertexWrite(f);a.vertexEnd()}_writeBackgroundQuad(a,b,e,d,c,f){const g=a.vertexCount();this._writeBackgroundVertex(a,b,e,d,c.upperLeft,f[0]);this._writeBackgroundVertex(a,b,e,d,c.upperRight,f[1]);this._writeBackgroundVertex(a,b,e,d,c.lowerLeft,f[2]);this._writeBackgroundVertex(a,b,e,d,c.lowerRight,f[3]);a.indexWrite(g+0);a.indexWrite(g+
1);a.indexWrite(g+2);a.indexWrite(g+1);a.indexWrite(g+3);a.indexWrite(g+2)}_writeBackgroundGeometry(a,b,e,d,c){const f=k.i1616to32(Math.round(8*e.x),Math.round(8*e.y)),{x:g,y:h,width:n,height:r}=d;d=2*Math.max(n,r);a.vertexBounds(e.x+g+this._xOffset,e.y+h-this._yOffset,d*this._vertexBoundsScale,d*this._vertexBoundsScale);this._backgroundColor&&this._writeBackgroundQuad(a,b,f,this._backgroundColor,c.main,[p,p,p,p]);if(this._borderLineColor||this._backgroundColor){const [t,u,K,L,v]=this._borderLineColor&&
this._borderLineSize&&0<this._borderLineSize?[x,x,y,y,this._borderLineColor]:[F,G,H,I,this._backgroundColor];this._writeBackgroundQuad(a,b,f,v,c.top,t);this._writeBackgroundQuad(a,b,f,v,c.bot,u);this._writeBackgroundQuad(a,b,f,v,c.left,K);this._writeBackgroundQuad(a,b,f,v,c.right,L)}}}});