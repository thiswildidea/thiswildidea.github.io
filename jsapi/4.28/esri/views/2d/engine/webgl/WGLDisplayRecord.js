// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define(["./MeshData","./Utils"],function(p,m){class n{constructor(a,b,d,c=0,e=0){this.id=a;this.geometryType=b;this.materialKey=d;this.minZoom=c;this.maxZoom=e;this.meshData=null;this.indexCount=this.indexFrom=this.vertexCount=this.vertexFrom=this.zOrder=this.symbolLevel=0;this._sortKey=null}get sortKey(){null==this._sortKey&&this._computeSortKey();return this._sortKey}clone(){return this.copy()}copy(){const a=new n(this.id,this.geometryType,this.materialKey);a.vertexFrom=this.vertexFrom;a.vertexCount=
this.vertexCount;a.indexFrom=this.indexFrom;a.indexCount=this.indexCount;a.zOrder=this.zOrder;a.symbolLevel=this.symbolLevel;a.meshData=this.meshData;a.minZoom=this.minZoom;a.maxZoom=this.maxZoom;return a}setMeshDataFromBuffers(a,b,d){const c=new p;for(const e in b){const f=b[e].stride,k=b[e].data;if(!k)continue;const g=[],l=m.strideToPackingFactor(f);for(let h=0;h<f*a.vertexCount/l;++h)g[h]=k[h+f*a.vertexFrom/l];c.vertexData.set(e,g)}c.indexData.length=0;for(b=0;b<a.indexCount;++b)c.indexData[b]=
d[b+a.indexFrom]-a.vertexFrom;c.vertexCount=a.vertexCount;this.meshData=c}readMeshDataFromBuffers(a,b){this.meshData?this.meshData.clear():this.meshData=new p;for(const d in a){const c=a[d].stride,e=a[d].data,f=[],k=m.strideToPackingFactor(c);for(let g=0;g<c*this.vertexCount/k;++g)f[g]=e[g+c*this.vertexFrom/k];this.meshData.vertexData.set(d,f)}this.meshData.indexData.length=0;for(a=0;a<this.indexCount;++a)this.meshData.indexData[a]=b[a+this.indexFrom]-this.vertexFrom;this.meshData.vertexCount=this.vertexCount}writeMeshDataToBuffers(a,
b,d,c){if(this.meshData){for(const e in b){const f=b[e].stride,k=this.meshData.vertexData.get(e),g=b[e].data,l=m.strideToPackingFactor(f);for(let h=0;h<f*this.meshData.vertexCount/l;++h)g[h+f*a/l]=k[h]}for(b=0;b<this.meshData.indexData.length;++b)c[b+d]=this.meshData.indexData[b]+a;this.vertexFrom=a;this.vertexCount=this.meshData.vertexCount;this.indexFrom=d;this.indexCount=this.meshData.indexData.length}}static writeAllMeshDataToBuffers(a,b,d){let c=0,e=0;for(const f of a)f.writeMeshDataToBuffers(c,
b,e,d),c+=f.vertexCount,e+=f.indexCount}_computeSortKey(){this._sortKey=(this.symbolLevel&31)<<12|(this.zOrder&127)<<4|this.geometryType&7}serialize(a){a.push(this.geometryType);a.push(this.materialKey);a.push(this.vertexFrom);a.push(this.vertexCount);a.push(this.indexFrom);a.push(this.indexCount);a.push(this.minZoom);a.push(this.maxZoom);return a}static deserialize(a,b){const d=a.readInt32(),c=a.readInt32();b=new n(b.id,d,c);b.vertexFrom=a.readInt32();b.vertexCount=a.readInt32();b.indexFrom=a.readInt32();
b.indexCount=a.readInt32();b.minZoom=a.readInt32();b.maxZoom=a.readInt32();return b}}return n});