// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("exports ../../../../core/CircularArray ../../../../core/has ../../../../chunks/mat2df32 ./enums ./Utils ./WGLTile ./collisions/MetricReader ./cpuMapped/Geometry".split(" "),function(g,h,e,l,m,k,n,p,q){let r=0;class t extends n.WGLTile{constructor(a,b,c,d,f,u){super(a,b,c,d);this.instanceId=r++;this.patchCount=0;this._renderState={current:{geometry:new Map,metrics:null},next:null,swap:!1,swapFrames:0,locked:!1};this._patches=new h(100);this._bufferPatches=new h(100);this._lastCommitTime=0;
this.transforms.labelMat2d=l.create();this._store=f;this._requestLabelUpdate=u}destroy(){super.destroy();this._renderState.current.geometry.forEach(a=>a.destroy());null!=this._renderState.next&&this._renderState.next.geometry.forEach(a=>a.destroy());this._renderState.current=null;this._renderState.next=null}get labelMetrics(){return this._renderState.current.metrics}get hasData(){return!!this._renderState.current.geometry.size}get updateStatus(){return`renderState:${!!this._renderState.current}, ${!!this._renderState.next}, hasData:${this.hasData}, queue:${this._patches.size}`}getGeometry(a){return this._renderState.current.geometry.get(a)}patch(a,
b){this.patchCount++;a.clear&&50<=this._patches.size&&this._dropPatches();const c=a.addOrUpdate&&this.key.id!==a.addOrUpdate.tileKeyOrigin;b&&c?this._bufferPatches.enqueue(a):(a.sort=a.sort&&!b,this._patches.enqueue(a));this.requestRender()}commit(a){if(this._lastCommitTime!==a.time){this._lastCommitTime=a.time;for(a=0;4>a;a++)this._updateMesh(),this.isReady&&this._updateBufferMesh();this._renderState.swap&&(this._swapRenderStates(),this.requestRender())}}lock(){this._renderState.locked=!0}unlock(){this._renderState.locked=
!1;this._flushUpdates();this._swap()}_swapRenderStates(){this._renderState.next&&(this._renderState.locked?(this._renderState.swap=!0,this.requestRender()):(this._renderState.swap=!0,this._swap()))}_swap(){this._renderState.swap&&(this._renderState.swap=!1,null!=this._renderState.next&&(this._renderState.current.geometry.forEach(a=>a.destroy()),this._renderState.current=this._renderState.next,this._renderState.next=null,this._requestLabelUpdate()))}_flushUpdates(){let a=this._patches.maxSize;for(;this._patches.size&&
a--;)this._updateMesh(),this._swap()}_updateBufferMesh(){var a=this._bufferPatches.peek();if(null==a||!a.clear||null===this._renderState.next)for(;this._bufferPatches.size;)a=this._bufferPatches.dequeue(),null!=a&&this._patchBuffer(a)}_updateMesh(){const a=this._patches.dequeue();if(null!=a){if(e("esri-2d-update-debug")){var b=a.addOrUpdate?.tileKeyOrigin;b=this.key.id===b?"SELF":b;let c="";for(let d=0;5>d;d++)c+=a.addOrUpdate?.data[d]?.records?.byteLength?1:0;console.debug(this.key.id,"FeatureTile:patch",
`[clear: ${a.clear} origin: ${b}, end:${a.end} data:${c}]`)}!0===a.clear&&(null!=this._renderState.next&&(this._renderState.next.geometry.forEach(c=>c.destroy()),this._renderState.next=null),this._renderState.next={geometry:new Map,metrics:null},e("esri-2d-update-debug")&&console.debug(this.key.id,"FeatureTile:_updateMesh - Creating new renderState"));this.requestRender();this._patch(a);a.end&&(e("esri-2d-update-debug")&&console.debug(this.key.id,"FeatureTile:_updateMesh - Encountered end message"),
this.ready(),this._swapRenderStates())}}_patch(a){k.forEachGeometryType(b=>{this._remove(b,a.remove);this._insert(b,a,!1)})}_patchBuffer(a){k.forEachGeometryType(b=>{this._insert(b,a,!0)})}_insert(a,b,c){try{const d=b.addOrUpdate?.data[a],f=(this._renderState.next??this._renderState.current).geometry;null!=d&&(f.has(a)||(e("esri-2d-update-debug")&&console.debug(this.key.id,`FeatureTile:_insert - Creating geometry buffer ${a}`),f.set(a,new q.Geometry(a,this.stage))),e("esri-2d-update-debug")&&console.debug(this.key.id,
`FeatureTile:_insert - Inserting into ${a}, version=${b.addOrUpdate?.version} stride=${d.stride}`),f.get(a).insert(d,b.sort,c),a===m.WGLGeometryType.LABEL&&this._insertLabelMetrics(b.type,d.metrics,b.clear))}catch(d){}}_insertLabelMetrics(a,b,c){c=this._renderState.next??this._renderState.current;if(null!=b)if(b=p.MetricReader.from(b),null==c.metrics)c.metrics=b;else{if("update"===a)for(a=b.getCursor();a.next();)c.metrics.delete(a.id);c.metrics.link(b)}}_remove(a,b){a=(this._renderState.next??this._renderState.current).geometry.get(a);
b&&b.length&&a&&(a.remove(b),this._removeLabelMetrics(b))}_removeLabelMetrics(a){const {metrics:b}=this._renderState.next??this._renderState.current;if(null!=b&&a.length)for(const c of a)for(;b.delete(c););}_dropPatches(){const a=[];let b=!1;for(;this._patches.size;){const c=this._patches.dequeue();if(null==c)break;if(c.clear){if(b)break;b=!0}a.push(c)}this._patches.clear();a.forEach(c=>this._patches.enqueue(c))}}g.FeatureTile=t;Object.defineProperty(g,Symbol.toStringTag,{value:"Module"})});