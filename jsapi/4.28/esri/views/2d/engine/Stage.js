// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("exports ../../../core/Error ../../../core/has ../../../core/maybe ../../../core/scheduling ../../../core/signal ../../../chunks/mat3f32 ../../../symbols/cim/CIMResourceManager ./Container ./ManagedCanvas ./webgl/BufferPool ./webgl/enums ./webgl/Painter ./webgl/Profiler ../support/Timeline ../../support/screenshotUtils ../../webgl/enums ../../webgl/FramebufferObject ../../webgl/RenderbufferDescriptor ../../webgl/RenderingContext ../../webgl/TextureDescriptor ../../webgl/capabilities/isWebGL2Context ../../../core/imageUtils".split(" "),
function(m,r,p,q,t,u,v,w,x,y,z,k,A,B,C,D,h,E,F,G,H,I,J){class K extends x.Container{constructor(a,b){super();this._trash=new Set;this._lastFrameRenderTime=this._renderRemainingTime=0;this._renderRequested=u.signal(!1);this.stage=this;this._stationary=!0;this._canvas=new y.ManagedCanvas(a);this.context=new G.RenderingContext(this._canvas.gl,b.contextOptions??{});this.resourceManager=new w;this.painter=new A(this.context,this,this.resourceManager);p("esri-2d-profiler")&&(this._debugOutput=document.createElement("div"),
this._debugOutput.setAttribute("style","margin: 24px 64px; position: absolute; color: red;"),a.appendChild(this._debugOutput));const d=()=>this._highlightGradient;this._renderParameters={drawPhase:0,state:this.state,pixelRatio:window.devicePixelRatio,stationary:!1,globalOpacity:1,blendMode:null,deltaTime:-1,time:0,inFadeTransition:!1,effects:null,context:this.context,painter:this.painter,timeline:b.timeline||new C.Timeline,renderingOptions:b.renderingOptions,requestRender:()=>this.requestRender(),
allowDelayedRender:!1,requireFBO:!1,profiler:new B.Profiler(this.context,this._debugOutput),dataUploadCounter:0,get highlightGradient(){return d()},backgroundColor:b.backgroundColor};this._taskHandle=t.addFrameTask({render:c=>this.renderFrame(c)});this._taskHandle.pause();this._lostWebGLContextHandle=this._canvas.events.on("webgl-context-lost",c=>this.emit("webgl-error",{error:new r("webgl-context-lost",c.statusMessage)}));this._bufferPool=new z.BufferPool}destroy(){this.removeAllChildren();this._emptyTrash();
this._taskHandle=q.removeMaybe(this._taskHandle);this._lostWebGLContextHandle=q.removeMaybe(this._lostWebGLContextHandle);this._canvas.destroy();this._debugOutput?.parentNode?.removeChild(this._debugOutput);this._bufferPool.destroy();this.resourceManager.destroy();this.painter.dispose();this.context.dispose();this._canvas=null}get backgroundColor(){return this._renderParameters.backgroundColor}set backgroundColor(a){this._renderParameters.backgroundColor=a;this.requestRender()}get bufferPool(){return this._bufferPool}get renderingOptions(){return this._renderingOptions}set renderingOptions(a){this._renderingOptions=
a;this.requestRender()}get renderRequested(){return this._renderRequested.value}get state(){return this._state}set state(a){this._state=a;this.requestRender()}get stationary(){return this._stationary}set stationary(a){this._stationary!==a&&(this._stationary=a,this.requestRender())}trashDisplayObject(a){this._trash.add(a);this.requestRender()}untrashDisplayObject(a){return this._trash.delete(a)}requestRender(){this._renderRemainingTime=2E3;this.renderRequested||(this._renderRequested.value=!0,this._taskHandle.resume())}renderFrame(a){this._renderRemainingTime-=
this._lastFrameRenderTime?a.time-this._lastFrameRenderTime:0;0>=this._renderRemainingTime&&this._taskHandle.pause();this._lastFrameRenderTime=a.time;this._renderRequested.value=!1;this._renderParameters.state=this._state;this._renderParameters.stationary=this.stationary;this._renderParameters.pixelRatio=window.devicePixelRatio;this._renderParameters.globalOpacity=1;this._renderParameters.time=a.time;this._renderParameters.deltaTime=a.deltaTime;this._renderParameters.effects=null;this.processRender(this._renderParameters);
this._emptyTrash()}_createTransforms(){return{dvs:v.create()}}renderChildren(a){for(const b of this.children)b.beforeRender(a);this._canvas.render(a,()=>this._renderChildren(this.children,a));for(const b of this.children)b.afterRender(a)}_renderChildren(a,b){const d=this.context;this.painter.textureUploadManager.upload();d.resetInfo();b.profiler.recordStart("drawLayers");b.dataUploadCounter=0;this.painter.beforeRenderPhases(b,b.backgroundColor,this.state.padding);b.drawPhase=k.WGLDrawPhase.MAP;for(const c of a)c.processRender(b);
if(this.children.some(c=>c.hasHighlight)){b.drawPhase=k.WGLDrawPhase.HIGHLIGHT;for(const c of a)c.processRender(b)}if(this.children.some(c=>c.hasLabels)){b.drawPhase=k.WGLDrawPhase.LABEL;for(const c of a)c.processRender(b)}if(p("esri-tiles-debug")){b.drawPhase=k.WGLDrawPhase.DEBUG;for(const c of a)c.processRender(b)}this.painter.afterRenderPhases(b);b.profiler.recordEnd("drawLayers");d.logInfo()}doRender(a){const b=this.context,{state:d,pixelRatio:c}=a;this._canvas.resize(a);b.setViewport(0,0,c*d.size[0],
c*d.size[1]);b.setDepthWriteEnabled(!0);b.setStencilWriteMask(255);this.renderChildren(a)}async takeScreenshot(a,b,d,c){const n=Math.round(this.state.size[0]*a.resolutionScale),l=Math.round(this.state.size[1]*a.resolutionScale);var g=a.resolutionScale,e=this.context,f=this._state.clone();if(null!=c){const L=f.viewpoint;f.viewpoint.rotation=c;f.viewpoint=L}c={...this._renderParameters,drawPhase:null,globalOpacity:1,stationary:!0,state:f,pixelRatio:g,time:performance.now(),deltaTime:0,blendMode:null,
effects:null,inFadeTransition:!1,backgroundColor:d};d=I(e.gl);g=new H.TextureDescriptor(n,l);g.wrapMode=h.TextureWrapMode.CLAMP_TO_EDGE;g.internalFormat=d?h.SizedPixelFormat.RGBA8:h.PixelFormat.RGBA;g.isImmutable=d;d=new E.FramebufferObject(e,g,new F.RenderbufferDescriptor(h.RenderbufferFormat.DEPTH_STENCIL,n,l));g=e.getBoundFramebufferObject();f=e.getViewport();e.bindFramebuffer(d);e.setViewport(0,0,n,l);this._renderChildren(b??this.children,c);b=this._readbackScreenshot(d,{...a.cropArea,y:l-(a.cropArea.y+
a.cropArea.height)});e.bindFramebuffer(g);e.setViewport(f.x,f.y,f.width,f.height);this.requestRender();e=await b;1===a.outputScale?a=e:(a=new ImageData(Math.round(e.width*a.outputScale),Math.round(e.height*a.outputScale)),D.resampleHermite(e,a,!0));d.dispose();return a}async _readbackScreenshot(a,b){const d=J.createEmptyImageData(b.width,b.height,document.createElement("canvas"));await a.readPixelsAsync(b.x,b.y,b.width,b.height,h.PixelFormat.RGBA,h.PixelType.UNSIGNED_BYTE,new Uint8Array(d.data.buffer));
return d}_emptyTrash(){for(;0<this._trash.size;){const a=Array.from(this._trash);this._trash.clear();for(const b of a)b.processDetach()}}}m.Stage=K;m.extraRenderTime=2E3;Object.defineProperty(m,Symbol.toStringTag,{value:"Module"})});