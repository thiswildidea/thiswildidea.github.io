// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("../../../../core/pbf ../../../../core/promiseUtils ../../../../geometry/libtess ../../../../geometry/support/TileClipper ./Feature ./IndexMemoryBuffer ./SourceLayerData ./VertexMemoryBuffer ./buckets/CircleBucket ./buckets/FillBucket ./buckets/LineBucket ./buckets/SymbolBucket ./style/StyleDefinition ../../tiling/enums".split(" "),function(x,y,z,w,A,t,B,u,C,D,E,F,v,G){class H{constructor(a,c,b,d,g){this._pbfTiles={};this._tileClippers={};this._client=b;this._tile=c;if(g){this._styleLayerUIDs=
new Set;for(const f of g)this._styleLayerUIDs.add(f)}this._styleRepository=d;this._layers=this._styleRepository?.layers??[];const [h,l,p]=c.tileKey.split("/").map(parseFloat);this._level=h;c=8+Math.max(16*(this._level-14),0);for(const f of Object.keys(a))b=a[f],this._pbfTiles[f]=new x(new Uint8Array(b.protobuff),new DataView(b.protobuff)),b.refKey&&([b]=b.refKey.split("/").map(parseFloat),b=h-b,0<b&&(d=(1<<b)-1,this._tileClippers[f]=new w.TileClipper(b,l&d,p&d,8,c))),this._tileClippers[f]||(this._tileClippers[f]=
new w.SimpleBuilder)}_canParseStyleLayer(a){return!this._styleLayerUIDs||this._styleLayerUIDs.has(a)}async parse(a){const c=z.loadLibtess(),b=this._initialize(a),{returnedBuckets:d}=b;this._processLayers(b);this._linkReferences(b);this._filterFeatures(b);const g=[],h=new Set,l=(f,q)=>{h.has(f)||(g.push({name:f,repeat:q}),h.add(f))},p={};for(const f of d)f.getResources(f.tileClipper,l,p);if(this._tile.status===G.TileStatus.INVALID)return[];a=this._fetchResources(g,p,a);return Promise.all([...a,c]).then(()=>
this._processFeatures(b.returnedBuckets))}_initialize(a){a=a?.signal;const c=this._parseTileData(this._pbfTiles),b=this._layers,d=this._level,g=this._tileClippers,h=new Map;return{signal:a,sourceNameToTileData:c,layers:b,zoom:d,sourceNameToTileClipper:g,sourceNameToUniqueSourceLayerBuckets:{},sourceNameToUniqueSourceLayers:{},returnedBuckets:[],layerIdToBucket:{},referencerUIDToReferencedId:h}}_processLayers(a){const {sourceNameToTileData:c,layers:b,zoom:d,sourceNameToTileClipper:g,sourceNameToUniqueSourceLayerBuckets:h,
sourceNameToUniqueSourceLayers:l,returnedBuckets:p,layerIdToBucket:f,referencerUIDToReferencedId:q}=a;for(a=b.length-1;0<=a;a--){const e=b[a];if(!this._canParseStyleLayer(e.uid)||e.minzoom&&d<Math.floor(e.minzoom)||e.maxzoom&&d>=e.maxzoom||e.type===v.StyleLayerType.BACKGROUND)continue;if(!c[e.source]||!g[e.source])continue;var m=g[e.source];const r=e.sourceLayer;var n=c[e.source][r];if(n){var k=l[e.source];k||(k=l[e.source]=new Set);k.add(e.sourceLayer);if(e.refLayerId)q.set(e.uid,e.refLayerId);else if(k=
this._createBucket(e))k.layerUIDs=[e.uid],k.layerExtent=n.extent,k.tileClipper=m,(m=h[e.source])||(m=h[e.source]={}),(n=m[r])||(n=m[r]=[]),n.push(k),p.push(k),f[e.id]=k}}}_linkReferences(a){const {layerIdToBucket:c,referencerUIDToReferencedId:b}=a;b.forEach((d,g)=>{c[d]&&c[d].layerUIDs.push(g)})}_filterFeatures(a){const {signal:c,sourceNameToTileData:b,sourceNameToUniqueSourceLayerBuckets:d,sourceNameToUniqueSourceLayers:g}=a;a=10*this._level;const h=10*(this._level+1),l=[],p=[];for(const n of Object.keys(g))g[n].forEach(k=>
{l.push(k);p.push(n)});for(let n=0;n<l.length;n++){var f=p[n],q=l[n];if(!b[f]||!d[f])continue;const k=b[f][q];if((f=d[f][q])&&0!==f.length){if(y.isAborted(c))break;for(q=k.getData();q.nextTag(2);){var m=q.getMessage();const e=new A(m,k);m.release();if(m=e.values){const r=m._minzoom;if(r&&r>=h)continue;if((m=m._maxzoom)&&m<=a)continue}for(const r of f)r.pushFeature(e)}}}}_fetchResources(a,c,b){const d=[],g=this._tile.getWorkerTileHandler();0<a.length&&(a=g.fetchSprites(a,this._client,b),d.push(a));
for(const h in c)a=c[h],0<a.size&&(a=g.fetchGlyphs(this._tile.tileKey,h,a,this._client,b),d.push(a));return d}_processFeatures(a){a=a.filter(c=>c.hasFeatures()||this._canParseStyleLayer(c.layer.uid));for(const c of a)c.processFeatures(c.tileClipper);return a}_parseTileData(a){const c={};for(const b of Object.keys(a)){const d=a[b],g={};for(;d.next();)switch(d.tag()){case 3:const h=d.getMessage(),l=new B(h);h.release();g[l.name]=l;break;default:d.skip()}c[b]=g}return c}_createBucket(a){switch(a.type){case v.StyleLayerType.BACKGROUND:return null;
case v.StyleLayerType.FILL:return this._createFillBucket(a);case v.StyleLayerType.LINE:return this._createLineBucket(a);case v.StyleLayerType.CIRCLE:return this._createCircleBucket(a);case v.StyleLayerType.SYMBOL:return this._createSymbolBucket(a)}}_createFillBucket(a){return new D(a,this._level,this._tile.getWorkerTileHandler().getSpriteItems(),new u.FillVertexBuffer(a.fillMaterial.getStride()),new t.TriangleIndexBuffer,new u.OutlineVertexBuffer(a.outlineMaterial.getStride()),new t.TriangleIndexBuffer)}_createLineBucket(a){return new E(a,
this._level,this._tile.getWorkerTileHandler().getSpriteItems(),new u.LineVertexBuffer(a.lineMaterial.getStride()),new t.TriangleIndexBuffer)}_createCircleBucket(a){return new C(a,this._level,this._tile.getWorkerTileHandler().getSpriteItems(),new u.CircleVertexBuffer(a.circleMaterial.getStride()),new t.TriangleIndexBuffer)}_createSymbolBucket(a){const c=this._tile;return new F(a,this._level,new u.SymbolVertexBuffer(a.iconMaterial.getStride()),new t.TriangleIndexBuffer,new u.SymbolVertexBuffer(a.textMaterial.getStride()),
new t.TriangleIndexBuffer,c.placementEngine,c.getWorkerTileHandler())}}return H});