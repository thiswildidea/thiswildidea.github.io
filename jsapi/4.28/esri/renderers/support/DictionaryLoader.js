// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("exports ../../Color ../../request ../../core/Error ../../core/has ../../core/Logger ../../core/LRUCache ../../core/promiseUtils ../../core/string ../../core/Version ../../layers/support/FieldsIndex ../../support/arcadeOnDemand ../../symbols/CIMSymbol".split(" "),function(p,w,q,x,G,r,y,z,A,B,C,t,D){function u(a,d){if(a&&(a=a.symbolLayers))for(var c=a.length;c--;){var b=a[c];if(b&&!1!==b.enable)switch(b.type){case "CIMVectorMarker":var h=d;if(b=b.markerGraphics)for(const g of b)if(g&&(b=g.symbol))switch(b.type){case "CIMPointSymbol":case "CIMLineSymbol":case "CIMPolygonSymbol":u(b,
h);break;case "CIMTextSymbol":b.fieldMap=h}}}}const E={type:"CIMSimpleLineCallout",lineSymbol:{type:"CIMLineSymbol",symbolLayers:[{type:"CIMSolidStroke",width:.5,color:[0,0,0,255]}]}};class F{constructor(a,d,c){this.url=this.fieldMap=this.config=null;this._ongoingRequests=new Map;this._symbolCache=new y.LRUCache(100);this._dictionaryPromise=this._fieldIndex=this._dictionaryVersion=null;this.url=a;this.config=d;this.fieldMap=c}getSymbolFields(){return this._symbolFields}async getSymbolAsync(a,d){this._dictionaryPromise||
(this._dictionaryPromise=this.fetchResources(d));try{var c=await this._dictionaryPromise}catch(f){if(z.isAbortError(f))return this._dictionaryPromise=null}var b=this._dictionaryVersion&&this._dictionaryVersion.since(4,0),h={};if(this.fieldMap)for(var g of this._symbolFields){var e=this._getFieldName(this.fieldMap[g]);if(e){const f=a.attributes[e];h[g]=b?f:null!=f?""+a.attributes[e]:""}else h[g]=""}b=null;try{b=c?.(h,d)}catch(f){return null}if(!b||"string"!==typeof b)return null;const l=A.numericHash(b).toString();
if(c=this._symbolCache.get(l))return c.catch(()=>{this._symbolCache.pop(l)}),c;b=b.split(";");c=[];h=[];for(const f of b)if(f)if(f.includes("po:"))e=f.substr(3).split("|"),3===e.length&&(b=e[0],g=e[1],e=e[2],"DashTemplate"===g?e=e.split(" ").map(k=>Number(k)):"Color"===g?(e=(new w(e)).toRgba(),e=[e[0],e[1],e[2],255*e[3]]):e=Number(e),h.push({primitiveName:b,propertyName:g,value:e}));else if(f.includes("|"))for(const k of f.split("|")){if(this._itemNames.has(k)){c.push(k);break}}else this._itemNames.has(f)&&
c.push(f);a=this._cimPartsToCIMSymbol(c,h,null==a.geometry||!a.geometry.hasZ&&"point"===a.geometry.type?!0:!1,d);this._symbolCache.put(l,a,1);return a}async fetchResources(a){if(this._dictionaryPromise)return this._dictionaryPromise;if(this.url){var d=q(this.url+"/resources/styles/dictionary-info.json",{responseType:"json",query:{f:"json"},signal:null!=a?a.signal:null}),[{data:c}]=await Promise.all([d,t.loadArcade()]);if(!c)throw this._dictionaryPromise=null,new x("esri.renderers.DictionaryRenderer",
"Bad dictionary data!");var {authoringInfo:b,dictionary_version:h,expression:g,itemsNames:e}=c;d=!1;h&&(this._dictionaryVersion=B.Version.parse(h),d=this._dictionaryVersion.since(4,0));this._refSymbolUrlTemplate=this.url+"/"+c.cimRefTemplateUrl;this._itemNames=new Set(e);this._symbolFields=b.symbol;c={};if(this.config){const k=this.config;for(var l in k)c[l]=k[l]}if(b.configuration)for(var f of b.configuration)c.hasOwnProperty(f.name)||(c[f.name]=f.value);l=[];if(a?.fields&&this.fieldMap)for(const k of this._symbolFields){const n=
this.fieldMap[k];f=a.fields.filter(m=>m.name.toLowerCase()===n?.toLowerCase());0<f.length&&l.push({...f[0],type:d?f[0].type:"esriFieldTypeString"})}0<l.length&&(this._fieldIndex=new C(l));return this._dictionaryPromise=a=t.createDictionaryExpression(g,null!=a?a.spatialReference:null,l,c).then(k=>{const n={scale:0};return(m,v)=>{if(null==k)return null;m=k.repurposeFeature({geometry:null,attributes:m});n.scale=null!=v?v.scale??void 0:void 0;return k.evaluate({$feature:m,$view:n},k.services)}}).catch(k=>
{r.getLogger("esri.renderers.support.DictionaryLoader").error("Creating dictinoary expression failed:",k);return null})}r.getLogger("esri.renderers.support.DictionaryLoader").error("no valid URL!")}async _cimPartsToCIMSymbol(a,d,c,b){const h=Array(a.length);for(let g=0;g<a.length;g++)h[g]=this._getSymbolPart(a[g],b);a=await Promise.all(h);if(b=this.fieldMap)for(const g of a)u(g,b);return new D({data:this._combineSymbolParts(a,d,c)})}async _getSymbolPart(a,d){if(this._ongoingRequests.has(a))return this._ongoingRequests.get(a).then(b=>
b.data);const c=this._refSymbolUrlTemplate.replaceAll(/\{itemName\}/gi,a);d=q(c,{responseType:"json",query:{f:"json"},...d});this._ongoingRequests.set(a,d);try{return(await d).data}catch(b){throw this._ongoingRequests.delete(a),b;}}_combineSymbolParts(a,d,c){if(!a||0===a.length)return null;const b={...a[0]};if(1<a.length){b.symbolLayers=[];for(const h of a)b.symbolLayers.unshift(...h.symbolLayers)}c&&(b.callout=E);return{type:"CIMSymbolReference",symbol:b,primitiveOverrides:d}}_getFieldName(a){if(null!==
this._fieldIndex){const d=this._fieldIndex.get(a);return d?d.name:a}return a}}p.DictionaryLoader=F;Object.defineProperty(p,Symbol.toStringTag,{value:"Module"})});