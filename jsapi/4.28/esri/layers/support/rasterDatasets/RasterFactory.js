// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("../../../core/Error ./CloudRaster ./ImageAuxRaster ./ImageServerRaster ./MRFRaster ./TIFFRaster".split(" "),function(k,n,g,p,q,r){const b=new Map;b.set("CRF",{desc:"Cloud Raster Format",constructor:n});b.set("MRF",{desc:"Meta Raster Format",constructor:q});b.set("TIFF",{desc:"GeoTIFF",constructor:r});b.set("RasterTileServer",{desc:"Raster Tile Server",constructor:p});b.set("JPG",{desc:"JPG Raster Format",constructor:g});b.set("PNG",{desc:"PNG Raster Format",constructor:g});b.set("GIF",{desc:"GIF Raster Format",
constructor:g});b.set("BMP",{desc:"BMP Raster Format",constructor:g});class t{static get supportedFormats(){const c=new Set;b.forEach((d,e)=>c.add(e));return c}static async open(c){const {url:d,ioConfig:e,sourceJSON:u}=c;let a=c.datasetFormat;null==a&&d.lastIndexOf(".")&&(a=d.slice(d.lastIndexOf(".")+1).toUpperCase());if("OVR"===a||"TIF"===a)a="TIFF";else if("JPG"===a||"JPEG"===a||"JFIF"===a)a="JPG";d.toLowerCase().includes("/imageserver")&&!d.toLowerCase().includes("/wcsserver")&&(a="RasterTileServer");
const v={bandIds:null,sampling:null},l={url:d,sourceJSON:u,datasetFormat:a,ioConfig:e??v};let h,f;if(a&&this.supportedFormats.has(a)){if("CRF"===a&&!e?.enableCRF)throw new k("rasterfactory:open",`cannot open raster: ${d}`);h=b.get(a).constructor;f=new h(l);await f.open({signal:c.signal});return f}if(a)throw new k("rasterfactory:open","not a supported format "+a);const w=Array.from(b.keys());let x=0;const m=()=>{a=w[x++];if(!a||"CRF"===a&&!e?.enableCRF)return null;h=b.get(a).constructor;f=new h(l);
return f.open({signal:c.signal}).then(()=>f).catch(()=>m())};return m()}static register(c,d,e){b.has(c.toUpperCase())||b.set(c.toUpperCase(),{desc:d,constructor:e})}}return t});