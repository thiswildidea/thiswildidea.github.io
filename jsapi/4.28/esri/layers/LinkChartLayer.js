// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("../chunks/tslib.es6 ../geometry ../core/Collection ../core/Error ../core/Logger ../core/promiseUtils ../core/accessorSupport/decorators/property ../core/accessorSupport/ensureType ../core/arrayUtils ../core/has ../core/accessorSupport/decorators/subclass ../geohash/geohashUtils ./Layer ./graphics/featureConversionUtils ./graphics/OptimizedGeometry ./knowledgeGraph/KnowledgeGraphLayerDataManager ./knowledgeGraph/KnowledgeGraphSublayer ./knowledgeGraph/supportUtils ./mixins/BlendLayer ./mixins/ScaleRangeLayer ../libs/linkchartlayout/LinkChartLayout ../rest/knowledgeGraphService ../rest/knowledgeGraph/EntityType ../rest/knowledgeGraph/RelationshipType ../geometry/Extent ../geometry/Point ../geometry/Polyline".split(" "),
function(w,v,I,E,F,S,x,ca,da,ea,T,B,U,A,J,e,G,V,W,X,r,Y,Z,aa,K,L,M){const ba=(a,d,c)=>{a.has(d)||a.set(d,c());return a.get(d)};v=class extends W.BlendLayer(X.ScaleRangeLayer(U)){constructor(a){super(a);this.dataPreloadedInLocalCache=!1;this.defaultLinkChartConfig=null;this._currentLinkChartConfig={layoutMode:"RADIAL_TREE",xScaleFactor:1,yScaleFactor:1};this._graphTypeLookup=new Map;this.knowledgeGraph=null;this.layers=new I;this.linkChartDiagramLookup=new Map;this.linkChartExtent=new K({xmin:-1E-7,
ymin:-1E-7,xmax:1E-7,ymax:1E-7});this.linkChartGeohashLookup=new Map;this.memberRelationshipTypes=this.memberEntityTypes=null;this.sublayerIdsCache=new Map;this.tables=new I;this.type="link-chart";this._originalInclusionList=a.inclusionModeDefinition;if(a.dataPreloadedInLocalCache&&!a.inclusionModeDefinition)throw new E("knowledge-graph:linkchart-layer-constructor","If creating a link chart composite layer and configured that data is already loaded in the cache, you must specify an inclusion list so the Composite Layer knows what records belong to it");
}normalizeCtorArgs(a){return{url:a.url,title:a.title,dataPreloadedInLocalCache:a.dataPreloadedInLocalCache,defaultLinkChartConfig:a.defaultLinkChartConfig}}_initializeLayerProperties(a){if(!this.title&&this.url){var d=this.url.split("/");this.title=d[d.length-2]}const c=new Set;let b=[],h=[];if(a.inclusionModeDefinition&&(!a.inclusionModeDefinition.namedTypeDefinitions||1>a.inclusionModeDefinition.namedTypeDefinitions.size))throw new E("knowledge-graph:composite-layer-constructor","If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined");
a.knowledgeGraph.dataModel.entityTypes?.forEach(g=>{g.name&&this._graphTypeLookup.set(g.name,g)});a.knowledgeGraph.dataModel.relationshipTypes?.forEach(g=>{g.name&&this._graphTypeLookup.set(g.name,g)});a.inclusionModeDefinition?.generateAllSublayers?(b=a.knowledgeGraph.dataModel.entityTypes??[],h=a.knowledgeGraph.dataModel.relationshipTypes??[]):a.inclusionModeDefinition?.namedTypeDefinitions&&0<a.inclusionModeDefinition?.namedTypeDefinitions.size?a.inclusionModeDefinition?.namedTypeDefinitions.forEach((g,
q)=>{this._graphTypeLookup.get(q)?this._graphTypeLookup.get(q)instanceof aa||"strictOrigin"in this._graphTypeLookup.get(q)?c.has(q)||(c.add(q),h.push(this._graphTypeLookup.get(q))):this._graphTypeLookup.get(q)instanceof Z||"properties"in this._graphTypeLookup.get(q)?c.has(q)||(c.add(q),b.push(this._graphTypeLookup.get(q))):(F.getLogger(this).warn(`A named type, ${q}, was in the inclusion list that wasn't properly modeled and will be removed`),a.inclusionModeDefinition?.namedTypeDefinitions.delete(q)):
(F.getLogger(this).warn(`A named type, ${q}, was in the inclusion list that wasn't in the data model and will be removed`),a.inclusionModeDefinition?.namedTypeDefinitions.delete(q))}):(b=a.knowledgeGraph.dataModel.entityTypes??[],h=a.knowledgeGraph.dataModel.relationshipTypes??[]);d=new e.KnowledgeGraphLayerDataManager({knowledgeGraph:a.knowledgeGraph,inclusionModeDefinition:a.inclusionModeDefinition});this.knowledgeGraph=a.knowledgeGraph;this.memberEntityTypes=b;this.memberRelationshipTypes=h;this.dataManager=
d}load(a){this.addResolvingPromise(new Promise(d=>{Y.fetchKnowledgeGraph(this.url).then(c=>{this._initializeLayerProperties({knowledgeGraph:c,inclusionModeDefinition:this._originalInclusionList});this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.size||(this.dataManager.inclusionModeDefinition={generateAllSublayers:!1,namedTypeDefinitions:new Map},this.dataManager.knowledgeGraph.dataModel.entityTypes?.forEach(b=>{b.name&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.set(b.name,
{useAllData:!0})}),this.dataManager.knowledgeGraph.dataModel.relationshipTypes?.forEach(b=>{b.name&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.set(b.name,{useAllData:!0})}));this.dataPreloadedInLocalCache?(this.loadLayerAssumingLocalCache(),this.dataManager.inclusionModeDefinition&&(this.dataManager.inclusionModeDefinition.generateAllSublayers=!1),this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.forEach(b=>{b.useAllData=!1;b.members?.forEach(h=>{let g;g=h.linkChartLocation instanceof
J?h.linkChartLocation:h.linkChartLocation?A.convertFromGeometry(h.linkChartLocation):null;this.linkChartDiagramLookup.set(h.id,g);g&&2===g.coords.length&&0===g.lengths.length?this.linkChartGeohashLookup.set(h.id,B.encodeGeohash(g.coords[1],g.coords[0],e.geohashEncodingPrecision)):this.linkChartGeohashLookup.set(h.id,"")});this.addResolvingPromise(this._initializeDiagram().then(async()=>{this.layers.forEach(async h=>{await h.refreshCachedQueryEngine()});this.tables.forEach(async h=>{await h.refreshCachedQueryEngine()})}))})):
this.addResolvingPromise(this.dataManager.refreshCacheContent(void 0,!1,"GEOGRAPHIC"===this.defaultLinkChartConfig?.layoutMode,!0).then(async()=>{S.throwIfAborted(a);const b=[],h=[];this.loadLayerAssumingLocalCache();this.dataManager.inclusionModeDefinition&&(this.dataManager.inclusionModeDefinition.generateAllSublayers=!1,this.dataManager.inclusionModeDefinition.namedTypeDefinitions.forEach(g=>{g.useAllData=!1}));await this._initializeDiagram();this.layers.forEach(g=>{h.push(g.refreshCachedQueryEngine());
b.push(new Promise(q=>{g.on("layerview-create",()=>{q(null)})}))});this.tables.forEach(g=>{h.push(g.refreshCachedQueryEngine())});await Promise.all(h)}));d(null)})}));return Promise.resolve(this)}async addRecords(a,d){let c=[];d?.cascadeAddRelationshipEndNodes&&this.dataManager.knowledgeGraph.dataModel&&(c=await V.getRelationshipEndNodeIds(a,this.dataManager.knowledgeGraph));a=a.concat(c).filter(b=>!this.sublayerIdsCache.get(b.typeName)?.has(b.id));await this._handleNewRecords(a)}async removeRecords(a,
{cascadeRemoveRelationships:d=!0,recalculateLayout:c=!1}={cascadeRemoveRelationships:!0,recalculateLayout:!1}){let b=[];for(const g of a)!1===this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(g.typeName)?.useAllData&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(g.typeName)?.members?.has(g.id)&&b.push(g);if(d){a=new Set;d=[];for(const g of b)if(this.dataManager.nodeConnectionsLookup.has(g.id))for(const q of this.dataManager.nodeConnectionsLookup.get(g.id))a.add(q);
for(const g of a)this.dataManager.memberIdTypeLookup.has(g)&&d.push({id:g,typeName:this.dataManager.memberIdTypeLookup.get(g)});b=b.concat(d)}this.dataManager.removeFromLayer(b);for(const g of b)this.sublayerIdsCache.get(g.typeName)?.delete(g.id),this.linkChartDiagramLookup.delete(g.id);c&&await this.calculateLinkChartLayout(this._currentLinkChartConfig.layoutMode,{xScaleFactor:this._currentLinkChartConfig.xScaleFactor,yScaleFactor:this._currentLinkChartConfig.xScaleFactor});const h=[];this.layers.forEach(g=>
{h.push(g.refreshCachedQueryEngine())});await Promise.all(h);this._refreshNamedTypes();return b}async expand(a){a=await this.dataManager.getConnectedRecordIds(a);const d=a.filter(c=>!this.sublayerIdsCache.get(c.typeName)?.has(c.id));await this._handleNewRecords(a);return{records:d}}loadLayerAssumingLocalCache(){this.memberRelationshipTypes.forEach(a=>{const d=new G({objectType:a,parentCompositeLayer:this,graphType:"relationship",title:a.name});d.geometryType?this.layers.push(d):this.tables.push(d);
this.dataManager.sublayerCaches.has(a.name)||this.dataManager.sublayerCaches.set(a.name,new Map)});this.memberEntityTypes.forEach(a=>{const d=new G({objectType:a,parentCompositeLayer:this,graphType:"entity",title:a.name});d.geometryType?this.layers.push(d):this.tables.push(d);this.dataManager.sublayerCaches.has(a.name)||this.dataManager.sublayerCaches.set(a.name,new Map)});this.dataManager.inclusionModeDefinition?.namedTypeDefinitions&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.forEach((a,
d)=>{const c=ba(this.sublayerIdsCache,d,()=>new Set);a.members?.forEach(b=>{c.add(b.id);if(b.linkChartLocation)if(b.linkChartLocation instanceof J)this.linkChartDiagramLookup.set(b.id,b.linkChartLocation),2===b.linkChartLocation.coords.length&&0===b.linkChartLocation.lengths.length?this.linkChartGeohashLookup.set(b.id,B.encodeGeohash(b.linkChartLocation.coords[1],b.linkChartLocation.coords[0],e.geohashEncodingPrecision)):this.linkChartGeohashLookup.set(b.id,"");else{const h=A.convertFromGeometry(b.linkChartLocation);
this.linkChartDiagramLookup.set(b.id,b.linkChartLocation?h:null);"x"in b.linkChartLocation&&"y"in b.linkChartLocation?this.linkChartGeohashLookup.set(b.id,B.encodeGeohash(b.linkChartLocation.x,b.linkChartLocation.y,e.geohashEncodingPrecision)):this.linkChartGeohashLookup.set(b.id,"")}})})}async calculateLinkChartLayout(a="RADIAL_TREE",d){const c=[],b=[];this.dataManager.sublayerCaches.forEach((l,p)=>{this.dataManager.entityTypeNames.has(p)?l.forEach(k=>{c.push({typeName:p,feature:k})}):this.dataManager.relationshipTypeNames.has(p)&&
l.forEach(k=>{b.push({typeName:p,feature:k})})});this.linkChartDiagramLookup=new Map;const h=new Map,g=new Map,q=new Map,C=new Map,z=new Uint8Array(c.length),t=new Float64Array(c.length),u=new Float64Array(c.length),N=new Uint32Array(b.length),O=new Uint32Array(b.length),n=[],P=d?.xScaleFactor??1,Q=d?.yScaleFactor??1,y=new K({xmin:-1E-7,ymin:-1E-7,xmax:1E-7,ymax:1E-7});let m=0,H=0;switch("GEOGRAPHIC"===a?"FORCE_DIRECTED":a){case "FORCE_DIRECTED":var f=r.LCForceDirectedLayout.apply;break;case "COMMUNITY":f=
r.LCCommunityLayout.apply;break;case "HIERARCHICAL":f=r.LCHierarchicalLayout.apply;break;case "RADIAL_TREE":f=r.LCRadialTreeLayout.apply;break;case "SMART_TREE":f=r.LCSmartTreeLayout.apply;break;default:f=r.LCSimpleLayout.apply}c.forEach(({typeName:l,feature:p})=>{if(d?.lockedNodeLocations?.has(p.attributes[e.mockOidFieldName])){"GEOGRAPHIC"===a&&this.dataManager.geographicLookup.has(l)?z[m]=r.NodeFlag.IsGeographic:z[m]=r.NodeFlag.None;var k=d.lockedNodeLocations.get(p.attributes[e.mockOidFieldName]);
t[m]=k.x;u[m]=k.y}else if("GEOGRAPHIC"===a&&this.dataManager.geographicLookup.has(l)){z[m]=r.NodeFlag.IsGeographic;k=null;k=p.attributes[this.dataManager.geographicLookup.get(l).name];switch(this.dataManager.geographicLookup.get(l)?.geometryType){case "esriGeometryPoint":t[m]=k?.x;u[m]=k?.y;break;case "esriGeometryPolygon":k=k?.centroid;null!=k?.x&&null!=k?.y?(t[m]=k.x,u[m]=k.y):z[m]=r.NodeFlag.IsMovable;break;case "esriGeometryPolyline":k=k?.extent?.center;null!=k?.x&&null!=k?.y?(t[m]=k.x,u[m]=k.y):
z[m]=r.NodeFlag.IsMovable;break;case "esriGeometryMultipoint":k=k?.extent?.center;null!=k?.x&&null!=k?.y?(t[m]=k.x,u[m]=k.y):z[m]=r.NodeFlag.IsMovable;break;default:z[m]=r.NodeFlag.IsMovable}if(null==t[m]||null==u[m]||Number.isNaN(t[m])||Number.isNaN(u[m]))z[m]=r.NodeFlag.IsMovable,t[m]=0,u[m]=0}else z[m]=r.NodeFlag.IsMovable,t[m]=0,u[m]=0;C.set(p.attributes[e.mockOidFieldName],m);n[m]={feature:p,typeName:l};m++});let R=!1;b.forEach(l=>{const p=C.get(l.feature.attributes[e.mockOriginIdFieldName]),
k=C.get(l.feature.attributes[e.mockDestinationIdFieldName]);void 0!==p&&void 0!==k?(N[H]=p,O[H]=k,H++):(R=!0,this.linkChartDiagramLookup.set(l.feature.attributes[e.mockOriginIdFieldName],null),this.linkChartGeohashLookup.set(l.feature.attributes[e.mockOriginIdFieldName],null))});R&&F.getLogger(this).warn("A relationship is a member of this layer that has either origin or destination entity nodes that are not members. The diagram geometry will be set to null");await r.load();if(!f(z,t,u,N,O))throw new E("knowledge-graph:layout-failed",
"Attempting to arrange the records in the specified layout failed");for(f=0;f<n.length;f++){z[f]===r.NodeFlag.IsMovable&&(t[f]*=P,u[f]*=Q);84.9999<u[f]&&(u[f]=84.9999);-84.9999>u[f]&&(u[f]=-84.9999);179.9999<t[f]&&(t[f]=179.9999);-179.9999>t[f]&&(t[f]=-179.9999);n[f].feature.attributes[e.mockLayoutGeometryFieldName]=new L(t[f],u[f]);if(h.has(n[f].typeName))h.get(n[f].typeName)?.set(n[f].feature.attributes[e.mockOidFieldName],n[f].feature);else{var D=new Map;D.set(n[f].feature.attributes[e.mockOidFieldName],
n[f].feature);h.set(n[f].typeName,D)}q.set(n[f].feature.attributes[e.mockOidFieldName],n[f].feature);D=A.convertFromGeometry(n[f].feature.attributes[e.mockLayoutGeometryFieldName]);this.linkChartDiagramLookup.set(n[f].feature.attributes[e.mockOidFieldName],n[f].feature.attributes[e.mockLayoutGeometryFieldName]?D:null);this.linkChartGeohashLookup.set(n[f].feature.attributes[e.mockOidFieldName],B.encodeGeohash(n[f].feature.attributes[e.mockLayoutGeometryFieldName].y,n[f].feature.attributes[e.mockLayoutGeometryFieldName].x,
e.geohashEncodingPrecision));n[f].feature.attributes[e.mockLayoutGeometryFieldName].x<y.xmin&&(y.xmin=n[f].feature.attributes[e.mockLayoutGeometryFieldName].x);n[f].feature.attributes[e.mockLayoutGeometryFieldName].x>y.xmax&&(y.xmax=n[f].feature.attributes[e.mockLayoutGeometryFieldName].x);n[f].feature.attributes[e.mockLayoutGeometryFieldName].y<y.ymin&&(y.ymin=n[f].feature.attributes[e.mockLayoutGeometryFieldName].y);n[f].feature.attributes[e.mockLayoutGeometryFieldName].y>y.ymax&&(y.ymax=n[f].feature.attributes[e.mockLayoutGeometryFieldName].y)}this.linkChartExtent.xmin=
y.xmin;this.linkChartExtent.xmax=y.xmax;this.linkChartExtent.ymin=y.ymin;this.linkChartExtent.ymax=y.ymax;b.forEach(l=>{var p=n[C.get(l.feature.attributes[e.mockOriginIdFieldName])]?.feature.attributes[e.mockLayoutGeometryFieldName];const k=n[C.get(l.feature.attributes[e.mockDestinationIdFieldName])]?.feature.attributes[e.mockLayoutGeometryFieldName];p&&k&&(p=new M({paths:[[p.x,p.y],[k.x,k.y]]}),l.feature.attributes[e.mockLayoutGeometryFieldName]=p,g.has(l.typeName)?g.get(l.typeName)?.set(l.feature.attributes[e.mockOidFieldName],
l.feature):(p=new Map,p.set(l.feature.attributes[e.mockOidFieldName],l.feature),g.set(l.typeName,p)),q.set(l.feature.attributes[e.mockOidFieldName],l.feature),p=A.convertFromGeometry(l.feature.attributes[e.mockLayoutGeometryFieldName]),this.linkChartDiagramLookup.set(l.feature.attributes[e.mockOidFieldName],l.feature.attributes[e.mockLayoutGeometryFieldName]?p:null),this.linkChartGeohashLookup.set(l.feature.attributes[e.mockOidFieldName],""))});this._currentLinkChartConfig={layoutMode:a,xScaleFactor:P,
yScaleFactor:Q};return{nodes:h,links:g,idMap:q}}async applyNewLinkChartLayout(a="RADIAL_TREE",d){const c=[];await this.calculateLinkChartLayout(a,d);this.layers.forEach(b=>{c.push(b.refreshCachedQueryEngine())});await Promise.all(c);this._refreshNamedTypes()}getCurrentNodeLocations(){const a=new Map;this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach(d=>{d?.members?.forEach(c=>{var b=c.linkChartLocation;const h=c.id;b&&("x"in b?(c=b.x,b=b.y):(c=b.coords[0],b=b.coords[1]),a.set(h,
new L({x:c,y:b})))})});return a}async synchronizeInclusionListWithCache(){return new Promise(a=>{this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.forEach((d,c)=>{d.useAllData=!1;if(d.members&&0<d.members.size&&this.dataManager.sublayerCaches.get(c)){var b=new Set(Array.from(this.dataManager.sublayerCaches.get(c).keys()));Array.from(d.members.keys()).filter(h=>!b.has(h)).forEach(h=>{d.members?.delete(h)})}});a()})}async refreshLinkChartCache(a){await this.dataManager.refreshCacheContent(a);
const d=[];this.layers.forEach(c=>{d.push(c.refreshCachedQueryEngine())});await Promise.all(d);this._refreshNamedTypes()}async _handleNewRecords(a){var d=[];this.dataManager.addToLayer(a);for(var c of a)this.sublayerIdsCache.has(c.typeName)||(this.sublayerIdsCache.set(c.typeName,new Set),d.push(c.typeName)),this.sublayerIdsCache.get(c.typeName).add(c.id);for(const b of d)this._graphTypeLookup.has(b)&&(c=this._graphTypeLookup.get(b),d="endPoints"in c?"relationship":"entity",c=new G({objectType:c,parentCompositeLayer:this,
graphType:d,title:b}),"entity"===d?this.dataManager.entityTypeNames.add(b):this.dataManager.relationshipTypeNames.add(b),c.geometryType?this.layers.push(c):this.tables.push(c),this.dataManager.sublayerCaches.set(b,new Map));await this.dataManager.refreshCacheContent(a.map(b=>b.id));await this.applyNewLinkChartLayout(this._currentLinkChartConfig.layoutMode,{xScaleFactor:this._currentLinkChartConfig.xScaleFactor,yScaleFactor:this._currentLinkChartConfig.xScaleFactor})}async _initializeDiagram(){this.defaultLinkChartConfig?
this.defaultLinkChartConfig.doNotRecalculateLayout?(this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach(a=>{a?.members?.forEach(d=>{var c=d.linkChartLocation;d=d.id;if(c){c="x"in c?{x:c.x,y:c.y}:{x:c.coords[0],y:c.coords[1]};var b=A.convertFromGeometry(c);this.linkChartDiagramLookup.set(d,b);this.linkChartGeohashLookup.set(d,B.encodeGeohash(c.x,c.y,e.geohashEncodingPrecision));this.linkChartExtent.xmin>c.x&&(this.linkChartExtent.xmin=c.x);this.linkChartExtent.xmax<c.x&&(this.linkChartExtent.xmax=
c.x);this.linkChartExtent.ymin>c.y&&(this.linkChartExtent.ymin=c.y);this.linkChartExtent.ymax<c.y&&(this.linkChartExtent.ymax=c.y)}})}),this.memberRelationshipTypes.forEach(a=>{a.name&&this.dataManager.sublayerCaches.get(a.name)?.forEach(d=>{var c=this.linkChartDiagramLookup.get(d.attributes[e.mockOriginIdFieldName]);const b=this.linkChartDiagramLookup.get(d.attributes[e.mockDestinationIdFieldName]);c&&b?(c=A.convertFromGeometry(new M({paths:[[c.coords[0],c.coords[1]],[b.coords[0],b.coords[1]]]})),
this.linkChartDiagramLookup.set(d.attributes[e.mockOidFieldName],c)):this.linkChartDiagramLookup.set(d.attributes[e.mockOidFieldName],null);this.linkChartGeohashLookup.set(d.attributes[e.mockOidFieldName],"")})})):await this.calculateLinkChartLayout(this.defaultLinkChartConfig.layoutMode,{xScaleFactor:this.defaultLinkChartConfig.xScaleFactor,yScaleFactor:this.defaultLinkChartConfig.yScaleFactor,lockedNodeLocations:this.getCurrentNodeLocations()}):await this.calculateLinkChartLayout("RADIAL_TREE",
{lockedNodeLocations:this.getCurrentNodeLocations()})}_refreshNamedTypes(){for(const a of this.layers)a.emit("refresh",{dataChanged:!0});for(const a of this.tables)a.emit("refresh",{dataChanged:!0})}};w.__decorate([x.property()],v.prototype,"dataPreloadedInLocalCache",void 0);w.__decorate([x.property()],v.prototype,"defaultLinkChartConfig",void 0);w.__decorate([x.property()],v.prototype,"dataManager",void 0);w.__decorate([x.property()],v.prototype,"knowledgeGraph",void 0);w.__decorate([x.property()],
v.prototype,"layers",void 0);w.__decorate([x.property()],v.prototype,"linkChartDiagramLookup",void 0);w.__decorate([x.property()],v.prototype,"linkChartExtent",void 0);w.__decorate([x.property()],v.prototype,"linkChartGeohashLookup",void 0);w.__decorate([x.property()],v.prototype,"memberEntityTypes",void 0);w.__decorate([x.property()],v.prototype,"memberRelationshipTypes",void 0);w.__decorate([x.property()],v.prototype,"sublayerIdsCache",void 0);w.__decorate([x.property()],v.prototype,"tables",void 0);
w.__decorate([x.property({json:{read:!1}})],v.prototype,"type",void 0);return v=w.__decorate([T.subclass("esri.layers.LinkChartLayer")],v)});