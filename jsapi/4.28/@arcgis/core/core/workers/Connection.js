/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{h as s}from"../../chunks/handleUtils.js";import{L as e}from"../../chunks/Logger.js";import{isPromiseLike as t,createAbortError as i,createResolver as n,throwIfAborted as r}from"../promiseUtils.js";import{Q as o}from"../../chunks/Queue.js";import l from"./RemoteClient.js";import"../../config.js";import"../../chunks/typedArrayUtil.js";import"../lang.js";import"../Error.js";import"../../chunks/maybe.js";import"../../chunks/tracking.js";import"../../chunks/utils.js";import"../../chunks/SimpleObservable.js";import"../../chunks/ObservableBase.js";import"../../kernel.js";import"../urlUtils.js";import"../JSONSupport.js";import"../../chunks/tslib.es6.js";import"../Accessor.js";import"../Handles.js";import"../accessorSupport/decorators/subclass.js";import"../../chunks/metadata.js";import"../../chunks/ensureType.js";import"../accessorSupport/decorators/property.js";import"../../chunks/ObjectPool.js";import"../scheduling.js";import"../../chunks/nextTick.js";import"../../chunks/PooledArray.js";import"../../chunks/time.js";const h=new FinalizationRegistry((s=>{s.close()}));function c(s,e){h.register(s,e,e)}class m{constructor(){this._inUseClients=new Array,this._clients=new Array,this._clientPromises=new Array,this._ongoingJobsQueue=new o}destroy(){this.close()}get closed(){return!this._clients?.length}open(s,e){return new Promise(((i,n)=>{let o=!0;const h=s=>{r(e.signal),o&&(o=!1,s())};this._clients.length=s.length,this._clientPromises.length=s.length,this._inUseClients.length=s.length;for(let r=0;r<s.length;++r){const o=s[r];t(o)?this._clientPromises[r]=o.then((s=>(this._clients[r]=new l(s,e,this._ongoingJobsQueue),h(i),this._clients[r])),(()=>(h(n),null))):(this._clients[r]=new l(o,e,this._ongoingJobsQueue),this._clientPromises[r]=Promise.resolve(this._clients[r]),h(i))}}))}broadcast(s,e,t){const i=new Array(this._clientPromises.length);for(let n=0;n<this._clientPromises.length;++n){const r=this._clientPromises[n];i[n]=r.then((i=>i?.invoke(s,e,t)))}return i}close(){let s;for(;s=this._ongoingJobsQueue.pop();)s.resolver.reject(i(`Worker closing, aborting job calling '${s.methodName}'`));for(const s of this._clientPromises)s.then((s=>s?.close()));this._clients.length=0,this._clientPromises.length=0,this._inUseClients.length=0,h.unregister(this)}invoke(s,t,i){let r;Array.isArray(i)?(e.getLogger("esri.core.workers.Connection").warn("invoke()","The transferList parameter is deprecated, use the options object instead"),r={transferList:i}):r=i;const o=n();this._ongoingJobsQueue.push({methodName:s,data:t,invokeOptions:r,resolver:o});for(let s=0;s<this._clientPromises.length;s++){const e=this._clients[s];e?e.jobAdded():this._clientPromises[s].then((s=>s?.jobAdded()))}return o.promise}on(e,t){return Promise.all(this._clientPromises).then((()=>s(this._clients.map((s=>s.on(e,t))))))}openPorts(){return new Promise((s=>{const e=new Array(this._clientPromises.length);let t=e.length;for(let i=0;i<this._clientPromises.length;++i)this._clientPromises[i].then((n=>{n&&(e[i]=n.openPort()),0==--t&&s(e)}))}))}get test(){return{numClients:this._clients.length}}}export{m as default,c as r};
