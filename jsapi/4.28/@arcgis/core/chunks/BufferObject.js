/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{e,g as t,z as s}from"./typedArrayUtil.js";import{L as i}from"./Logger.js";import{c as r}from"./Texture.js";import{C as n}from"./contextUtils.js";import{B as a,U as o,d as f,D as u}from"./enums3.js";const _=i.getLogger("esri.views.webgl.BufferObject");class h{static createIndex(e,t,s){return new h(e,a.ELEMENT_ARRAY_BUFFER,t,s)}static createVertex(e,t,s){return new h(e,a.ARRAY_BUFFER,t,s)}static createUniform(e,t,s){if(e.type!==n.WEBGL2)throw new Error("Uniform buffers are supported in WebGL2 only!");return new h(e,a.UNIFORM_BUFFER,t,s)}static createPixelPack(e,t=o.STREAM_READ,s){if(e.type!==n.WEBGL2)throw new Error("Pixel pack buffers are supported in WebGL2 only!");const i=new h(e,a.PIXEL_PACK_BUFFER,t);return s&&i.setSize(s),i}static createPixelUnpack(e,t=o.STREAM_DRAW,s){if(e.type!==n.WEBGL2)throw new Error("Pixel unpack buffers are supported in WebGL2 only!");return new h(e,a.PIXEL_UNPACK_BUFFER,t,s)}constructor(e,t,s,i){this._context=e,this.bufferType=t,this.usage=s,this._glName=null,this._size=-1,this._indexType=void 0,e.instanceCounter.increment(f.BufferObject,this),this._glName=this._context.gl.createBuffer(),r(this._context.gl),i&&this.setData(i)}get glName(){return this._glName}get size(){return this._size}get indexType(){return this._indexType}get byteLength(){return this.bufferType===a.ELEMENT_ARRAY_BUFFER?this._indexType===u.UNSIGNED_INT?4*this._size:2*this._size:this._size}get _isVAOAware(){return this.bufferType===a.ELEMENT_ARRAY_BUFFER||this.bufferType===a.ARRAY_BUFFER}dispose(){this._context?.gl?(this._glName&&(this._context.gl.deleteBuffer(this._glName),this._glName=null),this._context.instanceCounter.decrement(f.BufferObject,this),this._context=null):this._glName&&_.warn("Leaked WebGL buffer object")}setSize(e,t=null){if(e<=0&&_.error("Buffer size needs to be positive!"),this.bufferType===a.ELEMENT_ARRAY_BUFFER&&null!=t)switch(this._indexType=t,t){case u.UNSIGNED_SHORT:e*=2;break;case u.UNSIGNED_INT:e*=4}this._setBufferData(e)}setData(s){if(!s)return;let i=s.byteLength;this.bufferType===a.ELEMENT_ARRAY_BUFFER&&(e(s)&&(i/=2,this._indexType=u.UNSIGNED_SHORT),t(s)&&(i/=4,this._indexType=u.UNSIGNED_INT)),this._setBufferData(i,s)}_setBufferData(e,t=null){this._size=e;const s=this._context.getBoundVAO();this._isVAOAware&&this._context.bindVAO(null),this._context.bindBuffer(this);const i=this._context.gl;null!=t?i.bufferData(this.bufferType,t,this.usage):i.bufferData(this.bufferType,e,this.usage),r(i),this._isVAOAware&&this._context.bindVAO(s)}setSubData(e,t,s,i){if(!e)return;(t<0||t*e.BYTES_PER_ELEMENT>=this.byteLength)&&_.error("offset is out of range!"),s>=i&&_.error("end must be bigger than start!"),(t+(i-s))*e.BYTES_PER_ELEMENT>this.byteLength&&_.error("An attempt to write beyond the end of the buffer!");const a=this._context.getBoundVAO();this._isVAOAware&&this._context.bindVAO(null),this._context.bindBuffer(this);const o=this._context.gl;if(this._context.type===n.WEBGL2)o.bufferSubData(this.bufferType,t*e.BYTES_PER_ELEMENT,e,s,i-s);else{const r=0===s&&i===e.length?e:e.subarray(s,i);o.bufferSubData(this.bufferType,t*e.BYTES_PER_ELEMENT,r)}r(o),this._isVAOAware&&this._context.bindVAO(a)}getSubData(e,t=0,i,r){if(this._context.type!==n.WEBGL2)return void _.error("Get buffer subdata is supported in WebGL2 only!");if(i<0||r<0)return void _.error("Problem getting subdata: offset and length were less than zero!");const o=s(e)?e.BYTES_PER_ELEMENT:1;if(o*((i??0)+(r??0))>e.byteLength)return void _.error("Problem getting subdata: offset and length exceeded destination size!");t+o*(r??0)>this.byteLength&&_.warn("Potential problem getting subdata: requested data exceeds buffer size!");const f=this._context.gl;this._context.bindBuffer(this,a.COPY_READ_BUFFER),f.getBufferSubData(a.COPY_READ_BUFFER,t,e,i,r),this._context.unbindBuffer(a.COPY_READ_BUFFER)}async getSubDataAsync(e,t=0,s,i){this._context.type===n.WEBGL2?(await this._context.clientWaitAsync(),this.getSubData(e,t,s,i)):_.error("Get buffer subdata is supported in WebGL2 only!")}}export{h as B};
