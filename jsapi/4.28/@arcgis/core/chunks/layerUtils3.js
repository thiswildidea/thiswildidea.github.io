/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{_ as e}from"./tslib.es6.js";import t from"../core/Error.js";import{L as a}from"./Logger.js";import"./ensureType.js";import{y as r}from"./typedArrayUtil.js";import{subclass as i}from"../core/accessorSupport/decorators/subclass.js";import{c as s,a as n}from"./generateRendererUtils.js";import{b as o,e as l,r as u,m,l as c,n as p,o as d,q as h,s as y}from"./utils11.js";import{open as f}from"../core/workers/workers.js";import{g,i as w,a as F}from"./utils2.js";import{b as S}from"./maybe.js";import{timeout as v,throwIfAborted as x}from"../core/promiseUtils.js";import{property as _}from"../core/accessorSupport/decorators/property.js";import{i as q}from"./arcgisLayerUrl.js";import{isTimeOnlyField as L,isNumericField as V}from"../layers/support/fieldUtils.js";import z from"../request.js";import{fromJSON as T}from"../renderers/support/jsonUtils.js";import{e as E}from"./executeQuery.js";import{p as C}from"./utils6.js";import"../kernel.js";import"../core/urlUtils.js";import"../rest/query/support/AttachmentInfo.js";import"../rest/support/AttachmentQuery.js";import"../geometry/Extent.js";import"../geometry/Geometry.js";import"../geometry/Multipoint.js";import"../geometry/Point.js";import"../geometry/Polygon.js";import"../geometry/Polyline.js";import"../geometry/support/normalizeUtils.js";import"./unitUtils.js";import"./pbf.js";import b from"../rest/support/Query.js";import"../geometry.js";import N from"../rest/support/FeatureSet.js";import"./featureConversionUtils.js";import"../rest/support/RelationshipQuery.js";import"../rest/support/TopFeaturesQuery.js";import M from"../rest/support/StatisticDefinition.js";import{JSONSupport as I}from"../core/JSONSupport.js";import{e as k}from"./enumeration.js";import{getArcadeForPredominantCategory as j,getSQLForPredominantCategoryName as A}from"../smartMapping/statistics/support/predominanceUtils.js";import{whenOnce as O}from"../core/reactiveUtils.js";import{t as Q}from"./quantizationUtils.js";import{k as P}from"./fieldType.js";import{Q as R}from"./QuantizationParameters.js";import{summaryStatistics as B,uniqueValues as J,histogram as D,classBreaks as G,heatmapStatistics as $}from"./statsWorker.js";import U from"../core/Loadable.js";import{e as Z,g as W,a as H,b as X,c as K,u as Y,d as ee,f as te,h as ae,i as re,j as ie,k as se,l as ne,m as oe,n as le,o as ue,p as me,q as ce}from"./utils13.js";import{l as pe}from"./arcadeOnDemand.js";import de from"../Graphic.js";class he{constructor(){this.connection=null}async open(e){this.connection=await f("statsWorker",{strategy:"distributed",signal:e})}destroy(){this.connection?.close()}static getInstance(){return he.instance||(he.instance=new he),he.instance}async summaryStatistics(e,a){if(!this.connection)throw new t("worker-client:summary-statistics","connection is required");return this.connection.invoke("summaryStatistics",{attribute:e,features:a})}async uniqueValues(e,a){if(!this.connection)throw new t("worker-client:unique-values","connection is required");return this.connection.invoke("uniqueValues",{attribute:e,features:a})}async classBreaks(e,a){if(!this.connection)throw new t("worker-client:class-breaks","connection is required");return this.connection.invoke("classBreaks",{attribute:e,features:a})}async histogram(e,a){if(!this.connection)throw new t("worker-client:histogram","connection is required");return this.connection.invoke("histogram",{attribute:e,features:a})}async heatmapStatistics(e,a){if(!this.connection)throw new t("worker-client:heatmap-statistics","connection is required");return this.connection.invoke("heatmapStatistics",{attribute:e,features:a})}}function ye(e,t,a){if("classBreaks"===e.type){const r=T(e);return{classBreaks:r.classBreakInfos.map(((e,i)=>(0===i&&null!=t&&(e.minValue=t),i===r.classBreakInfos.length-1&&null!=a&&(e.maxValue=a),{minValue:e.minValue,maxValue:e.maxValue,label:e.label}))),normalizationTotal:r.normalizationTotal}}const{uniqueValueInfos:r}=e;return{uniqueValues:r?.map(((e,i)=>(0===i&&null!=t&&(e.value=t),i===r.length-1&&null!=a&&(e.value=a),{count:e.count,value:e.value,label:e.label})))??[]}}let fe=class extends I{constructor(e){super(e),this.classificationDefinition=null,this.where=null}};e([_({json:{name:"classificationDef",write:!0}})],fe.prototype,"classificationDefinition",void 0),e([_({type:String,json:{write:!0}})],fe.prototype,"where",void 0),fe=e([i("esri.rest.support.GenerateRendererParameters")],fe);const ge=fe;let we=class extends I{constructor(e){super(e),this.type="unique-value-definition",this.attributeField=null,this.attributeField2=null,this.attributeField3=null,this.fieldDelimiter=null}get uniqueValueFields(){const e=[];return this.attributeField&&e.push(this.attributeField),this.attributeField2&&e.push(this.attributeField2),this.attributeField3&&e.push(this.attributeField3),e}};e([k({uniqueValueDef:"unique-value-definition"})],we.prototype,"type",void 0),e([_()],we.prototype,"attributeField",void 0),e([_()],we.prototype,"attributeField2",void 0),e([_()],we.prototype,"attributeField3",void 0),e([_({json:{write:!0}})],we.prototype,"fieldDelimiter",void 0),e([_({json:{write:!0}})],we.prototype,"uniqueValueFields",null),we=e([i("esri.rest.support.UniqueValueDefinition")],we);const Fe=we;let Se=class extends U{constructor(e){super(e)}};e([_({constructOnly:!0})],Se.prototype,"layer",void 0),e([_()],Se.prototype,"geometryType",void 0),e([_()],Se.prototype,"objectIdField",void 0),e([_()],Se.prototype,"supportsSQLExpression",void 0),e([_()],Se.prototype,"hasQueryEngine",void 0),e([_()],Se.prototype,"minScale",void 0),e([_()],Se.prototype,"maxScale",void 0),e([_()],Se.prototype,"fullExtent",void 0),Se=e([i("esri.smartMapping.support.adapters.LayerAdapter")],Se);const ve=Se;let xe=null,_e=class extends ve{constructor(){super(...arguments),this._hasLocalSource=!1,this.adapterName="in-memory-layer-adapter"}destroy(){this.workerClient?.destroy()}async _waitForLayerViewUpdate(e){if(!e)throw new t(`${this.adapterName}:insufficient-data", "layerView is required to fetch the features`);const r=new AbortController,i=O((()=>!e.updating),r.signal);await v(i,5e3,r).catch((e=>{throw a.getLogger(this).warn("LayerView is taking too long to update. Aborting fetch from layerView."),e}))}async _fetchFeatureSetFromMemory(e,a,r){const i=this.layer;if(this._hasLocalSource)return i.queryFeatures(e);if(!a)throw new t(`${this.adapterName}:insufficient-data`,"view is required to fetch the features from layerView");const s=await a.whenLayerView(this.layer);return await this._waitForLayerViewUpdate(s),s.queryFeatures(e,{signal:r})}async _fetchFeaturesFromMemory(e,a,r,i){const s=this.layer,n="json"===i;if(this._hasLocalSource){const e=await s.queryFeatures(a);return n?Z(e.features):e.features}if(await this._waitForLayerViewUpdate(e),n&&"queryFeaturesJSON"in e&&e.queryFeaturesJSON){const{features:t}=await e.queryFeaturesJSON(a,{signal:r});return t}if(!("queryFeatures"in e))throw new t(`${this.adapterName}:not-supported`,"'queryFeatures' is not supported on the layerView");const o=await e.queryFeatures(a,{signal:r});return n?Z(o.features):o.features}_fetchFeaturesForStats(e,t){return g({field:e.field,field2:e.field2,field3:e.field3,normalizationField:e.normalizationField,valueExpression:e.valueExpression}).then((a=>this.getSampleFeatures({sampleSize:-1,view:e.view,returnGeometry:e.returnGeometry,filter:e.filter,requiredFields:a,signal:e.signal},t)))}async _summaryStatsFromClientQuery(e,t){const{view:a,signal:r}=e,i=W(this,e,t),s=await this._fetchFeatureSetFromMemory(i,a,r),n=H(s,w(t)||L(t));return o(n)}async _getNormalizationTotalFromMemory(e,a,r){const{featuresJSON:i,graphics:s,layerView:n,query:o}=a,l=(!i&&!s&&n&&"querySummaryStatistics"in n?await n.querySummaryStatistics(o,{field:e},{signal:r}):i?await this.workerClient.summaryStatistics({field:e},i):await B({attribute:{field:e},features:s??[]})).sum;if(null==l)throw new t(`${this.adapterName}:invalid`,"invalid normalizationTotal");return l}async _summaryStatsFromMemory(e,t){const{view:a,field:r,valueExpression:i,normalizationType:s,signal:n}=e,o={field:r,valueExpression:i,normalizationType:s,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue},{featuresJSON:l,graphics:u,layerView:m,query:c,fieldInfos:p}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"querySummaryStatistics"});return i&&a&&(l||u)&&(o.fieldType=t?.type?P.toJSON(t.type):null,o.viewInfoParams=X(a),o.timeZone=a.timeZone,o.fieldInfos=p),"percent-of-total"===s&&null==e.normalizationTotal&&(o.normalizationTotal=await this._getNormalizationTotalFromMemory(r,{featuresJSON:l,graphics:u,layerView:m,query:c},n)),!l&&!u&&m&&"querySummaryStatistics"in m?m.querySummaryStatistics(c,o,{signal:n}):l?this.workerClient.summaryStatistics(o,l):B({attribute:o,features:u})}async _getFilteredFeatures(e,t){let a=[];if("intersects"===t?.spatialRelationship){const{intersect:r}=await import("../geometry/geometryEngineAsync.js"),i=null!=t.geometry?t.geometry:null;for(const t of e){const e=null!=t.geometry?t.geometry:null;e&&i&&await r(e,i)&&a.push(t)}}else a=e;return e.length&&"declaredClass"in e[0]&&"esri.Graphic"===e[0].declaredClass?{graphics:a}:{featuresJSON:a}}async _processStatsFromMemoryParams(e){const{features:t,filter:a}=e;if(t?.length)return this._getFilteredFeatures(t,a);const{view:r,field:i,field2:s,field3:n,normalizationField:o,valueExpression:l,layerViewFunc:u,signal:m}=e;let c=e.returnGeometry;if(null==c&&l){if(!xe){const{arcadeUtils:e}=await pe();xe=e}const e=xe.hasGeometryOperations(l);e&&await xe.enableGeometryOperations(),c=e}let p=null,d=null,h=null,y=null,f=null;if(r)try{p=await r.whenLayerView(this.layer),d=null!=u&&u in p&&"function"==typeof p[u]}catch{d=!1}if(d)try{await this._waitForLayerViewUpdate(p);const e=await g({field:i,field2:s,field3:n,normalizationField:o,valueExpression:l});K(this,e,p).length?d=!1:(h=this.layer.createQuery(),h.outFields=e,h.returnGeometry=!1,Y(h,a)),p.suspended&&(d=!1)}catch{d=!1}return d||(y=await this._fetchFeaturesForStats({field:i,field2:s,field3:n,valueExpression:l,normalizationField:o,returnGeometry:c,filter:a,view:r,signal:m},"json"),f=(await g({valueExpression:l})).map((e=>this.getField(e)?.toJSON())).filter(Boolean)),{layerView:p,query:h,featuresJSON:y,fieldInfos:f}}async _uvFromClientQuery(e,t){const{view:a,signal:r}=e,i=ee(this,e),s=await this._fetchFeatureSetFromMemory(i,a,r),n=await te(s,{layer:this,field:e.field,field2:e.field2,field3:e.field3,fieldDelimiter:F,view:e.view,signal:e.signal});return l(n,t,e.returnAllCodedValues,F)}async _uvFromMemory(e,t){const{view:a,field:r,valueExpression:i,returnAllCodedValues:s,signal:n}=e,{featuresJSON:o,graphics:l,layerView:u,query:m,fieldInfos:c}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryUniqueValues"}),p={field:r,field2:e.field2,field3:e.field3,fieldDelimiter:F,valueExpression:i,domains:t,returnAllCodedValues:s};return i&&a&&(o||l)&&(p.viewInfoParams=X(a),p.timeZone=a.timeZone,p.fieldInfos=c),!o&&!l&&u&&"queryUniqueValues"in u?u.queryUniqueValues(m,p,{signal:n}):o?this.workerClient.uniqueValues(p,o):J({attribute:p,features:l})}_histogramForField(e){let a=null;return a=null!=e.minValue&&null!=e.maxValue?Promise.resolve({min:e.minValue,max:e.maxValue}):this.summaryStatistics(e).then((e=>{if(!e.count)throw new t(`${this.adapterName}:insufficient-data`,"Either the layer has no features or none of the features have data for the field");return{min:e.min,max:e.max}})),a.then((t=>ae(this,{min:t.min,max:t.max},e.field,e.numBins??void 0,e.view,e.filter,e.signal)))}async _histogramFromMemory(e){const{view:t,field:a,valueExpression:r,signal:i}=e,{featuresJSON:s,graphics:n,layerView:o,query:l,fieldInfos:u}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryHistogram"}),m={field:a,valueExpression:r,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numBins:e.numBins};return r&&t&&(s||n)&&(m.viewInfoParams=X(t),m.timeZone=t.timeZone,m.fieldInfos=u),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(m.normalizationTotal=await this._getNormalizationTotalFromMemory(a,{featuresJSON:s,graphics:n,layerView:o,query:l},i)),!s&&!n&&o&&"queryHistogram"in o?o.queryHistogram(l,m,{signal:i}):s?this.workerClient.histogram(m,s):D({attribute:m,features:n})}_classBreaksFromInterpolation(e){const{minValue:t,maxValue:a}=e,r=e.numClasses||5,i=[],s=(a-t)/r;for(let e=0;e<r;e++){const a=t+e*s;i.push({minValue:a,maxValue:a+s})}i[r-1].maxValue=a;const n={classBreaks:i,normalizationTotal:e.normalizationTotal},o=u(n,e.classificationMethod);return Promise.resolve(o)}async _classBreaksFromMemory(e){const{view:t,field:a,valueExpression:r,signal:i}=e,{featuresJSON:s,graphics:n,layerView:o,query:l,fieldInfos:u}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryClassBreaks"}),m={field:a,valueExpression:r,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numClasses:e.numClasses};return r&&t&&(s||n)&&(m.viewInfoParams=X(t),m.timeZone=t.timeZone,m.fieldInfos=u),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(m.normalizationTotal=await this._getNormalizationTotalFromMemory(a,{featuresJSON:s,graphics:n,layerView:o,query:l},i)),!s&&!n&&o&&"queryClassBreaks"in o?o.queryClassBreaks(l,m,{signal:i}):s?this.workerClient.classBreaks(m,s):G({attribute:m,features:n})}async _heatmapStatsFromMemory(e,t){const{view:a,field:r,radius:i}=e,{featuresJSON:s,graphics:n}=await this._processStatsFromMemoryParams({...e,returnGeometry:!0});S(a,"InMemoryLayerAdapter: must have a view");const o=new R({extent:a.extent,tolerance:"2d"===a.type?a.state.resolution:a.pixelSizeAt?.(a.center)}),l={field:r,fieldOffset:t,radius:i,transform:Q(o),spatialReference:a.spatialReference?.toJSON(),size:a.size};return s?.length||n?.length?s?this.workerClient.heatmapStatistics(l,s):$({attribute:l,features:n}):{count:0,min:null,max:null,avg:null,stddev:null}}getField(e=""){return this.layer.getField(e)}getFieldUsageInfo(e){return this.getField(e)?{supportsLabelingInfo:!0,supportsRenderer:!0,supportsPopupTemplate:!0,supportsLayerQuery:!0,supportsStatistics:!0}:null}getFieldDomain(e,t){return this.layer.getFieldDomain(e,t)}createQuery(){return this.layer.createQuery()}async summaryStatistics(e){const{field:a,valueExpression:r,sqlExpression:i,features:s,view:n}=e,o=a?this.getField(a):null,l=!!r,u="3d"===n?.type;if(!r&&i&&!this.supportsSQLExpression)throw new t(`${this.adapterName}:not-supported`,"Layer does not support standardized SQL expression for queries");return l||s||u?this._summaryStatsFromMemory(e,o):this._summaryStatsFromClientQuery(e,o)}async uniqueValues(e){const{valueExpression:a,sqlExpression:r,features:i,view:s}=e,n=await re(e,this),o=!!a,l="3d"===s?.type;if(!a&&r&&!this.supportsSQLExpression)throw new t(`${this.adapterName}:not-supported`,"Layer does not support standardized SQL expression for queries");return o||i||l?this._uvFromMemory(e,n):this._uvFromClientQuery(e,n)}async histogram(e){const{features:a,valueExpression:r,normalizationType:i,sqlExpression:s}=e,n=a||!!r;if(!r&&s&&!this.supportsSQLExpression)throw new t(`${this.adapterName}:not-supported`,"Layer does not support standardized SQL expression for queries");return n||i?this._histogramFromMemory(e):this._histogramForField(e)}async classBreaks(e){return!1!==e.analyzeData?this._classBreaksFromMemory(e):this._classBreaksFromInterpolation(e)}async queryFeatureCount(e){const{whereClause:a,view:r,signal:i}=e;if(!r)throw new t(`${this.adapterName}:insufficient-data`,"view is required to fetch the features from layerView");const s=this.layer.createQuery();s.where=m(s.where,a);const n=await r.whenLayerView(this.layer);return await O((()=>!n.updating),i),n.queryFeatureCount(s,{signal:i})}async generateRenderer(e,a){throw new t(`${this.adapterName}:not-supported`,"Layer does not support generateRenderer operation")}async predominantCategories(e){const{fields:t,view:a,signal:r}=e,i=j(t),s=await this._uvFromMemory({valueExpression:i,view:a,signal:r});return ie(s.uniqueValueInfos,t)}async heatmapStatistics(e){const{field:t,fieldOffset:a,view:r,signal:i}=e;return(t&&null==a?this.summaryStatistics({field:t,view:r,signal:i}):Promise.resolve(null)).then((t=>{let r=a||0;if(t){const{count:e,min:a,max:i}=t;e?a===i&&0===a?r=1:i<=0?r="abs":a<0&&(r=-1.01*a):r=1}return this._heatmapStatsFromMemory(e,r).then((e=>({...e,summaryStatistics:t,fieldOffset:r})))}))}async getSampleFeatures(e,a){const{view:i,sampleSize:s,requiredFields:n,returnGeometry:o,filter:l,signal:u}=e,m=this.layer.createQuery();if(m.outSpatialReference=e.spatialReference||i?.spatialReference,m.returnGeometry=!!o,m.outFields=n,Y(m,l),!i)throw new t(`${this.adapterName}:not-supported`,"view is required to get sample features for Layer");const c=await i.whenLayerView(this.layer);if(K(this,n,c).length)throw new t(`${this.adapterName}:not-supported`,"Required fields need to be passed in the outFields for Layer");const p=await this._fetchFeaturesFromMemory(c,m,u,a),d=null!=s&&s>0&&s<=p.length?s:p.length;return r(p,d,1)}load(e){const t=this.layer.load(e).then((async t=>{this.geometryType=t.geometryType,this.objectIdField=t.objectIdField,this.supportsSQLExpression=t.capabilities?.query?.supportsSqlExpression,this.minScale=t.minScale,this.maxScale=t.maxScale,this.fullExtent=t.fullExtent,this._hasLocalSource=!1,this.hasQueryEngine=!0,this.workerClient=he.getInstance(),await this.workerClient.open(e.signal)}));return this.addResolvingPromise(t),Promise.resolve(this)}};e([_({constructOnly:!0})],_e.prototype,"layer",void 0),_e=e([i("esri.smartMapping.support.adapters.InMemoryLayerAdapter")],_e);const qe=_e;let Le=class extends qe{constructor(){super(...arguments),this.adapterName="feature-layer-adapter"}_isStatsSupportedOnService(){const e=this.layer;if(!e.capabilities?.query?.supportsStatistics||"multipatch"===this.geometryType&&!q(e.url)&&e.version<10.5)throw new t(`${this.adapterName}:not-supported`,"Layer does not support statistics query");return Promise.resolve()}_fetchFeaturesFromService(e,t){return this.layer.queryFeatures(e,{signal:t}).then((e=>e.features))}_fetchFeaturesJSONFromService(e,t){return this._fetchFeaturesFromService(e,t).then(Z)}_summaryStatsFromGenRend(e){const t=e.normalizationType,a=e.normalizationField;return this.classBreaks({field:e.field,numClasses:5,classificationMethod:"standard-deviation",standardDeviationInterval:.25,normalizationType:t,normalizationField:"field"===t?a:void 0,minValue:e.minValue,maxValue:e.maxValue,filter:e.filter,signal:e.signal}).then((e=>{let t,a,r;if(e.classBreakInfos?.some((e=>(e.hasAvg&&(t=e),!!t))),t){const e=t.maxValue-t.minValue;a=t.minValue+e/2,r=4*e}const i={min:e.minValue,max:e.maxValue,avg:a,stddev:r};return o(i)}))}async _summaryStatsFromServiceQuery(e,t){await this._isStatsSupportedOnService(),"percent-of-total"===e.normalizationType&&(e.normalizationTotal=await this._getNormalizationTotal(e.field,e.normalizationType,e.filter));const a=w(t)||L(t),r=W(this,e,t),i=await this.layer.queryFeatures(r,{signal:e.signal}),s=H(i,a);return o(s)}_uvFromGenRenderer(e,t){const a=e.field??void 0,r=new Fe;r.attributeField=a;const i=new ge;return i.classificationDefinition=r,this.generateRenderer(i,e.signal).then((e=>{const t={},r=this.getField(a);return e.uniqueValues.forEach((e=>{let a=e.value;null!=a&&""!==a&&("string"!=typeof a||""!==a.trim()&&"<null>"!==a.toLowerCase())||(a=null),null==t[a]?t[a]={count:e.count,data:V(r)&&a?Number(a):a}:t[a].count=t[a].count+e.count})),{count:t}})).then((a=>l(a,[t],e.returnAllCodedValues)))}async _uvFromServiceQuery(e,t){return this._isStatsSupportedOnService().then((()=>this.layer.queryFeatures(ee(this,e),{signal:e.signal}))).then((t=>te(t,{layer:this,field:e.field,field2:e.field2,field3:e.field3,fieldDelimiter:F,view:e.view,signal:e.signal}))).then((a=>l(a,t,e.returnAllCodedValues,F)))}_calcBinsSQL(e,t,a){const r=[],i=t.length;return t.forEach(((t,s)=>{const[n,o]=t;let l=null;l=0!==s||a?s!==i-1||a?m(`${e} >= ${n}`,`${e} ${s===i-1?" <= ":" < "} ${o}`):`${e} >= ${n}`:`${e} < ${o}`,r.push("WHEN ("+l+") THEN "+(s+1))})),["CASE",r.join(" "),"ELSE 0","END"].join(" ")}_getNormalizationTotal(e,t,a,r){return e&&"percent-of-total"===t?this.summaryStatistics({field:e,filter:a,signal:r}).then((e=>e.sum)):Promise.resolve(null)}_getQueryParamsForExpr(e,t){const a=e.valueExpression||e.sqlExpression,r=e.signal;if(!a){const{field:a,normalizationType:i,normalizationField:s}=e,n=a?this.getField(a):null,o=w(n)||L(n),l={field:a,normalizationType:i,normalizationField:s,normalizationTotal:t,layer:this};return{sqlExpression:o?se(this,n):ne(l),sqlWhere:o?null:e.sqlWhere||c({field:a,normalizationType:i,normalizationField:s}),filter:e.filter,signal:r}}return{valueExpression:e.valueExpression,sqlExpression:e.sqlExpression,sqlWhere:e.sqlWhere,filter:e.filter,signal:r}}_getDataRange(e,t,a){return null!=t&&null!=a?Promise.resolve({min:t,max:a}):this.summaryStatistics(e).then((e=>({min:e.min,max:e.max})))}_histogramForExpr(e){return this._getNormalizationTotal(e.field,e.normalizationType,e.filter,e.signal).then((t=>{const a=this._getQueryParamsForExpr(e,t);return this._getDataRange(a,e.minValue,e.maxValue).then((r=>{const i=r.min,s=r.max;if(null==i||null==s)return{bins:[],minValue:i,maxValue:s,normalizationTotal:t};const n=e.numBins||oe,o=p(i,s,n),l=this._calcBinsSQL(a.sqlExpression,o,null!=e.minValue&&null!=e.maxValue),u=new M({statisticType:"count",outStatisticFieldName:"countOFExpr",onStatisticField:"1"}),c=this.layer.createQuery();return c.where=m(c.where,a.sqlWhere),c.sqlFormat="standard",c.outStatistics=[u],c.groupByFieldsForStatistics=[l],c.orderByFields=[l],Y(c,e.filter),this._isStatsSupportedOnService().then((()=>this.layer.queryFeatures(c,{signal:a.signal}))).then((e=>le(e,i,s,n,t)))}))}))}_binParamsFromGenRend(e,t){const{field:a,normalizationType:r,normalizationField:i,signal:s}=e,n=c({field:a,normalizationType:r,normalizationField:i}),o=new ge({classificationDefinition:d({field:a,normalizationType:r,normalizationField:i,classificationMethod:e.classificationMethod,standardDeviationInterval:e.standardDeviationInterval,breakCount:e.numBins||oe}),where:m(n,t)});return this.generateRenderer(o,s).then((e=>{const{normalizationTotal:t,classBreaks:s}=e;return ue({field:a,normalizationType:r,normalizationField:i,normalizationTotal:t,classBreaks:s,where:n,layer:this})}))}_classBreaksFromGenRend(e){const{field:t,normalizationType:a,normalizationField:r,normalizationTotal:i,signal:s}=e,n=c({field:t,normalizationType:a,normalizationField:r}),o=ne({field:t,normalizationType:a,normalizationField:r,normalizationTotal:i,layer:this}),l=h(o,e.minValue,e.maxValue),p=d({field:t,normalizationType:a,normalizationField:r,classificationMethod:e.classificationMethod,standardDeviationInterval:e.standardDeviationInterval,breakCount:e.numClasses||5}),y=new ge;return y.classificationDefinition=p,y.where=m(n,l),this.generateRenderer(y,s).then((t=>u(t,e.classificationMethod)))}async summaryStatistics(e){const{field:a,normalizationType:r,sqlExpression:i,view:s,features:n,useFeaturesInView:o}=e,l=a?this.getField(a):null,u=w(l)||L(l),m=e.valueExpression||i,c=m&&!i,p=this._hasLocalSource||n||o,d=s&&"3d"===s.type;if(p||c)return c||n||o||d?this._summaryStatsFromMemory(e,l):this._summaryStatsFromClientQuery(e,l);if(!this.supportsSQLExpression&&(u||m||"natural-log"===r||"square-root"===r))throw new t(`${this.adapterName}:not-supported`,"Layer does not support standardized SQL expression for queries");return(r&&!this.supportsSQLExpression?this._summaryStatsFromGenRend(e):this._summaryStatsFromServiceQuery(e,l)).catch((()=>(x(e.signal),this._summaryStatsFromMemory(e,l))))}async uniqueValues(e){const{valueExpression:t,sqlExpression:a,features:r,useFeaturesInView:i,signal:s}=e,n=t&&(!a||!this.supportsSQLExpression),o=this._hasLocalSource||r||i||n,l=e.view,u=l&&"3d"===l.type,m=await re(e,this);return o?n||r||i||u?this._uvFromMemory(e,m):this._uvFromClientQuery(e,m):this._uvFromServiceQuery(e,m).catch((t=>(x(s),!e.field||e.field2||e.field3||e.filter?t:this._uvFromGenRenderer(e,m[0])))).catch((()=>(x(s),u?this._uvFromMemory(e,m):this._uvFromClientQuery(e,m))))}async histogram(e){const{field:a,normalizationType:r,normalizationField:i,classificationMethod:s,view:n,filter:o,signal:l}=e,u=a?this.getField(a):null,m=w(u)||L(u),c=e.valueExpression||e.sqlExpression,p=c&&!e.sqlExpression,d=this._hasLocalSource||e.features||e.useFeaturesInView||p,y=this.supportsSQLExpression,f=!s||"equal-interval"===s,g=e.minValue,F=e.maxValue,S=null!=g&&null!=F,v=e.numBins||oe;if(d)return this._histogramFromMemory(e);if((c||y)&&f){if(!y&&(c||"natural-log"===r||"square-root"===r))throw new t(`${this.adapterName}:not-supported`,"Layer does not support standardized SQL expression for queries");return this._histogramForExpr(e)}if(m&&f)throw new t(`${this.adapterName}:not-supported`,"Normalization and date field are not allowed when layer does not support standardized SQL expression for queries");return r||!f?this._binParamsFromGenRend(e).then((s=>{if(!S)return ae(this,s,a,v,n,o,l);if(g>s.max||F<s.min)throw new t(`${this.adapterName}:insufficient-data`,"Range defined by 'minValue' and 'maxValue' does not intersect available data range of the field");if(f)return ae(this,{min:g,max:F,sqlExpr:s.sqlExpr,excludeZerosExpr:s.excludeZerosExpr},a,v,n,o,l);{const t={field:a,normalizationType:r,normalizationField:i,normalizationTotal:s.normTotal,layer:this},u=ne(t),m=h(u,g,F);return this._binParamsFromGenRend(e,m).then((e=>ae(this,e,a,v,n,o,l)))}})):this._histogramForField(e)}async classBreaks(e){const t=!1!==e.analyzeData,a=this._hasLocalSource||e.features||e.useFeaturesInView||e.valueExpression||e.filter;return t&&a?this._classBreaksFromMemory(e):(t?this._classBreaksFromGenRend(e):this._classBreaksFromInterpolation(e)).catch((()=>(x(e.signal),this._classBreaksFromMemory(e))))}async queryFeatureCount(e){if(this._hasLocalSource)throw new t(`${this.adapterName}:not-supported`,"Layer does not support count query");const a=this.layer,r=a.createQuery();return r.where=m(r.where,e.whereClause),Y(r,e.filter),a.queryFeatureCount(r,{signal:e.signal})}async generateRenderer(e,a){const r=this.layer;if(this._hasLocalSource||r.version<10.1)throw new t(`${this.adapterName}:not-supported`,"Layer does not support generateRenderer operation (requires ArcGIS Server version 10.1+)");const i=r.createQuery();return e.where=m(e.where,i.where),async function(e,t,a,r){const i=C(e),{source:s,checkValueRange:n}=t,{classificationDefinition:o}=a,l={...a.toJSON(),f:"json"};let u=null;if(u="class-breaks-definition"===o?.type?o.classificationField:o?.attributeField,s){const e={source:s?.toJSON()};l.layer=JSON.stringify(e)}l.classificationDef&&(l.classificationDef=JSON.stringify(l.classificationDef));let m={query:l};r&&(m={...r,...m});const c={url:i.path,field:u,checkValueRange:n},p=i.path+"/generateRenderer";return z(p,m).then((e=>function(e,t){const{field:a,checkValueRange:r,url:i}=e,s=t?.data;if(!s)return;if(!r){const e=ye(s);return Promise.resolve(e)}const n=new M({statisticType:"min",onStatisticField:a}),o=new M({statisticType:"max",onStatisticField:a}),l=new b({outStatistics:[n,o]});return E(i,l).then((e=>{const t=e.features[0].attributes;let a=null,r=null;for(const e in t)0===e.toLowerCase().indexOf("min")?a=t[e]:r=t[e];return ye(s,a,r)}))}(c,e)))}(r.parsedUrl.path,{source:r.dynamicDataSource??void 0,gdbVersion:r.gdbVersion??void 0},e,{signal:a})}async heatmapStatistics(e){const{field:t,fieldOffset:a,view:r,signal:i}=e;return(t&&null==a?this.summaryStatistics({field:t,view:r,signal:i}):Promise.resolve(null)).then((t=>{let r=a||0;if(t){const{count:e,min:a,max:i}=t;e?a===i&&0===a?r=1:i<=0?r="abs":a<0&&(r=-1.01*a):r=1}return this._heatmapStatsFromMemory(e,r).then((e=>({...e,summaryStatistics:t,fieldOffset:r})))}))}async predominantCategories(e){if(!this._hasLocalSource&&!this.supportsSQLExpression)throw new t(`${this.adapterName}:not-supported`,"Layer does not support advanced SQL expressions and standardized queries");const{fields:a,view:r,signal:i}=e,s=j(a),n=A(a),o=r&&this._hasLocalSource?await this._uvFromMemory({valueExpression:s,view:r,signal:i}):await this._uvFromServiceQuery({sqlExpression:n.expression,valueExpression:s,signal:i});return ie(o.uniqueValueInfos,a)}async getSampleFeatures(e,t){const{view:a,sampleSize:i,requiredFields:s,returnGeometry:n,filter:o,signal:l}=e,u=this.layer.createQuery(),m="json"===t;u.outSpatialReference=e.spatialReference||a?.spatialReference,u.returnGeometry=!!n,u.outFields=s,Y(u,o);let c=[],p=!1;if(a)try{const e=await a.whenLayerView(this.layer);if(p=!K(this,s,e).length,p&&(c=await this._fetchFeaturesFromMemory(e,u,l,t),c.length&&null!=i&&i>0&&i<=c.length))return r(c,i,1)}catch(e){x(l)}try{if(this._hasLocalSource)return p?c:m?this._fetchFeaturesJSONFromService(u,l):this._fetchFeaturesFromService(u,l);const t=await this.queryFeatureCount({view:a,filter:o,signal:l}),s=this.layer.capabilities.query.maxRecordCount;let n=-1===i?t:i;if(n=s&&n>s?s:n,t<=c.length||c.length>=s)return c;S(a,"FeatureLayerAdapter: must have a view");const d=a.extent.width/a.width/a.scale*4e5;if(u.maxAllowableOffset=e.resolution||d,t<=n)return m?this._fetchFeaturesJSONFromService(u,l):this._fetchFeaturesFromService(u,l);if(t<=2e4){const e=this.layer.createQuery();Y(e,o);const t=await this.layer.queryObjectIds();return u.objectIds=r(t,n,1),m?this._fetchFeaturesJSONFromService(u,l):this._fetchFeaturesFromService(u,l)}return this.layer.capabilities?.query?.supportsPagination&&(u.num=Math.min(n,2e4)),m?this._fetchFeaturesJSONFromService(u,l):this._fetchFeaturesFromService(u,l)}catch(e){return x(l),c}}load(e){const t=this.layer.load(e).then((async t=>{this.geometryType=t.geometryType,this.objectIdField=t.objectIdField,this.supportsSQLExpression=t.capabilities?.query?.supportsSqlExpression,this._hasLocalSource=!t.url&&!!t.source,this.hasQueryEngine=this._hasLocalSource,this.minScale=t.minScale,this.maxScale=t.maxScale,this.fullExtent=t.fullExtent,this.workerClient=he.getInstance(),await this.workerClient.open(e.signal)}));return this.addResolvingPromise(t),Promise.resolve(this)}};e([_({constructOnly:!0})],Le.prototype,"layer",void 0),Le=e([i("esri.smartMapping.support.adapters.FeatureLayerAdapter")],Le);const Ve=Le;let ze=class extends Ve{constructor(){super(...arguments),this.adapterName="csv-layer-adapter"}async _createGenerateRendererResult(e,a,r,i,o){const l=e?.features,u=l?.length;if(!u)throw new t("csv-layer-adapter:insufficient-data","No features are available to calculate statistics");const m=Z(l);let c=null;if("percent-of-total"===i&&(c=(await this.workerClient.summaryStatistics({field:a},m)).sum,null==c))throw new t("csv-layer-adapter:invalid","invalid normalizationTotal");if("class-breaks-definition"===o?.type){const e=(await y({field:a,normalizationType:i,normalizationField:r,normalizationTotal:c},m)).filter((e=>Number.isFinite(e)));return s({definition:o,values:e,normalizationTotal:c})}const p=(await y({field:a},m)).filter((e=>null!=e&&"string"==typeof e&&""!==e.trim()));return n(p)}generateRenderer(e,t){const a=e.classificationDefinition;let r=null,i=null,s=null;"class-breaks-definition"===a?.type?(r=a.classificationField,i=a.normalizationField,s=a.normalizationType):r=a?.attributeField;const n=this.layer;return g({field:r,normalizationField:i}).then((o=>{const l=n.createQuery();return l.returnGeometry=!1,l.outFields=o,l.where=m(l.where,e.where),n.queryFeatures(l,{signal:t}).then((e=>this._createGenerateRendererResult(e,r,i,s,a)))}))}load(e){const t=this.layer.load(e).then((async t=>{this.geometryType=t.geometryType,this.objectIdField=t.objectIdField,this.supportsSQLExpression=!0,this._hasLocalSource=!1,this.hasQueryEngine=!0,this.workerClient=he.getInstance(),await this.workerClient.open(e.signal)}));return this.addResolvingPromise(t),Promise.resolve(this)}};ze=e([i("esri.smartMapping.support.adapters.CSVLayerAdapter")],ze);const Te=ze;let Ee=class extends Ve{constructor(){super(...arguments),this.adapterName="feature-layer-binning-adapter"}async _getNormalizationTotalFromMemory(e,a,r){const{featuresJSON:i,graphics:s,layerView:n,query:o}=a,l=(!i&&!s&&n&&"queryAggregateSummaryStatistics"in n?await n.queryAggregateSummaryStatistics(o,{field:e},{signal:r}):i?await this.workerClient.summaryStatistics({field:e},i):await B({attribute:{field:e},features:s})).sum;if(null==l)throw new t(`${this.adapterName}:invalid`,"invalid normalizationTotal");return l}async _processStatsFromMemoryParams(e){const{features:a,filter:r}=e;if(a?.length)return this._getFilteredFeatures(a,r);const{view:i,field:s,field2:n,field3:o,normalizationField:l,valueExpression:u,returnGeometry:m,layerViewFunc:c,signal:p}=e;let d=null,h=null,y=null,f=null,w=null;if(i)try{if(d=await i.whenLayerView(this.layer),h=null!=c&&c in d&&"function"==typeof d[c],h){await this._waitForLayerViewUpdate(d);const e=await g({field:s,field2:n,field3:o,normalizationField:l,valueExpression:u});me(this,e).length?h=!1:(y="createAggregateQuery"in d?d.createAggregateQuery():null,y?(y.outFields=e,y.returnGeometry=!1,Y(y,r)):h=!1),d.suspended&&(h=!1)}}catch{h=!1}if(!h&&(w=ce(this.layer).map((e=>e.toJSON())),f=await this._fetchFeaturesForStats({field:s,field2:n,field3:o,valueExpression:u,normalizationField:l,returnGeometry:m,filter:r,view:i,signal:p},"json"),!f?.length))throw new t(`${this.adapterName}:insufficient-data`,"No features are available to calculate statistics");return{layerView:d,query:y,featuresJSON:f,fieldInfos:w}}async _summaryStatsFromMemory(e,t){const{view:a,field:r,valueExpression:i,normalizationType:s,signal:n}=e,o={field:r,valueExpression:i,normalizationType:s,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue},{featuresJSON:l,graphics:u,layerView:m,query:c,fieldInfos:p}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryAggregateSummaryStatistics"});return i&&a&&(l||u)&&(o.fieldType=t?.type?P.toJSON(t.type):null,o.viewInfoParams=X(a),o.timeZone=a.timeZone,o.fieldInfos=p),"percent-of-total"===s&&null==e.normalizationTotal&&(o.normalizationTotal=await this._getNormalizationTotalFromMemory(r,{featuresJSON:l,graphics:u,layerView:m,query:c},n)),!l&&!u&&m&&"queryAggregateSummaryStatistics"in m?m.queryAggregateSummaryStatistics(c,o,{signal:n}):l?this.workerClient.summaryStatistics(o,l):B({attribute:o,features:u})}async _uvFromMemory(e,t){const{view:a,field:r,valueExpression:i,returnAllCodedValues:s,signal:n}=e,{featuresJSON:o,graphics:l,layerView:u,query:m,fieldInfos:c}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryAggregateUniqueValues"}),p={field:r,field2:e.field2,field3:e.field3,fieldDelimiter:F,valueExpression:i,domains:t,returnAllCodedValues:s};return i&&a&&(o||l)&&(p.viewInfoParams=X(a),p.timeZone=a.timeZone,p.fieldInfos=c),!o&&!l&&u&&"queryAggregateUniqueValues"in u?u.queryAggregateUniqueValues(m,p,{signal:n}):o?this.workerClient.uniqueValues(p,o):J({attribute:p,features:l})}async _histogramFromMemory(e){const{view:t,field:a,valueExpression:r,signal:i}=e,{featuresJSON:s,graphics:n,layerView:o,query:l,fieldInfos:u}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryAggregateHistogram"}),m={field:a,valueExpression:r,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numBins:e.numBins};return r&&t&&(s||n)&&(m.viewInfoParams=X(t),m.timeZone=t.timeZone,m.fieldInfos=u),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(m.normalizationTotal=await this._getNormalizationTotalFromMemory(a,{featuresJSON:s,graphics:n,layerView:o,query:l},i)),!s&&!n&&o&&"queryAggregateHistogram"in o?o.queryAggregateHistogram(l,m,{signal:i}):s?this.workerClient.histogram(m,s):D({attribute:m,features:n})}async _classBreaksFromMemory(e){const{view:t,field:a,valueExpression:r,signal:i}=e,{featuresJSON:s,graphics:n,layerView:o,query:l,fieldInfos:u}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryAggregateClassBreaks"}),m={field:a,valueExpression:r,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numClasses:e.numClasses};return r&&t&&(s||n)&&(m.viewInfoParams=X(t),m.timeZone=t.timeZone,m.fieldInfos=u),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(m.normalizationTotal=await this._getNormalizationTotalFromMemory(a,{featuresJSON:s,graphics:n,layerView:o,query:l},i)),!s&&!n&&o&&"queryAggregateClassBreaks"in o?o.queryAggregateClassBreaks(l,m,{signal:i}):s?this.workerClient.classBreaks(m,s):G({attribute:m,features:n})}getField(e=""){const t=ce(this.layer);return t?.find((t=>t.name.toLowerCase()===e?.toLowerCase()))}getFieldUsageInfo(e){return this.getField(e)?{supportsLabelingInfo:!0,supportsRenderer:!0,supportsPopupTemplate:!0,supportsLayerQuery:!1,supportsStatistics:!0}:null}getFieldDomain(e,t){return null}async summaryStatistics(e){const{field:a}=e,r=a?this.getField(a):null,i=w(r)||L(r),s=e.sqlExpression&&!e.valueExpression&&!a;if(i||s)throw new t(`${this.adapterName}:not-supported`,"Date field and sqlExpression are not supported");return this._summaryStatsFromMemory(e,r)}async uniqueValues(e){const t=await re(e,this);return this._uvFromMemory(e,t)}async histogram(e){const{field:a}=e,r=a?this.getField(a):null,i=w(r)||L(r),s=e.sqlExpression&&!e.valueExpression&&!a;if(i||s)throw new t(`${this.adapterName}:not-supported`,"Date field and sqlExpression are not supported");return this._histogramFromMemory(e)}async classBreaks(e){return(!1!==e.analyzeData?this._classBreaksFromMemory(e):this._classBreaksFromInterpolation(e)).catch((()=>(x(e.signal),this._classBreaksFromMemory(e))))}async queryFeatureCount(e){const a=await(e.view?.whenLayerView(this.layer));if(!a||!("queryAggregateCount"in a)||!a.queryAggregateCount)throw new t(`${this.adapterName}:not-supported`,"LayerView is not supported.");await this._waitForLayerViewUpdate(a);const r=a.createAggregateQuery();return r.where=m(r.where,e.whereClause),Y(r,e.filter),a.queryAggregateCount(r,{signal:e.signal})}generateRenderer(e,a){throw new t(`${this.adapterName}:not-supported`,"'generateRenderer' is not supported.")}heatmapStatistics(e){throw new t(`${this.adapterName}:not-supported`,"'heatmapStatistics' is not supported.")}async predominantCategories(e){const{fields:t,view:a,signal:r}=e,i=j(t),s=await this._uvFromMemory({valueExpression:i,view:a,signal:r});return ie(s.uniqueValueInfos,t)}async getSampleFeatures(e,a){const{view:i,sampleSize:s,requiredFields:n,returnGeometry:o,filter:l,signal:u}=e;if(!i)throw new t(`${this.adapterName}:not-supported`,"'view' is required to get sample features for binning.");if("3d"===i.type)throw new t(`${this.adapterName}:not-supported`,"3d 'view' is not supported to get sample features for binning.");const m=await i.whenLayerView(this.layer);if(!("queryAggregateJSON"in m&&m.queryAggregateJSON&&"queryAggregates"in m&&m.queryAggregates))throw new t(`${this.adapterName}:not-supported`,"LayerView is not supported.");if(await this._waitForLayerViewUpdate(m),me(this,n).length)throw new t(`${this.adapterName}:insufficient-data`,"Layer does not have required fields");const c="json"===a,p=m.createAggregateQuery();p.outSpatialReference=e.spatialReference||i&&i.spatialReference,p.returnGeometry=!!o,p.outFields=n,Y(p,l);const{features:d}=c?await m.queryAggregateJSON(p,{signal:u}):await m.queryAggregates(p,{signal:u});return d.length&&null!=s&&s>0&&s<=d.length?r(d,s,1):d}load(e){const a=this.layer.load(e).then((async a=>{if(this.geometryType="polygon",this.objectIdField=null,this.supportsSQLExpression=!1,this._hasLocalSource=!1,this.hasQueryEngine=!0,this.minScale=a.minScale,this.maxScale=a.maxScale,this.fullExtent=a.fullExtent,"geometryType"in a&&"point"!==a.geometryType)throw new t(`${this.adapterName}:invalid-parameters`,"Only 'point' geometry type is supported");const r="featureReduction"in a?a.featureReduction:null;if("binning"!==r?.type&&"cluster"!==r?.type)throw new t(`${this.adapterName}:invalid-parameters`,`Feature reduction type ${r?.type} is not supported`);this.workerClient=he.getInstance(),await this.workerClient.open(e.signal)}));return this.addResolvingPromise(a),Promise.resolve(this)}};Ee=e([i("esri.smartMapping.support.adapters.FeatureLayerBinningAdapter")],Ee);const Ce=Ee;let be=class extends ve{constructor(e){super(e),this._featureLayerAdapter=null,this.workerClient=null}destroy(){this.workerClient?.destroy()}_hasCachedStatistics(e){return this.layer.hasCachedStatistics(e)}_updateQuery(e,t=[],a=[]){if(!e||!a.length)return e;const r=this.layer.objectIdField,i=e.clone(),s=t.filter((e=>{const t=this.layer.getField(e);return!a.includes(t.name)})),n=s.some((e=>this.layer.getField(e).name===r));return i.outFields=n?s:[...s,r],i}async _fetchFeaturesFromMemory(e,a,r){if(!e)throw new t("scene-layer-adapter:insufficient-data","view is required to fetch the features from layerView");const i=await e.whenLayerView(this.layer),s=new AbortController,n=s.signal,o=O((()=>!i.updating),n);await v(o,5e3,s);const l=K(this,r,i);x(n);const u=this._updateQuery(a,r??[],l),m=await i.queryFeatures(u,{signal:n});x(n);const c=m.features;return l.length?i.whenGraphicAttributes(c,l):c}async _fetchFeaturesJSONFromMemory(e,t,a){return this._fetchFeaturesFromMemory(e,t,a).then(Z)}_fetchFeaturesForStats(e,t){return g({field:e.field,normalizationField:e.normalizationField,valueExpression:e.valueExpression}).then((a=>this.getSampleFeatures({sampleSize:-1,view:e.view,returnGeometry:e.returnGeometry,requiredFields:a,signal:e.signal},t)))}async _processStatsFromMemoryParams(e){const a=e.features;if(a?.length)return a.length&&"declaredClass"in a[0]&&"esri.Graphic"===a[0].declaredClass?{graphics:a}:{featuresJSON:a};const{view:r,field:i,normalizationField:s,valueExpression:n,signal:o}=e,l=await this._fetchFeaturesForStats({field:i,valueExpression:n,normalizationField:s,view:r,signal:o});if(!l?.length)throw new t("scene-layer-adapter:insufficient-data","No features are available to calculate statistics");return{graphics:l}}_generateFeatureSetForCachedHistogram(e,t=e.minimum,a=e.maximum,r){const i=[];for(let e=0;e<r;e++)i[e]=0;const s=e.counts.length,n=e.minimum,o=e.maximum;for(let l=0;l<s;l++){const u=(l+.5)/s,m=((1-u)*n+u*o-t)/(a-t)*r;m>=0&&m<=r&&(i[m===r?r-1:Math.floor(m)]+=e.counts[l])}const l=[];i.forEach(((e,t)=>{const a=new de({attributes:{}});a.attributes.EXPR_1=t+1,a.attributes.countOFExpr=e,l.push(a)}));const u=new N;return u.features=l,u}_getCachedStatistics(e,a){const r=this.layer;return e.valueExpression||e.sqlExpression||e.sqlWhere||e.minValue||e.maxValue?Promise.reject(new t("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression', 'sqlExpression', 'sqlWhere', 'minValue' or 'maxValue' is specified")):r.queryCachedStatistics(a?.name,{signal:e.signal}).then((e=>{const t=e.stats,{min:a,max:r,totalValuesCount:i}=t;let{avg:s,stddev:n,sum:o,variance:l,count:u}=t;return 0===a&&0===r||(s=0===s?null:s,o=0===o?null:o,n=0===n?null:n,l=0===l?null:l,u=0===u?null:u),null==u&&(null!=o&&null!=s?u=Math.round(o/s):null!=i&&(u=i)),{avg:s,count:u,max:r,min:a,stddev:n,sum:o,variance:l}}))}async _getNormalizationTotal(e,a,r){const i=(a?await this.workerClient.summaryStatistics({field:e},a):await B({attribute:{field:e},features:r})).sum;if(null==i)throw new t("scene-layer-adapter:invalid","invalid normalizationTotal");return i}async _getSummaryStatisticsFromMemory(e,t){const{view:a,field:r,normalizationField:i,valueExpression:s}=e,{featuresJSON:n,graphics:o}=await this._processStatsFromMemoryParams(e),l={field:r,valueExpression:s,normalizationType:e.normalizationType,normalizationField:i,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue};return e.valueExpression&&a&&n&&(l.fieldType=t?.type?P.toJSON(t.type):null,l.viewInfoParams=X(a),l.timeZone=a.timeZone),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(l.normalizationTotal=await this._getNormalizationTotal(r,n,o)),n?this.workerClient.summaryStatistics(l,n):B({attribute:l,features:o})}_getCachedStatisticsForUniqueValues(e,a){const r=this.layer,i=a?.name,s=a&&e.field?this.getFieldDomain(e.field):null;return e.valueExpression||e.sqlExpression||e.sqlWhere?Promise.reject(new t("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression', 'sqlExpression' or 'sqlWhere' is specified")):r.queryCachedStatistics(i,{signal:e.signal}).then((t=>{const s=t.stats;if(!s.mostFrequentValues)throw new Error;const n=t.labels?.labels,o={},l=[],u="countOF"+i;s.mostFrequentValues.forEach((e=>{const t=new de({attributes:{}});t.attributes[i]=a&&a.name!==r.objectIdField&&(V(a)||w(a))?Number(e.value):e.value,t.attributes[u]=e.count,l.push(t)})),n&&n.forEach((e=>{o[e.value]=e.label}));const m=new N;return m.features=l,te(m,{layer:this,field:e.field,labels:o,view:e.view,signal:e.signal})})).then((t=>l(t,[s],e.returnAllCodedValues)))}async _getUniqueValuesFromMemory(e,t){const{view:a,field:r,field2:i,field3:s,valueExpression:n,returnAllCodedValues:o}=e,l={field:r,field2:i,field3:s,fieldDelimiter:F,valueExpression:n,domains:t,returnAllCodedValues:o},{featuresJSON:u,graphics:m}=await this._processStatsFromMemoryParams(e);return e.valueExpression&&a&&u&&(l.viewInfoParams=X(a),l.timeZone=a.timeZone),u?this.workerClient.uniqueValues(l,u):J({attribute:l,features:m})}_getCachedStatisticsForHistogram(e,a){const r=this.layer;return e.valueExpression||e.sqlExpression||e.sqlWhere||e.normalizationType?Promise.reject(new t("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression' or 'sqlExpression' or 'sqlWhere' or 'normalizationType' is specified")):r.queryCachedStatistics(a&&a.name,{signal:e.signal}).then((t=>{const a=t.stats,{minValue:r,maxValue:i}=e,s=null!=r?r:a.min,n=null!=i?i:a.max,o=e.numBins||10,l=this._generateFeatureSetForCachedHistogram(a.histogram,s,n,o);return le(l,s,n,o)}))}async _getClassBreaksFromMemory(e){const{view:t,field:a,normalizationField:r,valueExpression:i}=e,{featuresJSON:s,graphics:n}=await this._processStatsFromMemoryParams(e),o={field:a,valueExpression:i,normalizationType:e.normalizationType,normalizationField:r,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numClasses:e.numClasses};return e.valueExpression&&t&&s&&(o.viewInfoParams=X(t),o.timeZone=t.timeZone),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(o.normalizationTotal=await this._getNormalizationTotal(a,s,n)),s?this.workerClient.classBreaks(o,s):G({attribute:o,features:n})}async _getHistogramFromMemory(e){const{view:t,field:a}=e,{featuresJSON:r,graphics:i}=await this._processStatsFromMemoryParams(e),s={field:a,valueExpression:e.valueExpression,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numBins:e.numBins};return e.valueExpression&&t&&r&&(s.viewInfoParams=X(t),s.timeZone=t.timeZone),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(s.normalizationTotal=await this._getNormalizationTotal(a,r,i)),r?this.workerClient.histogram(s,r):D({attribute:s,features:i})}getField(e){return this.layer.getField(e??"")}getFieldUsageInfo(e){const t=this.getField(e);if(!t)return null;const a=this.layer.getFieldUsageInfo(t.name);return{supportsLabelingInfo:a.supportsLabelingInfo,supportsPopupTemplate:a.supportsPopupTemplate,supportsRenderer:a.supportsRenderer,supportsLayerQuery:a.supportsLayerQuery,supportsStatistics:!0}}getFieldDomain(e,t){return this._featureLayerAdapter?this._featureLayerAdapter.getFieldDomain(e,t):null}createQuery(){return this.layer.createQuery()}summaryStatistics(e){const a=this.getField(e.field);if(this._featureLayerAdapter)return this._featureLayerAdapter.summaryStatistics(e);if(e.filter)throw new t("scene-layer-adapter:not-supported","filter is not supported");return this._hasCachedStatistics(a?.name)?this._getCachedStatistics(e,a).catch((()=>(x(e.signal),this._getSummaryStatisticsFromMemory(e,a)))):this._getSummaryStatisticsFromMemory(e,a)}async uniqueValues(e){if(this._featureLayerAdapter)return this._featureLayerAdapter.uniqueValues(e);if(e.filter)throw new t("scene-layer-adapter:not-supported","filter is not supported");const a=await re(e,this),{field:r,field2:i}=e,s=r&&i,n=this.getField(r);return!s&&n&&this._hasCachedStatistics(n.name)?this._getCachedStatisticsForUniqueValues(e,n).catch((()=>(x(e.signal),this._getUniqueValuesFromMemory(e,a)))):this._getUniqueValuesFromMemory(e,a)}histogram(e){const a=this.getField(e.field);if(this._featureLayerAdapter)return this._featureLayerAdapter.histogram(e);if(e.filter)throw new t("scene-layer-adapter:not-supported","filter is not supported");return a&&this._hasCachedStatistics(a.name)?this._getCachedStatisticsForHistogram(e,a).catch((()=>(x(e.signal),this._getHistogramFromMemory(e)))):this._getHistogramFromMemory(e)}classBreaks(e){const a=this.getField(e.field);if(this._featureLayerAdapter)return this._featureLayerAdapter.classBreaks(e);if(e.filter)throw new t("scene-layer-adapter:not-supported","filter is not supported");return this._hasCachedStatistics(a?.name)?Promise.reject(new t("scene-layer-adapter:not-supported","Cached stats not supported")):this._getClassBreaksFromMemory(e)}queryFeatureCount(e){return this._featureLayerAdapter?this._featureLayerAdapter.queryFeatureCount(e):Promise.reject(new t("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support count query"))}generateRenderer(e,a){return this._featureLayerAdapter?this._featureLayerAdapter.generateRenderer(e,a):Promise.reject(new t("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support generateRenderer operation"))}heatmapStatistics(e){return this._featureLayerAdapter?this._featureLayerAdapter.heatmapStatistics(e):Promise.reject(new t("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support heatmapStatistics operation"))}async predominantCategories(e){if(this._featureLayerAdapter)return this._featureLayerAdapter.predominantCategories(e);throw new t("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support predominantCategories")}async getSampleFeatures(e,a){if(e.filter)throw new t("scene-layer-adapter:not-supported","filter is not supported");const{view:i,sampleSize:s,requiredFields:n,returnGeometry:o,signal:l}=e,u="json"===a,m=this.createQuery();m.outFields=n,m.returnGeometry=!!o,m.where=null,m.num=s;let c=[];try{if(c=u?await this._fetchFeaturesJSONFromMemory(i,m,n):await this._fetchFeaturesFromMemory(i,m,n),c.length&&null!=s&&s>0&&s<=c.length)return r(c,s,1)}catch(e){x(l)}let p=null;if(this._featureLayerAdapter){const t={...e};delete t.view,p=await this._featureLayerAdapter.getSampleFeatures(t,a)}return p&&p.length?p:r(c,c.length,1)}load(e){const t=this.layer.load(e).then((async t=>{this.workerClient=he.getInstance(),await this.workerClient.open(e.signal);const a=t.associatedLayer;if(this.geometryType=t.geometryType,null!=a)return this._featureLayerAdapter=new Ve({layer:a}),this._featureLayerAdapter.load(e).then((()=>{this.objectIdField=this._featureLayerAdapter.objectIdField,this.supportsSQLExpression=this._featureLayerAdapter.supportsSQLExpression,this.minScale=this._featureLayerAdapter.minScale,this.maxScale=this._featureLayerAdapter.maxScale,this.fullExtent=this._featureLayerAdapter.fullExtent}));this.objectIdField=t.objectIdField,this.supportsSQLExpression=!1,this.hasQueryEngine=!1,this.fullExtent=t.fullExtent}));return this.addResolvingPromise(t),Promise.resolve(this)}};e([_({constructOnly:!0})],be.prototype,"layer",void 0),be=e([i("esri.smartMapping.support.adapters.SceneLayerAdapter")],be);const Ne=be;let Me=class extends Ne{constructor(e){super(e)}getField(e){return this.layer.fieldsIndex.get(e??"")}getFieldUsageInfo(e){const t=this.getField(e);if(!t)return null;const a=this._hasCachedStatistics(t.name);return{supportsLabelingInfo:a,supportsPopupTemplate:a,supportsRenderer:a,supportsLayerQuery:!1,supportsStatistics:a}}getFieldDomain(){return null}load(e){const t=this.layer.load(e).then((()=>{this.geometryType="point",this.objectIdField=null,this.supportsSQLExpression=!1,this.hasQueryEngine=!1}));return this.addResolvingPromise(t),Promise.resolve(this)}};Me=e([i("esri.smartMapping.support.adapters.PointCloudLayerAdapter")],Me);const Ie=Me;let ke=class extends qe{async _summaryStatsFromClientQuery(e,t){const{signal:a,view:r}=e,i=W(this,e,t);i.outStatistics=i.outStatistics?.filter((e=>"totalcount_value"!==e.outStatisticFieldName));const s=await this._fetchFeatureSetFromMemory(i,r,a),n=H(s,w(t)||L(t));return o(n)}};ke=e([i("esri.smartMapping.support.adapters.StreamLayerAdapter")],ke);const je=ke;var Ae;!function(e){e[e.CSVLayer=0]="CSVLayer",e[e.GeoJSONLayer=1]="GeoJSONLayer",e[e.FeatureLayer=2]="FeatureLayer",e[e.OGCFeatureLayer=3]="OGCFeatureLayer",e[e.SceneLayer=4]="SceneLayer",e[e.StreamLayer=5]="StreamLayer",e[e.PointCloudLayer=6]="PointCloudLayer",e[e.WFSLayer=7]="WFSLayer"}(Ae||(Ae={}));const Oe={[Ae.CSVLayer]:{adapter:Te,type:"csv",label:"CSVLayer"},[Ae.FeatureLayer]:{adapter:Ve,type:"feature",label:"FeatureLayer"},[Ae.OGCFeatureLayer]:{adapter:qe,type:"ogc-feature",label:"OGCFeatureLayer"},[Ae.GeoJSONLayer]:{adapter:Ve,type:"geojson",label:"GeoJSONLayer"},[Ae.SceneLayer]:{adapter:Ne,type:"scene",label:"SceneLayer"},[Ae.StreamLayer]:{adapter:je,type:"stream",label:"StreamLayer"},[Ae.PointCloudLayer]:{adapter:Ie,type:"point-cloud",label:"PointCloudLayer"},[Ae.WFSLayer]:{adapter:Ve,type:"wfs",label:"WFSLayer"}},Qe=[Ae.CSVLayer,Ae.FeatureLayer,Ae.OGCFeatureLayer,Ae.GeoJSONLayer,Ae.SceneLayer,Ae.StreamLayer,Ae.PointCloudLayer,Ae.WFSLayer],Pe=[Ae.CSVLayer,Ae.FeatureLayer,Ae.OGCFeatureLayer,Ae.SceneLayer,Ae.StreamLayer,Ae.GeoJSONLayer,Ae.WFSLayer],Re=[Ae.CSVLayer,Ae.FeatureLayer,Ae.OGCFeatureLayer,Ae.StreamLayer,Ae.GeoJSONLayer,Ae.WFSLayer];function Be(e){return e.map((e=>Oe[e].label))}function Je(e){return e.map((e=>Oe[e].type))}function De(e,t=Qe,a){if(e instanceof ve)return e;const r=function(e,t=Qe){let a=null;return t.some((t=>{const r=e.type===Oe[t].type;return r&&(a=Oe[t].adapter),r})),a}(e,t);return r?a?new Ce({layer:e}):new r({layer:e}):null}export{Ae as L,Je as a,Re as b,De as c,Qe as d,Pe as f,Be as g};
