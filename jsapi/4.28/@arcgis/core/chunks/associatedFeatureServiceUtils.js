/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{id as r}from"../kernel.js";import e from"../request.js";import n from"../core/Error.js";import{throwIfAbortError as t}from"../core/promiseUtils.js";import{p as a}from"./arcgisLayerUrl.js";import o from"../portal/Portal.js";import i from"../portal/PortalItem.js";async function s(s,u){const f=a(s);if(!f)throw new n("invalid-url","Invalid scene service url");const y={...u,sceneServerUrl:f.url.path,layerId:f.sublayer??void 0};if(y.sceneLayerItem??=await async function(n){const a=(await l(n)).serviceItemId;if(!a)return null;const s=new i({id:a,apiKey:n.apiKey}),c=await async function(n){const a=r?.findServerInfo(n.sceneServerUrl);if(a?.owningSystemUrl)return a.owningSystemUrl;const o=n.sceneServerUrl.replace(/(.*\/rest)\/.*/i,"$1")+"/info";try{const r=(await e(o,{query:{f:"json"},responseType:"json",signal:n.signal})).data.owningSystemUrl;if(r)return r}catch(r){t(r)}return null}(n);null!=c&&(s.portal=new o({url:c}));try{return s.load({signal:n.signal})}catch(r){return t(r),null}}(y),null==y.sceneLayerItem)return c(y.sceneServerUrl.replace("/SceneServer","/FeatureServer"),y);const p=await async function({sceneLayerItem:r,signal:e}){if(!r)return null;try{const n=(await r.fetchRelatedItems({relationshipType:"Service2Service",direction:"reverse"},{signal:e})).find((r=>"Feature Service"===r.type))||null;if(!n)return null;const t=new i({portal:n.portal,id:n.id});return await t.load(),t}catch(r){return t(r),null}}(y);if(!p?.url)throw new n("related-service-not-found","Could not find feature service through portal item relationship");const m=await c(p.url,y);return m.portalItem=p,m}async function l(r){if(r.rootDocument)return r.rootDocument;const n={query:{f:"json",token:r.apiKey},responseType:"json",signal:r.signal};try{const t=await e(r.sceneServerUrl,n);r.rootDocument=t.data}catch{r.rootDocument={}}return r.rootDocument}async function c(r,t){const o=a(r);if(!o)throw new n("invalid-feature-service-url","Invalid feature service url");const i=o.url.path,s=t.layerId;if(null==s)return{serverUrl:i};const c=l(t),u=r=>{const n={query:{f:"json"},responseType:"json",authMode:r,signal:t.signal};return e(i,n)},f=u("anonymous").catch((()=>u("no-prompt"))),[y,p]=await Promise.all([f,c]),m=p?.layers,d=y.data&&y.data.layers;if(!Array.isArray(d))throw new Error("expected layers array");if(Array.isArray(m)){for(let r=0;r<Math.min(m.length,d.length);r++)if(m[r].id===s)return{serverUrl:i,layerId:d[r].id}}else if(null!=s&&s<d.length)return{serverUrl:i,layerId:d[s].id};throw new Error("could not find matching associated sublayer")}export{s as f};
