/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{s as e,h as n,a as r}from"./screenUtils.js";import{l as t,c as s,k as o,b as l,i as a,q as c,d as u}from"./vec3.js";import{c as i}from"./vec3f64.js";import{projectPoint as d}from"../geometry/projection.js";import{o as p,c as f,f as m}from"./plane.js";import{c as E,k as S,n as g}from"./vector.js";import{k as j,j as x}from"./elevationInfoUtils.js";import{f as y}from"./ray.js";import{a as R,S as v,I}from"./Intersector2.js";import{t as H}from"./verticalOffsetUtils.js";import{E as U}from"./dragEventPipeline.js";function O(e,n){return w(e,(()=>n))}function b(e){return w(e,(e=>e.plane))}function w(r,t){const s=i(),o=i();let l=!1;return a=>{const c=t(a);if("start"===a.action){const t=e(a.screenStart,n(S.get())),o=y(r.state.camera,t,F);null!=o&&(l=p(c,o,s))}if(!l)return null;const u=e(a.screenEnd,n(S.get())),i=y(r.state.camera,u,F);return null==i?null:p(c,i,o)?{...a,renderStart:s,renderEnd:o,plane:c,ray:i}:null}}function C(e,n,t,s=null,o=null){return function(e,n,t=0,s=null,o=null){let l=null;return a=>{if("start"===a.action&&(l=e.sceneIntersectionHelper.intersectElevationFromScreen(r(a.screenStart.x,a.screenStart.y),n,t,o),null!=l&&null!=s&&!d(l,l,s)))return null;if(null==l)return null;const c=e.sceneIntersectionHelper.intersectElevationFromScreen(r(a.screenEnd.x,a.screenEnd.y),n,t,o);return null==c||null!=s&&!d(c,c,s)?null:{...a,mapStart:l,mapEnd:c}}}(e,t,j(n,e,t),s,o)}function T(e,n,r,t=null,s=null){return C(e,r,x(n),t,s)}function D(e,n,r,t){const s=n.toMap(e.screenStart,{include:[r]});return null!=s?T(n,r,s,t):null}function M(e,n,r){let d=null;const p=new U;return p.next(O(e,function(e,n){const r=P,t=A,s=f();e.renderCoordsHelper.worldUpAtPosition(n,r);const a=o(s,r,l(t,n,e.state.camera.eye));return o(a,a,r),m(n,a,s)}(e,n))).next(function(e,n){const r=i(),o=t(n);e.renderCoordsHelper.worldUpAtPosition(n,r);const d=i(),p=i(),f=s=>(l(s,s,n),g(r,s,s),"global"===e.viewingMode&&t(s)*Math.sign(a(r,s))<.001-o&&l(s,c(s,r,.001),n),u(s,s,n),s);return e=>(e.renderStart=f(s(d,e.renderStart)),e.renderEnd=f(s(p,e.renderEnd)),e)}(e,n)).next(N(e,r)).next((e=>{e.mapEnd.x=e.mapStart.x,e.mapEnd.y=e.mapStart.y,d=e})),e=>(d=null,p.execute(e),d)}function N(e,n){const r=e.renderCoordsHelper;return e=>{const t=r.fromRenderCoords(e.renderStart,n),s=r.fromRenderCoords(e.renderEnd,n);return null!=t&&null!=s?{...e,mapStart:t,mapEnd:s}:null}}var h;function k(e){let n=null;return r=>{switch(r.action){case"start":n=e.disableDisplay();break;case"end":case"cancel":null!=n&&(n.remove(),n=null)}return r}}function G(n,t=null){const s=R(n.state.viewingMode);s.options.selectionMode=!0,s.options.store=v.MIN,s.options.hud=!1;const o=r(),l={requiresGroundFeedback:!0,enableDraped:!0,exclude:new Set},a=i(),c=t??n.spatialReference,u=r=>{n.map.ground&&n.map.ground.opacity<1?l.exclude.add(H):l.exclude.delete(H),n.sceneIntersectionHelper.intersectIntersectorScreen(e(r,o),s,l);const t=s.results.min;let u;if(t.getIntersectionPoint(a))u=t.intersector===I.TERRAIN?h.GROUND:h.OTHER;else{if(!s.results.ground.getIntersectionPoint(a))return null;u=h.GROUND}return{location:n.renderCoordsHelper.fromRenderCoords(a,c),surfaceType:u}};let d;return e=>{if("start"===e.action){const n=u(e.screenStart);d=null!=n?n.location:null}if(null==d)return null;const n=u(e.screenEnd);return null!=n?.location?{...e,mapStart:d,mapEnd:n.location,surfaceType:n.surfaceType}:null}}!function(e){e[e.GROUND=0]="GROUND",e[e.OTHER=1]="OTHER"}(h||(h={}));const P=i(),A=i(),F=E();export{h as S,G as a,C as b,M as c,D as d,b as e,N as f,T as g,k as h,O as s};
