"use strict";(self.webpackChunkRemoteClient=self.webpackChunkRemoteClient||[]).push([[5743],{45743:(e,s,t)=>{t.d(s,{uploadAssets:()=>L});var o=t(82058),r=t(48578),n=t(92143),a=t(50406),i=t(8254),c=t(32101),l=t(10279),u=t(20114),p=t(60991);const d="upload-assets",m=()=>new Error;class f extends p.Z{constructor(){super(`${d}:unsupported`,"Layer does not support asset uploads.",m())}}class h extends p.Z{constructor(){super(`${d}:no-glb-support`,"Layer does not support glb.",m())}}class g extends p.Z{constructor(){super(`${d}:no-supported-source`,"No supported external source found",m())}}class w extends p.Z{constructor(){super(`${d}:not-base-64`,"Expected gltf data in base64 format after conversion.",m())}}class y extends p.Z{constructor(){super(`${d}:unable-to-prepare-options`,"Unable to prepare uploadAsset request options.",m())}}class b extends p.Z{constructor(e,s){super(`${d}:bad-response`,`Bad response. Uploaded ${e} items and received ${s} results.`,m())}}class P extends p.Z{constructor(e,s){super(`${d}-layer:upload-failed`,`Failed to upload mesh file ${e}. Error code: ${s?.code??"-1"}. Error message: ${s?.messages??"unknown"}`,m())}}class _ extends p.Z{constructor(e){super(`${d}-layer:unsupported-format`,`The service allowed us to upload an asset of FormatID ${e}, but it does not list it in its supported formats.`,m())}}class T extends p.Z{constructor(){super(`${d}:convert3D-failed`,"convert3D failed.")}}var v=t(22723),k=t(91306);const A={upload:{createFromFiles:.8,loadMesh:.2},uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};function x(e,s=(e=>{}),t){return new M(e,s,t)}class M{constructor(e,s=(e=>{}),t){if(this.onProgress=s,this.taskName=t,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,"number"==typeof e){this._weights={};for(let s=0;s<e;s++){const t=s,o=1/e;this._weights[t]=o,this._progressMap.set(t,0)}}else this._weights=e;this.emitProgress()}emitProgress(){let e=0;for(const[s,t]of this._progressMap.entries())e+=t*this._weights[s];if(1===e&&(0,r.h)("enable-feature:esri-3dofl-upload-timings")){const e=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${e} sec`);for(const[s,t]of this._timingsMap){const o=Math.round(t.end-t.start)/1e3,r=Math.round(o/e*100);console.log(this.taskName??"Task",{stepKey:s,stepTime:o,relativeTime:r})}}this.onProgress(e)}setProgress(e,s){if(this._progressMap.set(e,s),(0,r.h)("enable-feature:esri-3dofl-upload-timings")){const t=performance.now();this._startTime??=t;const o=(0,k.o)(this._timingsMap,e,(()=>({start:t,end:0})));1===s&&(o.end=t)}this.emitProgress()}simulate(e,s){return F((s=>this.setProgress(e,s)),s)}makeOnProgress(e){return s=>this.setProgress(e,s)}}function F(e=(e=>{}),s=N){const t=performance.now();e(0);const o=setInterval((()=>{const o=performance.now()-t,r=1-Math.exp(-o/s);e(r)}),I);return(0,v.m)((()=>{clearInterval(o),e(1)}))}function $(e,s=E){return(0,i.m)((0,i.S)(e*Z/s))}function S(e,s=j){return(0,i.m)((0,i.S)(e*Z/s))}const E=10,j=10,Z=8e-6,I=(0,i.M)(50),N=(0,i.M)(1e3);var D=t(21132),U=t(13235);t(31450),t(76506),t(88762),t(12047),t(29768),t(21972),t(17533),t(86656),t(66396),t(6540),t(34250),t(379),t(62062),t(6906),t(79456),t(38742);const C=1e6,B=20*C,R=2e9,O=3;async function L(e,s,t){const o=e.length;if(!o)return t?.onProgress?.(1),[];const r=x(o,t?.onProgress,"uploadAssets");return Promise.all(e.map(((e,o)=>async function(e,{layer:s,ongoingUploads:t},o){const r=t.get(e);if(r)return r;if(!function(e){return!!e.infoFor3D&&!!e.url}(s))throw new f;if(function(e,s){const{parsedUrl:t}=s;return null!=t&&e.metadata.externalSources.some((e=>(0,u.a)(e,t)))}(e,s))return o?.onProgress?.(1),e;const n=async function(e,s,t){const{metadata:o}=e,{displaySource:r}=o,n=q(r?.source,s),i=!!n,p=o.externalSources.length>0,d=i?async function(e,s,t){return{source:await H(e,s,t),original:!0}}(n,s,t):p?async function(e,s,t){const o=W(s),{externalSources:r}=e.metadata,n=function(e,s){for(const t of e){const e=q(t.source,s);if(e)return e}return null}(r,s);if(!n)throw new g;const a=x(A.uploadConvertibleSource,t?.onProgress,"uploadConvertibleSource"),i=await H(n,s,{onProgress:a.makeOnProgress("uploadEditSource")});e.addExternalSources([{source:i,original:!0}]);const l=n.reduce(((e,{asset:s})=>s instanceof File?e+s.size:e),0),p=a.simulate("serviceAssetsToGlb",S(l));try{const e=await async function(e,s,t){const o=e.map((({assetName:e,parts:s})=>({assetName:e,assetHash:s[0].partHash}))),r=s.capabilities?.operations.supportsAsyncConvert3D,n={f:"json",assets:JSON.stringify(o),transportType:"esriTransportTypeUrl",targetFormat:t,async:r},a=(0,c.v_)(s.parsedUrl.path,"convert3D");let i;try{i=(await(r?K:J)(a,{query:n,responseType:"json",timeout:0})).data}catch(e){throw new T}const{supportedFormats:l}=s.infoFor3D;return i.assets.map((e=>{const s=(0,U.b)(e.contentType,l);if(!s)throw new _(s);return new u.c(e.assetName,e.contentType,[new u.S(e.assetURL,e.assetHash)])}))}(i,s,o);return{source:e}}finally{p.remove()}}(e,s,t):async function(e,s,t){const o=x(A.uploadLocalMesh,t?.onProgress,"uploadLocalMesh"),r=async function(e,s,t){const o=W(s),r=await e.load(t),n=await r.toBinaryGLTF({ignoreLocalTransform:!0});(0,a.k_)(t);const i=await n.buffer();return(0,a.k_)(t),{blob:new Blob([i.data],{type:i.type}),assetName:`${(0,l.a)()}.glb`,assetType:o}}(e,s,{...t,onProgress:o.makeOnProgress("meshToAssetBlob")});return{source:await G([r],s,{...t,onProgress:o.makeOnProgress("uploadAssetBlobs")}),extent:e.extent.clone(),original:!0}}(e,s,t),m=await d;return(0,a.k_)(t),e.addExternalSources([m]),e}(e,s,o);t.set(e,n);try{await n}finally{t.delete(e)}return e}(e,s,{...t,onProgress:r.makeOnProgress(o)}))))}function q(e,s){if(!e)return null;const{infoFor3D:{supportedFormats:t,editFormats:o}}=s,r=(0,u.f)(e),n=new Array;let a=!1;for(let e=0;e<r.length;++e){const s=z(r[e],t);if(!s)return null;o.includes(s.assetType)&&(a=!0),n.push(s)}return a?n:null}function z(e,s){const t=(0,u.d)(e,s);return t?{asset:e,assetType:t}:null}async function H(e,s,t){const o=e.map((e=>async function(e,s){const{asset:t,assetType:o}=e;if(t instanceof File)return{blob:t,assetName:t.name,assetType:o};const r=await t.toBlob(s);return(0,a.k_)(s),{blob:r,assetName:t.assetName,assetType:o}}(e,t)));return G(o,s,t)}async function G(e,s,t){const r=x(A.uploadAssetBlobs,t?.onProgress,"uploadAssetBlobs"),i=await function(e,s,t){const r=x(e.length,t?.onProgress,"prepareAssetItems");return Promise.all(e.map((async(e,i)=>{const l=async function(e,s,t){const{blob:r,assetType:i,assetName:l}=e;let u=null;try{const e=await async function({data:e,name:s,description:t},r,n){let i=null;try{const u=(0,c.v_)(r,"uploads"),p=(0,c.v_)(u,"info"),{data:d}=await(0,o.Z)(p,{query:{f:"json"},responseType:"json"});(0,a.k_)(n);const m=(0,D.i)(r),f=d.maxUploadFileSize*C,h=m?R:f,g=m?Math.min(B,f):B;if(e.size>h)throw new Error("Data too large");const w=(0,c.v_)(u,"register"),{data:y}=await(0,o.Z)(w,{query:{f:"json",itemName:(l=s,l.replaceAll("/","_").replaceAll("\\","_")),description:t},responseType:"json",method:"post"});if((0,a.k_)(n),!y.success)throw new Error("Registration failed");const{itemID:b}=y.item;i=(0,c.v_)(u,b);const P=(0,c.v_)(i,"uploadPart"),_=Math.ceil(e.size/g),T=new Array;for(let s=0;s<_;++s)T.push(e.slice(s*g,Math.min((s+1)*g,e.size)));const v=T.slice().reverse(),k=new Array,A=x(_,n?.onProgress,"uploadItem"),M=async()=>{for(;0!==v.length;){const e=T.length-v.length,s=v.pop(),t=new FormData,r=A.simulate(e,$(s.size));try{const r=s;t.append("f","json"),t.append("file",r),t.append("partId",`${e}`);const{data:i}=await(0,o.Z)(P,{timeout:0,body:t,responseType:"json",method:"post"});if((0,a.k_)(n),!i.success)throw new Error("Part upload failed")}finally{r.remove()}}};for(let e=0;e<O&&0!==v.length;++e)k.push(M());await Promise.all(k);const F=(0,c.v_)(i,"commit"),{data:S}=await(0,o.Z)(F,{query:{f:"json",parts:T.map(((e,s)=>s)).join(",")},responseType:"json",method:"post"});if((0,a.k_)(n),!S.success)throw new Error("Commit failed");return S.item}catch(e){if(null!=i){const e=(0,c.v_)(i,"delete");await(0,o.Z)(e,{query:{f:"json"},responseType:"json",method:"post"})}throw e}var l}({data:r,name:l},s.url,t);(0,a.k_)(t),u={assetType:i,assetUploadId:e.itemID}}catch(e){(0,a.r9)(e),n.L.getLogger("esri.layers.graphics.sources.support.uploadAssets").warnOnce(`Service ${s.url} does not support the REST Uploads API.`)}if(!u){const e=await(0,c.IR)(r);if((0,a.k_)(t),!e.isBase64)throw new w;u={assetType:i,assetData:e.data}}if(!u)throw new y;return{item:u,assetName:l}}(await e,s,{...t,onProgress:r.makeOnProgress(i)});return(0,a.k_)(t),l})))}(e,s,{...t,onProgress:r.makeOnProgress("prepareAssetItems")});(0,a.k_)(t);const l=i.map((({item:e})=>e)),{uploadResults:p}=await async function(e,s,t){const r=F(t?.onProgress);try{const r=await(0,o.Z)((0,c.v_)(s.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(e)},method:"post",responseType:"json"});if((0,a.k_)(t),r.data.uploadResults.length!==e.length)throw new b(e.length,r.data.uploadResults.length);return r.data}finally{r.remove()}}(l,s,{...t,onProgress:r.makeOnProgress("uploadAssetItems")});return(0,a.k_)(t),e.map(((e,t)=>function(e,s,t){const{success:o}=s;if(!o){const{error:t}=s;throw new P(e.assetName,t)}const{assetHash:r}=s,{assetName:n,item:{assetType:a}}=e,{infoFor3D:{supportedFormats:i}}=t,c=(0,U.e)(a,i);if(!c)throw new _(a);return new u.c(n,c,[new u.S(`${t.parsedUrl.path}/assets/${r}`,r)])}(i[t],p[t],s)))}function J(e,s){return(0,o.Z)(e,s)}async function K(e,s){const t=(await(0,o.Z)(e,s)).data.statusUrl;for(;;){const e=(await(0,o.Z)(t,{query:{f:"json"},responseType:"json"})).data;switch(e.status){case"Completed":return(0,o.Z)(e.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(e.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await(0,a.e4)(Q)}}function W(e){const{infoFor3D:s}=e,t=(0,U.b)("model/gltf-binary",s.supportedFormats)??(0,U.c)("glb",s.supportedFormats);if(!t)throw new h;return t}const Q=(0,i.M)(1e3)}}]);