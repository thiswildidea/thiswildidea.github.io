/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/Accessor.js";import{d as s}from"../../../chunks/maybe.js";import{property as i}from"../../../core/accessorSupport/decorators/property.js";import"../../../chunks/ensureType.js";import"../../../chunks/typedArrayUtil.js";import{subclass as r}from"../../../core/accessorSupport/decorators/subclass.js";import{d as o}from"../../../chunks/defaultUnit.js";import{A as n}from"../../../chunks/AnalysisView3D.js";import{M as a}from"../../../chunks/interfaces2.js";import{watch as h,sync as l,syncAndInitial as c,initial as p}from"../../../core/reactiveUtils.js";import{canProjectWithoutEngine as d,canProjectToWGS84ComparableLonLat as m,tryProjectWithZConversion as u}from"../../../geometry/projection.js";import{g,W as _,S as f}from"../../../chunks/spatialReferenceEllipsoidUtils.js";import{d as y,j}from"../../../chunks/mathUtils.js";import{c as v,a as k,t as L}from"../../../chunks/unitFormatUtils.js";import{f as C,e as P,o as S}from"../../../chunks/vec2.js";import{c as w,f as b}from"../../../chunks/vec2f64.js";import{c as A,d as M,b as V,p as D,h as x,k as G,E as U,i as R,q as O}from"../../../chunks/vec3.js";import{c as T}from"../../../chunks/vec3f64.js";import{a as z,f as E}from"../../../chunks/vec4f64.js";import{j as I,x as F,a1 as W,a2 as B,a3 as q,a4 as N}from"../../../chunks/unitUtils.js";import H from"../../../geometry/SpatialReference.js";import{p as $}from"../../../chunks/projectVectorToVector.js";import{p as Q}from"../../../chunks/projectPointToVector.js";import{p as Z}from"../../../chunks/projectPointToWGS84ComparableLonLat.js";import{A as J}from"../../../chunks/Axis.js";import{c as X}from"../../../chunks/Indices.js";import{s as K}from"../../../geometry/Extent.js";import{b as Y}from"../../../chunks/triangle.js";import{s as ee,b as te,f as se,t as ie,p as re,a as oe,c as ne,d as ae}from"../../../chunks/measurementUtils.js";import{m as he,U as le}from"../../../chunks/UnitNormalizer.js";import{g as ce}from"../../../chunks/ElevationProvider.js";import{m as pe,t as de}from"../../../chunks/mathUtils2.js";import{t as me}from"../../../chunks/euclideanAreaMeasurementUtils.js";import ue from"../../../core/Evented.js";import{L as ge}from"../../../chunks/Logger.js";import _e from"../../../geometry/Point.js";import{e as fe,a as ye}from"../../../chunks/aaBoundingRect.js";import{l as je,L as ve}from"../../../chunks/LineVisualElement.js";import{E as ke,a as Le,c as Ce,C as Pe}from"../../../chunks/EditGeometryOperations.js";import"../../../intl.js";import{u as Se,m as we,d as be,B as Ae,e as Me}from"../../../chunks/colorUtils2.js";import{f as Ve}from"../../../chunks/quantityFormatUtils.js";import{h as De,d as xe}from"../../../chunks/mat4.js";import{a as Ge}from"../../../chunks/mat4f64.js";import{L as Ue,G as Re,E as Oe}from"../../../chunks/Segment.js";import{a as Te,c as ze}from"../../../chunks/vec4.js";import{O as Ee}from"../../../chunks/Object3DVisualElement.js";import{A as Ie}from"../../../chunks/Attribute.js";import{G as Fe}from"../../../chunks/Geometry.js";import{D as We,M as Be,R as qe}from"../../../chunks/Material.js";import{V as Ne}from"../../../chunks/VertexAttribute.js";import{S as He}from"../../../chunks/ShaderOutput.js";import{D as $e,G as Qe}from"../../../chunks/DefaultBufferWriter.js";import{R as Ze}from"../../../chunks/RenderSlot.js";import{P as Je}from"../../../chunks/DefaultLayouts.js";import{T as Xe}from"../../../chunks/TriangleMaterial.js";import{R as Ke,S as Ye,P as et}from"../../../chunks/Program2.js";import{o as tt,a as st,b as it}from"../../../chunks/OrderIndependentTransparency.js";import{T as rt}from"../../../chunks/TransparencyPassType.js";import{m as ot,C as nt}from"../../../chunks/ColorConversion.glsl.js";import{a as at}from"../../../chunks/View.glsl.js";import{F as ht}from"../../../chunks/Float2PassUniform.js";import{F as lt}from"../../../chunks/Float4PassUniform.js";import{g as ct}from"../../../chunks/interfaces3.js";import{S as pt}from"../../../chunks/ShaderBuilder.js";import{f as dt}from"../../../chunks/enums3.js";import{s as mt,m as ut,d as gt,a as _t}from"../../../chunks/renderState2.js";import{p as ft}from"../../../chunks/ShaderTechniqueConfiguration.js";import{D as yt}from"../../../chunks/Texture2.js";import{c as jt}from"../../../chunks/lineStippleUtils.js";import{o as vt}from"../../../chunks/locale.js";import{f as kt}from"../../../chunks/messages.js";import"../../../core/Handles.js";import"../../../chunks/metadata.js";import"../../../core/lang.js";import"../../../chunks/utils.js";import"../../../chunks/handleUtils.js";import"../../../chunks/ObjectPool.js";import"../../../chunks/ObservableBase.js";import"../../../chunks/tracking.js";import"../../../core/scheduling.js";import"../../../chunks/nextTick.js";import"../../../chunks/PooledArray.js";import"../../../core/promiseUtils.js";import"../../../core/Error.js";import"../../../config.js";import"../../../chunks/time.js";import"../../../chunks/getDefaultUnitForView.js";import"../../../portal/Portal.js";import"../../../kernel.js";import"../../../core/urlUtils.js";import"../../../core/JSONSupport.js";import"../../../request.js";import"../../../core/Loadable.js";import"../../../core/Promise.js";import"../../../chunks/reader.js";import"../../../portal/PortalGroup.js";import"../../../portal/PortalQueryParams.js";import"../../../chunks/jsonMap.js";import"../../../geometry/support/webMercatorUtils.js";import"../../../chunks/Ellipsoid.js";import"../../../chunks/writer.js";import"../../../chunks/assets.js";import"../../../geometry/Geometry.js";import"../../../core/accessorSupport/decorators/cast.js";import"../../../portal/PortalQueryResult.js";import"../../../portal/PortalUser.js";import"../../../portal/PortalFolder.js";import"../../../chunks/asyncUtils.js";import"../../../core/Collection.js";import"../../../chunks/shared.js";import"../../../chunks/SimpleObservable.js";import"../../../geometry/Multipoint.js";import"../../../chunks/zmUtils.js";import"../../../geometry/Polygon.js";import"../../../chunks/extentUtils.js";import"../../../chunks/common.js";import"../../../geometry/Polyline.js";import"../../../chunks/projectBuffer.js";import"../../../chunks/geodesicConstants.js";import"../../../geometry/support/GeographicTransformation.js";import"../../../geometry/support/GeographicTransformationStep.js";import"../../../chunks/zscale.js";import"../../../chunks/ByteSizeUnit.js";import"../../../chunks/Cyclical.js";import"../../../chunks/projectVectorToWGS84ComparableLonLat.js";import"../../../chunks/vector.js";import"../../../chunks/mat3f64.js";import"../../../chunks/quatf64.js";import"../../../chunks/lineSegment.js";import"../../../geometry/geometryEngine.js";import"../../../chunks/geometryEngineBase.js";import"../../../chunks/_commonjsHelpers.js";import"../../../chunks/hydrated.js";import"../../../geometry/support/geodesicUtils.js";import"../../../geometry.js";import"../../../chunks/typeUtils.js";import"../../../geometry/support/jsonUtils.js";import"../../../chunks/screenUtils.js";import"../../../chunks/dehydratedFeatureUtils.js";import"../../../chunks/earcut.js";import"../../../chunks/plane.js";import"../../../chunks/measurementUtils2.js";import"../../../chunks/line.js";import"../../../chunks/DoubleArray.js";import"../../../chunks/ViewingMode.js";import"../../../chunks/ContentObject.js";import"../../../chunks/geometry2dUtils.js";import"../../../chunks/date.js";import"../../../chunks/timeZoneUtils.js";import"../../../chunks/datetime.js";import"../../../Color.js";import"../../../chunks/colorUtils.js";import"../../../chunks/VisualElement.js";import"../../../chunks/viewUtils.js";import"../../../chunks/dehydratedPoint.js";import"../../../chunks/elevationInfoUtils.js";import"../../../chunks/unitConversionUtils.js";import"../../../chunks/lengthUtils.js";import"../../../chunks/projector.js";import"../../../chunks/widgetUtils.js";import"../../../chunks/TextOverlayItem.js";import"../../../chunks/basicInterfaces.js";import"../../../chunks/Util.js";import"../../../chunks/doublePrecisionUtils.js";import"../../../chunks/aaBoundingBox.js";import"../../../chunks/BufferView.js";import"../../../chunks/InterleavedLayout.js";import"../../../chunks/types.js";import"../../../chunks/sphere.js";import"../../../chunks/Octree.js";import"../../../chunks/frustum.js";import"../../../chunks/FloatsPassUniform.js";import"../../../chunks/mat3.js";import"../../../chunks/MarkerSizing.glsl.js";import"../../../chunks/VisualVariables.glsl.js";import"../../../chunks/Float3PassUniform.js";import"../../../chunks/Matrix3PassUniform.js";import"../../../chunks/FloatPassUniform.js";import"../../../chunks/floatRGBA.js";import"../../../chunks/Texture.js";import"../../../chunks/contextUtils.js";import"../../../chunks/RibbonLine.glsl.js";import"../../../chunks/ForwardLinearDepth.glsl.js";import"../../../chunks/Matrix4PassUniform.js";import"../../../chunks/Slice.glsl.js";import"../../../chunks/ObjectAndLayerIdColor.glsl.js";import"../../../chunks/OutputDepth.glsl.js";import"../../../chunks/RgbaFloat16Encoding.glsl.js";import"../../../chunks/ReadLinearDepth.glsl.js";import"../../../chunks/Texture2DPassUniform.js";import"../../../chunks/PiUtils.glsl.js";import"../../../chunks/AlphaCutoff.js";import"../../../chunks/InstancedDoublePrecision.glsl.js";import"../../../chunks/requestImageUtils.js";function Lt(e,t,s,i,r){A(Ct,e),M(Pt,e,t),$(Ct,s,Ct,r),$(Pt,s,Pt,r),V(i,Pt,Ct),D(i,i)}const Ct=T(),Pt=T();class St{get numVertices(){return this._length}get hasStagedVertex(){return this._hasCursorPoint}constructor(e,t){this.validMeasurement=!1,this.positionsWorldCoords=[],this.positionsRenderCoords=[],this.positionsProjectedWorldCoords=[],this.positionsFittedRenderCoords=[],this.positionsGeographic=[],this.positionsSpherical=[],this.positionsStereographic=[],this.pathSegmentLengths=[],this.geodesicPathSegmentLengths=[],this.perimeterSegmentLengths=[],this.intersectingSegments=new Set,this.geodesicIntersectingSegments=new Set,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.areaCentroidWorldCoords=T(),this.areaCentroidRenderCoords=T(),this.geodesicAreaCentroidRenderCoords=T(),this.area=null,this.geodesicArea=null,this.pathLength=null,this.geodesicPathLength=null,this.perimeterLength=null,this._length=0,this._centroidRenderCoords=T(),this._planeWorldCoords=z(),this._worldUp=T(),this._worldTangent=T(),this._frame=[T(),T(),T()],this._pathVersion=-1,this._hasCursorPoint=!1,this._mode=null,this._tempU=T(),this._tempV=T(),this._tempVec3=T(),this._tempSphere={center:T(),radius:0},this._sceneView=e,this.unitNormalizer=t}update(e,t,s,i,r,o){const n=null!=t,a=this._pathVersion===e.version,h=this._hasCursorPoint===n,l=this._mode===r;return!(a&&!o&&h&&l&&e.isValidPolygon||(this._pathVersion=e.version,this._hasCursorPoint=n,this._updateCursorSegmentLength(e,t),this._update(e,t,s,i,r),0))}_update(e,t,s,i,r){const o=this.unitNormalizer,n=this._sceneView.renderSpatialReference,a=this.unitNormalizer.spatialReference;let h=e.numVertices;const l=!(null==t||t.equals(e.lastPoint)||h>2&&t.equals(e.firstPoint));l&&(h+=1);const c=!e.polygonIsClosed&&h>2,p=e.polygonIsClosed||c;this._resize(h);const u=g(s.spatialReference),_=d(s.spatialReference,u)&&m(s.spatialReference),{positionsGeographic:f,positionsWorldCoords:y,positionsRenderCoords:j,positionsSpherical:k}=this,L=(e,t)=>{!function(e,t){t.hasZ||(t.z=ce(e,t,"ground")??0)}(s.elevationProvider,e),Q(e,y[t],a),Q(e,j[t],n),_&&(Z(e,f[t]),Q(e,k[t],u),D(k[t],k[t]))};e.forEachVertexPosition(((e,t)=>L(e,t))),l&&L(t,h-1);const C=this._updatePathLengths(p);if(this.pathLength=this._length>1?v(o.normalizeDistance(C),"meters"):null,_){const e=this._updateGeodesicPathLengths(p,a);this.geodesicPathLength=this._length>1?v(e,"meters"):null}else this.geodesicPathLength=null;if(this._updateMode(r),!p)return this.area=null,this.geodesicArea=null,this.perimeterLength=null,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.intersectingSegments.clear(),this.geodesicIntersectingSegments.clear(),void(this.validMeasurement=!1);this._updateAreaAndPerimeterLength(s,o,n,a,i),_&&this._updateGeodesicArea(s),this.validMeasurement=!0}getData(){return{validMeasurement:this.validMeasurement,numVertices:this.numVertices,hasStagedVertex:this.hasStagedVertex,positionsWorldCoords:this.positionsWorldCoords,positionsRenderCoords:this.positionsRenderCoords,positionsProjectedWorldCoords:this.positionsProjectedWorldCoords,positionsFittedRenderCoords:this.positionsFittedRenderCoords,positionsGeographic:this.positionsGeographic,positionsSpherical:this.positionsSpherical,positionsStereographic:this.positionsStereographic,pathSegmentLengths:this.pathSegmentLengths,geodesicPathSegmentLengths:this.geodesicPathSegmentLengths,perimeterSegmentLengths:this.perimeterSegmentLengths,intersectingSegments:this.intersectingSegments,geodesicIntersectingSegments:this.geodesicIntersectingSegments,triangleIndices:this.triangleIndices,geodesicTriangleIndices:this.geodesicTriangleIndices,areaCentroidWorldCoords:this.areaCentroidWorldCoords,areaCentroidRenderCoords:this.areaCentroidRenderCoords,geodesicAreaCentroidRenderCoords:this.geodesicAreaCentroidRenderCoords,fittingMode:this.fittingMode,area:this.area,geodesicArea:this.geodesicArea,pathLength:this.pathLength,geodesicPathLength:this.geodesicPathLength,perimeterLength:this.perimeterLength,unitNormalizer:this.unitNormalizer,actualMeasurementMode:this.actualMeasurementMode}}_resize(e){for(e<this._length&&(this.positionsWorldCoords.length=e,this.positionsRenderCoords.length=e,this.positionsProjectedWorldCoords.length=e,this.positionsFittedRenderCoords.length=e,this.positionsGeographic.length=e,this.positionsSpherical.length=e,this.positionsStereographic.length=e,this.pathSegmentLengths.length=e,this.geodesicPathSegmentLengths.length=e,this.perimeterSegmentLengths.length=e,this._length=e);this._length<e;)this.positionsWorldCoords.push(T()),this.positionsRenderCoords.push(T()),this.positionsProjectedWorldCoords.push(w()),this.positionsFittedRenderCoords.push(T()),this.positionsGeographic.push(T()),this.positionsSpherical.push(T()),this.positionsStereographic.push(w()),this.pathSegmentLengths.push(0),this.geodesicPathSegmentLengths.push(0),this.perimeterSegmentLengths.push(0),++this._length}_updatePathLengths(e){const t=this.positionsWorldCoords,s=this.pathSegmentLengths;let i=0;for(let r=0;r<this._length;++r){const o=s[r]=x(t[r],t[(r+1)%this._length]);(r<this._length-1||e)&&(i+=o)}return i}_updateGeodesicPathLengths(e,t){const s=this.positionsGeographic,i=this.geodesicPathSegmentLengths;let r=0;for(let o=0;o<this._length;++o){const n=i[o]=ee(s[o],s[(o+1)%this._length],t??void 0);(o<this._length-1||e)&&(r+=n)}return r}_updateAreaAndPerimeterLength(e,t,s,i,r){const o=e.renderCoordsHelper,n=this.positionsWorldCoords,a=this.positionsRenderCoords,h=this.positionsProjectedWorldCoords,l=this.positionsFittedRenderCoords,c=this._planeWorldCoords,p=this._centroidRenderCoords;he(a,p),o.worldUpAtPosition(p,this._worldUp),o.worldBasisAtPosition(p,J.X,this._worldTangent),Lt(p,this._worldUp,s,this._worldUp,i),Lt(p,this._worldTangent,s,this._worldTangent,i),n.length>2&&te(n,c),this.fittingMode=this._selectFittingMode(c,n,this._worldUp,r);let d=0;if("horizontal"===this.fittingMode){let e=-1/0;a.forEach(((t,s)=>{const i=o.getAltitude(a[s]);i>e&&(e=i,d=s)}))}const m=n[d];let u=c,g=this._worldTangent;"horizontal"===this.fittingMode?u=this._worldUp:"vertical"===this.fittingMode&&(u=this._tempVec3,g=this._worldUp,pe(c,this._worldUp,u)),A(this._frame[2],u),pe(g,u,this._frame[0]),G(this._frame[1],this._frame[0],this._frame[2]),U(this._frame[1],this._frame[1]);const _=this._tempVec3,f=this._tempU,y=this._tempV;for(let e=0;e<this._length;++e){const t=h[e],r=l[e];V(_,n[e],m),C(t,R(this._frame[0],_),R(this._frame[1],_)),O(f,this._frame[0],t[0]),O(y,this._frame[1],t[1]),M(_,f,y),M(_,_,m),$(_,i,r,s)}this.perimeterLength=this._length>0?v(t.normalizeDistance(this._updatePerimeterLengths()),"meters"):null,he(l,this.areaCentroidRenderCoords),$(this.areaCentroidRenderCoords,s,this.areaCentroidWorldCoords,i),this._updateIntersectingSegments(),this.area=0===this.intersectingSegments.size?k(t.normalizeArea(this._computeArea()),"square-meters"):null}_updateGeodesicArea(e){const{renderCoordsHelper:t,spatialReference:s}=e,{positionsSpherical:i,positionsStereographic:r}=this,o=this._tempVec3,n=se(i,o);if(!n)return void(this.geodesicArea=null);const a=this._tempU,h=this._tempV;de(o,a,h);for(let e=0;e<this._length;++e){const t=R(i[e],a),s=R(i[e],h),n=R(i[e],o);C(r[e],t/n,s/n)}O(o,o,I(s).radius),t.toRenderCoords(o,g(s),this.geodesicAreaCentroidRenderCoords),this._updateGeodesicIntersectingSegments(),this.geodesicArea=n&&0===this.geodesicIntersectingSegments.size?k(this._computeGeodesicArea(),"square-meters"):null}_updatePerimeterLengths(){const e=this.positionsProjectedWorldCoords,t=this.perimeterSegmentLengths;let s=0;for(let i=0;i<this._length;++i)s+=t[i]=P(e[i],e[(i+1)%this._length]);return s}_updateIntersectingSegments(){const e=this.positionsProjectedWorldCoords,t=this.intersectingSegments;t.clear();for(let s=0;s<this._length;++s)for(let i=s+2;i<this._length;++i){if((i+1)%this._length===s)continue;const r=e[s],o=e[(s+1)%this._length],n=e[i],a=e[(i+1)%this._length];K(r,o,n,a)&&(t.add(s),t.add(i))}}_computeArea(){const e=this.positionsProjectedWorldCoords,t=this.triangleIndices=X(me(e));let s=0;for(let i=0;i<t.length;i+=3)s+=Y(e[t[i]],e[t[i+1]],e[t[i+2]]);return s}_updateGeodesicIntersectingSegments(){const e=this.positionsStereographic,t=this.geodesicIntersectingSegments;t.clear();for(let s=0;s<this._length;++s)for(let i=s+2;i<this._length;++i){if((i+1)%this._length===s)continue;const r=e[s],o=e[(s+1)%this._length],n=e[i],a=e[(i+1)%this._length];K(r,o,n,a)&&(t.add(s),t.add(i))}}_computeGeodesicArea(){const e=this.positionsGeographic,t=this.positionsStereographic,s=this.geodesicTriangleIndices=X(me(t));let i=0;for(let t=0;t<s.length;t+=3)i+=ie(e[s[t]],e[s[t+1]],e[s[t+2]],H.WGS84);return i}_selectFittingMode(e,t,s,i){const r=t.map((t=>Math.abs(re(e,t)))).reduce(((e,t)=>Math.max(e,t)),0);oe(t,this._tempSphere);const o=r/(2*this._tempSphere.radius),n=o<i.maxRelativeErrorCoplanar,a=o<i.maxRelativeErrorAlmostCoplanar;let h="horizontal";return n?h="oblique":a&&(h=Math.abs(R(s,e))>Math.cos(y(i.verticalAngleThreshold))?"horizontal":"vertical"),h}_updateCursorSegmentLength(e,t){const s=e.lastPoint;e.isValidPolygon||null==s||null==t?(this.geodesicStagedSegmentLength=null,this.stagedSegmentLength=null):(this.geodesicStagedSegmentLength=v(ne(s,t),"meters"),this.stagedSegmentLength=v(this.unitNormalizer.normalizeDistance(ae(s,t,this.unitNormalizer.spatialReference)),"meters"))}_updateMode(e){if(e===a.Auto){this.actualMeasurementMode="euclidean";let e=0;null!=this.geodesicPathLength&&(e+=this.geodesicPathLength.value),e>wt&&(this.actualMeasurementMode="geodesic")}else this.actualMeasurementMode=e===a.Euclidean?"euclidean":"geodesic";null==this.geodesicPathLength&&(this.actualMeasurementMode="euclidean"),this._mode=e}}const wt=1e5;let bt=class extends t{constructor(e){super(e)}initialize(){const e=this.view.spatialReference,t=g(e),s=t===f?_:t,i=!e||d(e,s)?s:e,r=new le(i);this._measurementDataManager=new St(this.view,r),this.addHandles([this.analysisViewData.path.on("change",(()=>this._update())),h((()=>this.analysisViewData.stagedPoint),(()=>this._update()),l),h((()=>this.analysisViewData.mode),(()=>this._update()),l)]),this._update()}_update(e=!1){const{analysisViewData:t,view:s}=this;this._measurementDataManager.update(t.path,t.stagedPoint,s,{maxRelativeErrorCoplanar:.005,maxRelativeErrorAlmostCoplanar:.01,verticalAngleThreshold:80},t.mode,e)&&(t.measurementData=this._measurementDataManager.getData())}};e([i({constructOnly:!0})],bt.prototype,"view",void 0),e([i({constructOnly:!0})],bt.prototype,"analysis",void 0),e([i({constructOnly:!0})],bt.prototype,"analysisViewData",void 0),bt=e([r("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementController")],bt);const At="esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurement3DPathHelper",Mt=ge.getLogger(At);let Vt=class extends ue.EventedAccessor{constructor(e={}){super(e),this._version=0,this._internalGeometryChange=!1,this._extent=fe()}set areaMeasurement(e){this._set("areaMeasurement",e),null!=e&&null!=this.view&&this._initialize(e,this.view)}set view(e){this._set("view",e),null!=e&&null!=this.areaMeasurement&&this._initialize(this.areaMeasurement,e)}get constructed(){return null!=this.areaMeasurement&&null!=this.view}get version(){return this._version}get isEmptyPolygon(){return!this.constructed||0===this._editGeometry.components.length}get isValidPolygon(){return this.constructed&&this.polygonIsClosed}get extent(){if(this.constructed&&this._editGeometry.components.length>0&&this._editGeometry.components[0].vertices.length>0){const e=fe(this._extent);return this.forEachVertex((t=>{ye(e,t.pos)})),e}return null}get spatialReference(){return this.constructed?this._editGeometry.coordinateHelper.spatialReference:null}_initialize(e,t){this.removeAllHandles(),this.addHandles(h((()=>e.geometry),(()=>{this._updateEditGeometryFromModelGeometry(e,t)}),c)),this._makeDirty(!0)}_makeDirty(e=!1){this.notifyChange("polygonIsClosed"),this.notifyChange("isValidPolygon"),this.notifyChange("initialized"),this.notifyChange("extent"),e&&this.notifyChange("numVertices")}_updateEditGeometryFromModelGeometry(e,t){if(this._version++,this._internalGeometryChange)return;this.removeHandles("EditGeometry");let s=e.geometry;if(null!=s){const i=u(s,t.spatialReference);null==i&&je(e,s.spatialReference,Mt),s=i}this._editGeometryOperations=null!=s?ke.fromGeometry(s,t.state.viewingMode):new ke(new Le("polygon",Ce(!0,!1,t.spatialReference))),this._makeDirty(!0),this.emit("change"),this.addHandles(this._editGeometry.on("change",(t=>{this._makeDirty(null!=t.addedVertices||null!=t.removedVertices),this._internalGeometryChange=!0,e.geometry=this.numVertices>0?this._editGeometry.geometry:null,this._internalGeometryChange=!1})),"EditGeometry")}get _editGeometry(){return this._editGeometryOperations.data}get vertices(){const e=[];return this.forEachVertex((t=>{e.push(t)})),e}get numVertices(){return this.constructed&&this._editGeometry.components.length>0?this._editGeometry.components[0].vertices.length:0}get polygonIsClosed(){return this._editGeometry.components.length>0&&this._editGeometry.components[0].isClosed()}get firstPoint(){if(this.constructed&&this._editGeometry.components.length>0){const e=this._editGeometry.components[0].getFirstVertex();if(null!=e)return this._editGeometry.coordinateHelper.vectorToPoint(e.pos)}return null}get lastPoint(){if(this.constructed&&this._editGeometry.components.length>0){const e=this._editGeometry.components[0].getLastVertex();if(null!=e)return this._editGeometry.coordinateHelper.vectorToPoint(e.pos)}return null}getVertex(e){if(!this.constructed||0===this._editGeometry.components.length||0===this._editGeometry.components[0].vertices.length)return null;const t=this._editGeometry.components[0].vertices[0];let s=t;do{if(s.index===e)return s;s=s.rightEdge.rightVertex}while(s!==t&&null!=s);return null}getVertexPositionAsPoint(e){return this._editGeometry.coordinateHelper.vectorToPoint(e.pos)}getVertexPositionAsPointFromIndex(e){return this._editGeometry.coordinateHelper.vectorToPoint(this.getVertex(e).pos)}forEachVertex(e){this.constructed&&this._editGeometry.components.length>0&&this._editGeometry.components[0].iterateVertices(e)}forEachVertexPosition(e){const t=this._editGeometry.coordinateHelper;this.forEachVertex(((s,i)=>{t.vectorToPoint(s.pos,Dt),e(Dt,i)}))}clear(){null!=this.areaMeasurement&&(this.areaMeasurement.geometry=null)}add(e){if(!this.constructed)return null;if(0===this._editGeometry.components.length){const e=this.view;this._editGeometry.components.push(new Pe(e.spatialReference,e.state.viewingMode))}const t=this._editGeometryOperations.appendVertex(this._editGeometry.coordinateHelper.pointToVector(e));return this.emit("change"),t}close(){if(!this.constructed||0===this._editGeometry.components.length)return null;const e=this._editGeometryOperations.closeComponent(this._editGeometry.components[0]);return this.emit("change"),e}ensureContains(e,t=""){let s=!1;if(this._editGeometry.components.forEach((t=>{t.iterateVertices((t=>{t===e&&(s=!0)}))})),!s)throw new Error(`vertex doesnt exist ${t}`);return s}setVertexPosition(e,t){if(!this.constructed)return null;const s=this._editGeometryOperations.setVertexPosition(e,this._editGeometry.coordinateHelper.pointToVector(t));return this.emit("change"),s}equals(e){if(this.numVertices!==e.numVertices)return!1;let t=!0;return this.forEachVertexPosition(((s,i)=>{const r=e.getVertexPositionAsPointFromIndex(i);s.equals(r)||(t=!1)})),!!t}};e([i({value:null})],Vt.prototype,"areaMeasurement",null),e([i({value:null})],Vt.prototype,"view",null),e([i()],Vt.prototype,"isEmptyPolygon",null),e([i()],Vt.prototype,"isValidPolygon",null),e([i()],Vt.prototype,"extent",null),e([i()],Vt.prototype,"spatialReference",null),e([i()],Vt.prototype,"numVertices",null),e([i()],Vt.prototype,"polygonIsClosed",null),Vt=e([r(At)],Vt);const Dt=new _e,xt=Object.freeze(Object.defineProperty({__proto__:null,build:function(e){const t=new pt,{vertex:s,fragment:i}=t;return at(s,e),t.attributes.add(Ne.POSITION,"vec3"),t.attributes.add(Ne.UV0,"vec2"),t.varyings.add("vUV","vec2"),e.multipassEnabled&&t.varyings.add("depth","float"),s.code.add(ct`
    void main(void) {
      vUV = uv0;
      ${e.multipassEnabled?"depth = (view * vec4(position, 1.0)).z;":""}
      gl_Position = proj * view * vec4(position, 1.0);
    }
  `),t.include(ot,e),i.uniforms.add(new ht("size",(e=>e.size))),i.uniforms.add(new lt("color1",(e=>e.color1))),i.uniforms.add(new lt("color2",(e=>e.color2))),i.include(nt),i.code.add(ct`
    void main() {
      ${e.multipassEnabled?"terrainDepthTest(depth);":""}
      vec2 uvScaled = vUV / (2.0 * size);

      vec2 uv = fract(uvScaled - 0.25);
      vec2 ab = clamp((abs(uv - 0.5) - 0.25) / fwidth(uvScaled), -0.5, 0.5);
      float fade = smoothstep(0.25, 0.5, max(fwidth(uvScaled.x), fwidth(uvScaled.y)));
      float t = mix(abs(ab.x + ab.y), 0.5, fade);

      fragColor = mix(color2, color1, t);
      ${e.transparencyPassType===rt.Color?"fragColor = premultiplyAlpha(fragColor);":""}
    }
  `),t}},Symbol.toStringTag,{value:"Module"}));class Gt extends Ye{initializeProgram(e){return new et(e.rctx,Gt.shader.get().build(this.configuration),We)}_setPipelineState(e){const t=this.configuration,s=e===rt.NONE,i=e===rt.FrontFace;return ut({blending:t.transparent?s?Rt:tt(e):null,depthTest:{func:st(e)},depthWrite:s?t.writeDepth?gt:null:it(e),colorWrite:_t,polygonOffset:s||i?t.polygonOffset?Ut:null:{factor:-1,units:-25}})}initializePipeline(){return this._setPipelineState(this.configuration.transparencyPassType)}}Gt.shader=new Ke(xt,(()=>Promise.resolve().then((()=>xt))));const Ut={factor:0,units:-25},Rt=mt(dt.SRC_ALPHA,dt.ONE,dt.ONE_MINUS_SRC_ALPHA,dt.ONE_MINUS_SRC_ALPHA);class Ot extends yt{constructor(){super(...arguments),this.transparencyPassType=rt.NONE,this.transparent=!1,this.writeDepth=!0,this.polygonOffset=!1,this.multipassEnabled=!1,this.cullAboveGround=!1}}e([ft({count:rt.COUNT})],Ot.prototype,"transparencyPassType",void 0),e([ft()],Ot.prototype,"transparent",void 0),e([ft()],Ot.prototype,"writeDepth",void 0),e([ft()],Ot.prototype,"polygonOffset",void 0),e([ft()],Ot.prototype,"multipassEnabled",void 0),e([ft()],Ot.prototype,"cullAboveGround",void 0),e([ft({constValue:!1})],Ot.prototype,"occlusionPass",void 0);class Tt extends Xe{constructor(e){super(e,new Et),this._configuration=new Ot}getConfiguration(e,t){return this._configuration.transparent=this.parameters.transparent,this._configuration.writeDepth=this.parameters.writeDepth,this._configuration.polygonOffset=this.parameters.polygonOffset,this._configuration.transparencyPassType=t.transparencyPassType,this._configuration.multipassEnabled=t.multipassEnabled,this._configuration.cullAboveGround=t.multipassTerrain.cullAboveGround,this._configuration}produces(e,t){return!(t!==He.Color&&t!==He.Alpha||e!==(this.parameters.transparent?this.parameters.writeDepth?Ze.TRANSPARENT_MATERIAL:Ze.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL:Ze.OPAQUE_MATERIAL)&&e!==Ze.DRAPED_MATERIAL)}createGLMaterial(e){return new zt(e)}createBufferWriter(){return new $e(Je)}}class zt extends Qe{beginSlot(e){return this.ensureTechnique(Gt,e)}}class Et extends Be{constructor(){super(...arguments),this.size=b(1,1),this.color1=E(.75,.75,.75,1),this.color2=E(.5,.5,.5,1),this.transparent=!1,this.writeDepth=!0,this.polygonOffset=!1}}class It extends Ee{constructor(e){super(e),this._checkerBoardMaterial=null,this._renderOccluded=qe.OccludeAndTransparent,this._geometry=null,this._size=b(1,1),this._color1=E(1,.5,0,.5),this._color2=E(1,1,1,.5),this.applyProperties(e)}get renderOccluded(){return this._renderOccluded}set renderOccluded(e){e!==this._renderOccluded&&(this._renderOccluded=e,this._updateMaterial())}get geometry(){return this._geometry}set geometry(e){this._geometry=e,this.recreateGeometry()}get size(){return this._size}set size(e){S(this._size,e),this._updateMaterial()}get color1(){return this._color1}set color1(e){Te(e,this._color1)||(ze(this._color1,e),this._updateMaterial())}get color2(){return this._color2}set color2(e){Te(e,this._color2)||(ze(this._color2,e),this._updateMaterial())}_updateMaterial(){null!=this._checkerBoardMaterial&&this._checkerBoardMaterial.setParameters({size:this._size,color1:this._color1,color2:this._color2,renderOccluded:this._renderOccluded})}createExternalResources(){this._checkerBoardMaterial=new Tt({size:this._size,color1:this._color1,color2:this._color2,transparent:!0,writeDepth:!1,polygonOffset:!0,renderOccluded:qe.OccludeAndTransparent,isDecoration:this.isDecoration})}destroyExternalResources(){this._checkerBoardMaterial=null}forEachExternalMaterial(e){null!=this._checkerBoardMaterial&&e(this._checkerBoardMaterial)}createGeometries(e){if(null==this._geometry||null==this._checkerBoardMaterial)return;const t=Ft;De(t,this.transform);const s=this._geometry,i=[],r=T();s.position.forEach((e=>{V(r,e,t),i.push(r[0],r[1],r[2])}));const o=[];s.uv.forEach((e=>{o.push(e[0],e[1])}));const n=new Fe(this._checkerBoardMaterial,[[Ne.POSITION,new Ie(i,s.triangleIndices,3,!0)],[Ne.UV0,new Ie(o,s.triangleIndices,2,!0)]]);e.addGeometry(n)}}const Ft=T();let Wt=class extends t{get _parameters(){const{accentColor:e,textColor:t}=this.view.effectiveTheme,s=Se(e),i=we(e,.5),r=we(be(e),.5),o=be(t,Ae.Low);return{accentColor:s,transparentAccentColor:i,transparentContrastColor:r,intersectingLineColor:[1,.2,0,1],textColor:t,textBackgroundColor:Me(o,.6),textCalloutColor:Me(o,.5),pathLineWidth:3,perimeterLineWidth:2,projectionLineWidth:2,projectionLineStippleSize:5,labelDistance:25}}get visible(){return this.analysisViewData.visible}get testData(){return{labels:{area:this._areaLabel,perimeterLength:this._perimeterLengthLabel}}}constructor(e){super(e),this._path=null,this._intersectedPath=null,this._perimeter=null,this._intersectedPerimeter=null,this._projectionLines=null,this._measurementArea=null,this._areaLabel=null,this._perimeterLengthLabel=null,this._pathSegments=[],this._perimeterSegments=[],this._origin=T(),this._originTransform=Ge(),this.messages=null,this.viewData=qt,this.areaLabel=null,this.perimeterLengthLabel=null,this.loadingMessages=!0}initialize(){const{analysisViewData:e,_parameters:t,view:s}=this;this._path=new ve({view:s,attached:!0,width:t.pathLineWidth,polygonOffset:!0,renderOccluded:qe.OccludeAndTransparent,isDecoration:!0}),this._intersectedPath=new ve({view:s,attached:!0,width:t.pathLineWidth,polygonOffset:!0,renderOccluded:qe.OccludeAndTransparent,isDecoration:!0}),this._perimeter=new ve({view:s,attached:!0,width:t.perimeterLineWidth,polygonOffset:!0,renderOccluded:qe.OccludeAndTransparent,isDecoration:!0}),this._intersectedPerimeter=new ve({view:s,attached:!0,width:t.perimeterLineWidth,color:t.intersectingLineColor,polygonOffset:!0,renderOccluded:qe.OccludeAndTransparent,isDecoration:!0}),this._projectionLines=new ve({view:s,attached:!0,width:t.projectionLineWidth,stipplePattern:jt(t.projectionLineStippleSize),polygonOffset:!0,renderOccluded:qe.OccludeAndTransparent,isDecoration:!0}),this._measurementArea=new It({view:s,attached:!0,isDecoration:!0});const i={attached:!0,view:s,isDecoration:!0};this._areaLabel=new Ue({...i,fontSize:Bt.Large}),this._perimeterLengthLabel=new Ue({...i,fontSize:Bt.Small}),this.addHandles([h((()=>[e.mode,this.visible,e.unit,e.measurementData,e.stagedPoint]),(()=>this._update()),c),h((()=>s.state?.camera),(()=>this._updateLabels()),c),vt((()=>this._updateMessageBundle())),h((()=>this._parameters),(({accentColor:e,transparentAccentColor:t,transparentContrastColor:s,textColor:i,textBackgroundColor:r,textCalloutColor:o})=>{const{_path:n,_intersectedPath:a,_perimeter:h,_projectionLines:l,_measurementArea:c,_areaLabel:p,_perimeterLengthLabel:d}=this;n.color=e,a.color=e,h.color=e,l.color=e,c.color1=t,c.color2=s,p.textColor=i,p.backgroundColor=r,p.calloutColor=o,d.textColor=i,d.backgroundColor=r,d.calloutColor=o}),p)]),this._updateMessageBundle()}destroy(){this._measurementArea=s(this._measurementArea),this._path=s(this._path),this._intersectedPath=s(this._intersectedPath),this._perimeter=s(this._perimeter),this._intersectedPerimeter=s(this._intersectedPerimeter),this._areaLabel=s(this._areaLabel),this._perimeterLengthLabel=s(this._perimeterLengthLabel),this._projectionLines=s(this._projectionLines),this.set("view",null)}_update(){if(this.destroyed||!this.view.ready||!this.view.renderCoordsHelper)return;const{analysisViewData:{measurementData:e},analysisViewData:t}=this;null!=e&&(this._updateViewData(e,t.path,t.stagedPoint),this._updateOrigin(),this._updatePathSegments(),this._updatePerimeterSegments(),this._updateArea(),this._updateProjectionLines(),this._updateLabels())}_updateViewData(e,t,s){const i=e.validMeasurement,r="geodesic"===e.actualMeasurementMode,o=r?e.geodesicArea:e.area;let n=1;if(o){const t=this._toPreferredAreaUnit(o,this.analysisViewData.unit);n=j(Math.sqrt(t.value)/Math.sqrt(300)),n*=Math.sqrt(F(1,t.unit,"square-meters")),n/=e.unitNormalizer.normalizeDistance(1)}const a={validMeasurement:i,numVertices:e.numVertices,hasStagedVertex:e.hasStagedVertex,path:t,pathVersion:t.version,stagedPoint:s,measurementData:e,mode:e.actualMeasurementMode,positionsGeographic:e.positionsGeographic,positionsRenderCoords:e.positionsRenderCoords,positionsProjected:e.positionsProjectedWorldCoords,positionsFittedRenderCoords:e.positionsFittedRenderCoords,intersectingSegments:r?e.geodesicIntersectingSegments:e.intersectingSegments,triangleIndices:r?e.geodesicTriangleIndices:e.triangleIndices,fittingMode:e.fittingMode,areaCentroid:r?e.geodesicAreaCentroidRenderCoords:e.areaCentroidRenderCoords,pathLengthLabelSegmentIndex:i?0:t.numVertices-2,perimeterLengthLabelSegmentIndex:0,checkerSize:n};this._set("viewData",a)}_updateOrigin(){const e=this.viewData;he(e.positionsRenderCoords,this._origin),xe(this._originTransform,this._origin),this._measurementArea.transform=this._originTransform,this._projectionLines.transform=this._originTransform}_createSegments(e){const t=this.viewData,s=this.view.renderCoordsHelper.spatialReference,i=t.mode,r=[],o=[],n=[],a=t.numVertices,h=t.validMeasurement?a:a-1;for(let l=0;l<h;++l){const h=t[e][l],c=t[e][(l+1)%a];let p=null;switch(i){case"euclidean":p=new Oe(h,c);break;case"geodesic":p=new Re(h,c,s)}t.intersectingSegments.has(l)?n.push(p):o.push(p),r.push(p)}let l=null;return t.validMeasurement&&t.hasStagedVertex&&h>=2?l=r[r.length-2]:t.hasStagedVertex&&h>=1&&(l=r[r.length-1]),{all:r,nonIntersecting:o,intersecting:n,stagedSegment:l}}_updatePathSegments(){const{visible:e}=this,t=this._createSegments("positionsRenderCoords");this._path.setGeometryFromSegments(t.nonIntersecting,this._origin),this._path.visible=e,this._intersectedPath.setGeometryFromSegments(t.intersecting,this._origin),this._intersectedPath.visible=e,this._pathSegments=t.all}_updatePerimeterSegments(){const e=this.visible&&"euclidean"===this.viewData.mode,t=this._createSegments("positionsFittedRenderCoords");this._perimeter.setGeometryFromSegments(t.nonIntersecting,this._origin),this._perimeter.visible=e,this._intersectedPerimeter.setGeometryFromSegments(t.intersecting,this._origin),this._intersectedPerimeter.visible=e,this._perimeterSegments=t.all}_updateArea(){const e=this.viewData;switch(e.mode){case"euclidean":this._updateAreaEuclidean(e);break;case"geodesic":this._updateAreaGeodesic()}}_updateAreaEuclidean(e){const t=this.visible;e.validMeasurement&&0===e.intersectingSegments.size&&e.triangleIndices?(this._measurementArea.geometry={uv:e.positionsProjected,position:e.positionsFittedRenderCoords,triangleIndices:e.triangleIndices},this._measurementArea.size=[e.checkerSize,e.checkerSize],this._measurementArea.visible=t):this._measurementArea.visible=!1}_updateAreaGeodesic(){this._measurementArea.visible=!1}_updateProjectionLines(){const e=this.viewData,t=this.visible,s=e.mode,i=e.numVertices;if(i>0&&e.validMeasurement&&"euclidean"===s){const s=[];for(let t=0;t<i;++t){const i=T();V(i,e.positionsRenderCoords[t],this._origin);const r=T();V(r,e.positionsFittedRenderCoords[t],this._origin),s.push([i,r])}this._projectionLines.geometry=s,this._projectionLines.visible=t}else this._projectionLines.geometry=null,this._projectionLines.visible=!1}_updateLabels(){if(this.destroyed)return;const{viewData:e}=this,{measurementData:t,mode:s,path:i}=e;if(!i)return;const r=this.visible,o=this._formatAreaLabel(this.messages,"geodesic"===s?t.geodesicArea:t.area,this.analysisViewData.unit);if(null!=o?(this._areaLabel.geometry={type:"point",point:e.areaCentroid},this._areaLabel.text=o,this._areaLabel.visible=e.validMeasurement&&0===e.intersectingSegments.size&&r):this._areaLabel.visible=!1,this._set("areaLabel",o),e.validMeasurement&&0===e.intersectingSegments.size){const s="geodesic"===e.mode,i=s?t.geodesicPathLength:t.validMeasurement?t.perimeterLength:t.pathLength,o=this._formatLengthLabel(this.messages,i,this.analysisViewData.unit);this._set("perimeterLengthLabel",o),this._perimeterLengthLabel.distance=this._parameters.labelDistance,this._perimeterLengthLabel.anchor="top",this._perimeterLengthLabel.text=o,this._perimeterLengthLabel.visible=!0;let n=!0;for(let i=0;i<e.numVertices;++i){const r=(e.perimeterLengthLabelSegmentIndex+i)%e.numVertices,o=s||!t.validMeasurement?this._pathSegments[r]:this._perimeterSegments[r];if(n=!0,this._perimeterLengthLabel.geometry={type:"segment",segment:o,sampleLocation:"center"},!this._perimeterLengthLabel.overlaps(this._areaLabel))break;n=!1}this._perimeterLengthLabel.visible=n&&r}else this._perimeterLengthLabel.visible=!1}_toPreferredAreaUnit(e,t){return L(e,this._preferredAreaUnit(e,t))}_preferredAreaUnit(e,t){switch(t){case"metric":return B(e.value,e.unit);case"imperial":return W(e.value,e.unit);default:return t}}_preferredLengthUnit(e,t){const s=this._deriveLengthUnitFromAreaUnit(t);switch(s){case"metric":return N(e.value,e.unit);case"imperial":return q(e.value,e.unit);default:return s}}_deriveLengthUnitFromAreaUnit(e){switch(e){case"metric":case"ares":case"hectares":return"metric";case"imperial":case"acres":return"imperial";case"square-inches":return"inches";case"square-feet":return"feet";case"square-yards":return"yards";case"square-miles":return"miles";case"square-us-feet":return"us-feet";case"square-millimeters":return"millimeters";case"square-centimeters":return"centimeters";case"square-decimeters":return"decimeters";case"square-meters":return"meters";case"square-kilometers":return"kilometers"}throw new Error("unhandled area unit")}_formatAreaLabel(e,t,s){return e&&t&&Ve(e,t,this._preferredAreaUnit(t,s))}_formatLengthLabel(e,t,s){return e&&t&&Ve(e,t,this._preferredLengthUnit(t,s))}_updateMessageBundle(){this.loadingMessages=!0,kt("esri/core/t9n/Units").then((e=>{this.messages=e,this.view&&this._update()})).finally((()=>{this.loadingMessages=!1}))}};var Bt;e([i()],Wt.prototype,"_parameters",null),e([i()],Wt.prototype,"view",void 0),e([i()],Wt.prototype,"messages",void 0),e([i()],Wt.prototype,"analysis",void 0),e([i()],Wt.prototype,"viewData",void 0),e([i()],Wt.prototype,"analysisViewData",void 0),e([i({readOnly:!0})],Wt.prototype,"areaLabel",void 0),e([i({readOnly:!0})],Wt.prototype,"perimeterLengthLabel",void 0),e([i()],Wt.prototype,"loadingMessages",void 0),e([i()],Wt.prototype,"visible",null),Wt=e([r("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementVisualization")],Wt),function(e){e[e.Small=12]="Small",e[e.Large=16]="Large"}(Bt||(Bt={}));const qt={validMeasurement:!1,numVertices:0,hasStagedVertex:!1,path:null,pathVersion:-1,stagedPoint:null,measurementData:null,mode:null,positionsGeographic:null,positionsRenderCoords:null,positionsProjected:null,positionsFittedRenderCoords:null,intersectingSegments:null,triangleIndices:null,fittingMode:null,areaCentroid:null,pathLengthLabelSegmentIndex:null,perimeterLengthLabelSegmentIndex:null,checkerSize:null};let Nt=class extends(n(t)){constructor(e){super(e),this.type="area-measurement-view-3d",this.analysis=null,this.measurementData=null,this.lastDraggedVertex=null,this.stagedPoint=null,this.mode=a.Auto}initialize(){const{analysis:e,view:t}=this;this.path=new Vt({view:t,areaMeasurement:e}),this.analysisVisualization=new Wt({view:t,analysis:e,analysisViewData:this}),this.analysisController=new bt({view:t,analysis:e,analysisViewData:this})}destroy(){this.analysisController=s(this.analysisController),this.analysisVisualization=s(this.analysisVisualization),this.path.destroy()}get updating(){return!!this.analysisVisualization?.loadingMessages}get result(){const{measurementData:e}=this;return null==e?{area:null,mode:null,perimeter:null}:"euclidean"===e.actualMeasurementMode?{area:e.area,perimeter:e.perimeterLength,mode:"euclidean"}:{area:e.geodesicArea,perimeter:e.pathLength,mode:"geodesic"}}get viewData(){return this.analysisVisualization.viewData}get validMeasurement(){return this.path.isValidPolygon}get unit(){return this.analysis.unit??this._defaultUnit}get testData(){return{visualization:this.analysisVisualization,controller:this.analysisController}}};e([i({readOnly:!0})],Nt.prototype,"type",void 0),e([i({constructOnly:!0,nonNullable:!0})],Nt.prototype,"analysis",void 0),e([i()],Nt.prototype,"updating",null),e([i()],Nt.prototype,"analysisVisualization",void 0),e([i()],Nt.prototype,"analysisController",void 0),e([i()],Nt.prototype,"result",null),e([i()],Nt.prototype,"measurementData",void 0),e([i()],Nt.prototype,"viewData",null),e([i()],Nt.prototype,"validMeasurement",null),e([i()],Nt.prototype,"path",void 0),e([i()],Nt.prototype,"lastDraggedVertex",void 0),e([i()],Nt.prototype,"stagedPoint",void 0),e([i()],Nt.prototype,"mode",void 0),e([i()],Nt.prototype,"unit",null),e([i(o)],Nt.prototype,"_defaultUnit",void 0),Nt=e([r("esri.views.3d.analysis.AreaMeasurementAnalysisView3D")],Nt);const Ht=Nt;export{Ht as default};
